/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-05-11 17:10:03.753586
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53;
x0=IKcos(j[2]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[4]);
x8=IKsin(j[4]);
x9=IKcos(j[5]);
x10=IKcos(j[1]);
x11=IKsin(j[5]);
x12=((0.3)*x3);
x13=((1.0)*x10);
x14=((0.123)*x8);
x15=((0.0175)*x10);
x16=((0.123)*x7);
x17=((0.123)*x10);
x18=((1.0)*x2);
x19=(x0*x2);
x20=(x1*x11);
x21=(x1*x4);
x22=(x0*x1);
x23=(x3*x4);
x24=((-1.0)*x6);
x25=(x4*x6);
x26=(x11*x2);
x27=(x0*x3);
x28=((-1.0)*x5);
x29=(x11*x3);
x30=(x10*x9);
x31=(x0*x10*x5);
x32=(x18*x21);
x33=(x13*x25);
x34=((((-1.0)*x32))+x27);
x35=(((x19*x3))+(((-1.0)*x21)));
x36=(((x2*x23))+x22);
x37=((((-1.0)*x23))+(((-1.0)*x18*x22)));
x38=((((-1.0)*x22))+(((-1.0)*x18*x23)));
x39=((((-1.0)*x33))+x31);
x40=(x35*x5);
x41=(x36*x5);
IkReal x54=((1.0)*x13);
x42=((((-1.0)*x0*x54*x6))+(((-1.0)*x4*x5*x54)));
x43=(x39*x7);
x44=((((-1.0)*x41))+(((-1.0)*x35*x6)));
x45=(x40+((x38*x6)));
x46=(((x6*(((((-1.0)*x27))+x32))))+((x37*x5)));
x47=(x45*x7);
x48=(((x28*x34))+((x24*x37)));
x49=(x46*x7);
x50=(((x42*x8))+x43);
x51=(x48*x8);
x52=(x47+((x8*((((x28*x36))+((x24*x35)))))));
x53=((((-1.0)*x49))+(((-1.0)*x51)));
eerot[0]=(((x7*((((x34*x5))+((x37*x6))))))+((x46*x8)));
eerot[1]=(((x11*x53))+((x1*x30)));
eerot[2]=(((x53*x9))+(((-1.0)*x13*x20)));
IkReal x55=(x1*x19);
IkReal x56=((1.0)*x12);
eetrans[0]=(((x5*(((((-1.0)*x4*x56))+(((-0.3)*x55))))))+(((-0.33)*x55))+(((-1.0)*x1*x15))+((x9*((((x16*x46))+((x14*x48))))))+((x17*x20))+((x6*(((((-1.0)*x0*x56))+(((0.3)*x2*x21))))))+(((-0.33)*x23)));
eerot[3]=(((x8*((((x28*x35))+((x24*x38))))))+((x44*x7)));
eerot[4]=(((x3*x30))+((x11*x52)));
eerot[5]=((((-1.0)*x13*x29))+((x52*x9)));
eetrans[1]=((0.146)+(((0.33)*x21))+((x5*(((((-1.0)*x12*x19))+(((0.3)*x21))))))+((x6*(((((0.3)*x22))+((x12*x2*x4))))))+((x17*x29))+((x9*(((((-1.0)*x14*x44))+(((-1.0)*x16*x45))))))+(((-0.33)*x19*x3))+(((-1.0)*x15*x3)));
eerot[6]=(((x8*((x33+(((-1.0)*x0*x13*x5))))))+((x42*x7)));
eerot[7]=((((-1.0)*x18*x9))+((x11*x50)));
eerot[8]=(((x50*x9))+x26);
eetrans[2]=((-0.092)+(((0.3)*x10*x25))+(((0.0175)*x2))+(((-0.33)*x0*x10))+(((-0.123)*x26))+(((-0.3)*x31))+((x9*(((((-1.0)*x14*x42))+(((-1.0)*x16*x39)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j22,cj22,sj22,htj22,j22mul,j23,cj23,sj23,htj23,j23mul,j24,cj24,sj24,htj24,j24mul,j25,cj25,sj25,htj25,j25mul,j26,cj26,sj26,htj26,j26mul,j27,cj27,sj27,htj27,j27mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij22[2], _nj22,_ij23[2], _nj23,_ij24[2], _nj24,_ij25[2], _nj25,_ij26[2], _nj26,_ij27[2], _nj27;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j22=numeric_limits<IkReal>::quiet_NaN(); _ij22[0] = -1; _ij22[1] = -1; _nj22 = -1; j23=numeric_limits<IkReal>::quiet_NaN(); _ij23[0] = -1; _ij23[1] = -1; _nj23 = -1; j24=numeric_limits<IkReal>::quiet_NaN(); _ij24[0] = -1; _ij24[1] = -1; _nj24 = -1; j25=numeric_limits<IkReal>::quiet_NaN(); _ij25[0] = -1; _ij25[1] = -1; _nj25 = -1; j26=numeric_limits<IkReal>::quiet_NaN(); _ij26[0] = -1; _ij26[1] = -1; _nj26 = -1; j27=numeric_limits<IkReal>::quiet_NaN(); _ij27[0] = -1; _ij27[1] = -1; _nj27 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r02);
new_r01=r01;
new_r02=r00;
new_px=((((0.123)*r02))+px);
new_r10=r12;
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r10);
new_py=((0.146)+(((-0.123)*r12))+(((-1.0)*py)));
new_r20=r22;
new_r21=((-1.0)*r21);
new_r22=((-1.0)*r20);
new_pz=((-0.092)+(((-1.0)*pz))+(((-0.123)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x57=((1.0)*px);
IkReal x58=((1.0)*pz);
IkReal x59=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x59))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x58)));
rxp0_2=((((-1.0)*r10*x57))+((py*r00)));
rxp1_0=((((-1.0)*r21*x59))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x58)));
rxp1_2=((((-1.0)*r11*x57))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x59)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x58)));
rxp2_2=((((-1.0)*r12*x57))+((py*r02)));
{
IkReal j25array[2], cj25array[2], sj25array[2];
bool j25valid[2]={false};
_nj25 = 2;
cj25array[0]=((-1.00609217171717)+(((5.05050505050505)*pp)));
if( cj25array[0] >= -1-IKFAST_SINCOS_THRESH && cj25array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j25valid[0] = j25valid[1] = true;
    j25array[0] = IKacos(cj25array[0]);
    sj25array[0] = IKsin(j25array[0]);
    cj25array[1] = cj25array[0];
    j25array[1] = -j25array[0];
    sj25array[1] = -sj25array[0];
}
else if( isnan(cj25array[0]) )
{
    // probably any value will work
    j25valid[0] = true;
    cj25array[0] = 1; sj25array[0] = 0; j25array[0] = 0;
}
for(int ij25 = 0; ij25 < 2; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 2; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

{
IkReal j27eval[2];
j27eval[0]=((npx*npx)+(npy*npy));
j27eval[1]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  )
{
{
IkReal j26eval[2];
j26eval[0]=((IKabs(sj25))+(((3.03030303030303)*(IKabs(((0.3)+(((0.33)*cj25))))))));
j26eval[1]=((1.0)+(((2.2)*cj25))+(((1.21)*(cj25*cj25)))+(((1.21)*(sj25*sj25))));
if( IKabs(j26eval[0]) < 0.0000010000000000  || IKabs(j26eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j26, j27]

} else
{
{
IkReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
_nj26 = 2;
IkReal x60=((0.3)+(((0.33)*cj25)));
CheckValue<IkReal> x63 = IKatan2WithCheck(IkReal(((0.33)*sj25)),IkReal(x60),IKFAST_ATAN2_MAGTHRESH);
if(!x63.valid){
continue;
}
IkReal x61=((1.0)*(x63.value));
if((((((0.1089)*(sj25*sj25)))+(x60*x60))) < -0.00001)
continue;
CheckValue<IkReal> x64=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.1089)*(sj25*sj25)))+(x60*x60)))),-1);
if(!x64.valid){
continue;
}
if( ((npz*(x64.value))) < -1-IKFAST_SINCOS_THRESH || ((npz*(x64.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x62=IKasin((npz*(x64.value)));
j26array[0]=(x62+(((-1.0)*x61)));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
j26array[1]=((3.14159265358979)+(((-1.0)*x61))+(((-1.0)*x62)));
sj26array[1]=IKsin(j26array[1]);
cj26array[1]=IKcos(j26array[1]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
if( j26array[1] > IKPI )
{
    j26array[1]-=IK2PI;
}
else if( j26array[1] < -IKPI )
{    j26array[1]+=IK2PI;
}
j26valid[1] = true;
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 2; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

{
IkReal j27eval[3];
IkReal x65=npy*npy;
IkReal x66=npx*npx;
IkReal x67=((400.0)*sj26);
IkReal x68=((132.0)*sj25);
IkReal x69=((7.0)*sj26);
IkReal x70=((400.0)*cj26*npz);
j27eval[0]=(((sj26*x65))+((sj26*x66)));
j27eval[1]=IKsign((((x66*x67))+((x65*x67))));
j27eval[2]=((IKabs((((npx*x70))+(((-1.0)*npy*x69))+(((-1.0)*npx*x68)))))+(IKabs(((((-1.0)*npy*x70))+((npy*x68))+(((-1.0)*npx*x69))))));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  || IKabs(j27eval[2]) < 0.0000010000000000  )
{
{
IkReal j27eval[3];
IkReal x71=npy*npy;
IkReal x72=npx*npx;
IkReal x73=((400.0)*cj26);
IkReal x74=((7.0)*cj26);
IkReal x75=((132.0)*cj25);
IkReal x76=((400.0)*npz*sj26);
j27eval[0]=(((cj26*x72))+((cj26*x71)));
j27eval[1]=IKsign((((x72*x73))+((x71*x73))));
j27eval[2]=((IKabs(((((-1.0)*npy*x75))+(((-1.0)*npx*x74))+(((-120.0)*npy))+((npy*x76)))))+(IKabs(((((120.0)*npx))+(((-1.0)*npy*x74))+((npx*x75))+(((-1.0)*npx*x76))))));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  || IKabs(j27eval[2]) < 0.0000010000000000  )
{
{
IkReal j27eval[3];
IkReal x77=npy*npy;
IkReal x78=npx*npx;
IkReal x79=((120.0)*cj26);
IkReal x80=((132.0)*sj25*sj26);
IkReal x81=((132.0)*cj25*cj26);
j27eval[0]=((((-1.0)*x78))+(((-1.0)*x77)));
j27eval[1]=((IKabs((((npy*x81))+((npy*x79))+(((-1.0)*npy*x80))+(((7.0)*npx)))))+(IKabs(((((-1.0)*npx*x79))+(((-1.0)*npx*x81))+(((7.0)*npy))+((npx*x80))))));
j27eval[2]=IKsign(((((-400.0)*x77))+(((-400.0)*x78))));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  || IKabs(j27eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j26)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j27eval[3];
sj26=1.0;
cj26=0;
j26=1.5707963267949;
IkReal x82=npy*npy;
IkReal x83=npx*npx;
IkReal x84=((132.0)*sj25);
j27eval[0]=(x82+x83);
j27eval[1]=IKsign(((((400.0)*x83))+(((400.0)*x82))));
j27eval[2]=((IKabs((((npy*x84))+(((-7.0)*npx)))))+(IKabs(((((-7.0)*npy))+(((-1.0)*npx*x84))))));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  || IKabs(j27eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j27]

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x85=((132.0)*sj25);
CheckValue<IkReal> x86=IKPowWithIntegerCheck(IKsign(((((400.0)*(npy*npy)))+(((400.0)*(npx*npx))))),-1);
if(!x86.valid){
continue;
}
CheckValue<IkReal> x87 = IKatan2WithCheck(IkReal((((npy*x85))+(((-7.0)*npx)))),IkReal(((((-7.0)*npy))+(((-1.0)*npx*x85)))),IKFAST_ATAN2_MAGTHRESH);
if(!x87.valid){
continue;
}
j27array[0]=((-1.5707963267949)+(((1.5707963267949)*(x86.value)))+(x87.value));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[2];
IkReal x88=IKcos(j27);
IkReal x89=IKsin(j27);
IkReal x90=((1.0)*npy);
evalcond[0]=((-0.0175)+(((-1.0)*npx*x89))+(((-1.0)*x88*x90)));
evalcond[1]=((((0.33)*sj25))+((npx*x88))+(((-1.0)*x89*x90)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j26)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j27eval[3];
sj26=-1.0;
cj26=0;
j26=-1.5707963267949;
IkReal x807=npy*npy;
IkReal x808=npx*npx;
IkReal x809=((132.0)*sj25);
j27eval[0]=((((-1.0)*x807))+(((-1.0)*x808)));
j27eval[1]=((IKabs(((((7.0)*npy))+(((-1.0)*npx*x809)))))+(IKabs((((npy*x809))+(((7.0)*npx))))));
j27eval[2]=IKsign(((((-400.0)*x808))+(((-400.0)*x807))));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  || IKabs(j27eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j27]

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x810=((132.0)*sj25);
CheckValue<IkReal> x811=IKPowWithIntegerCheck(IKsign(((((-400.0)*(npy*npy)))+(((-400.0)*(npx*npx))))),-1);
if(!x811.valid){
continue;
}
CheckValue<IkReal> x812 = IKatan2WithCheck(IkReal((((npy*x810))+(((7.0)*npx)))),IkReal(((((-1.0)*npx*x810))+(((7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x812.valid){
continue;
}
j27array[0]=((-1.5707963267949)+(((1.5707963267949)*(x811.value)))+(x812.value));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[2];
IkReal x813=IKsin(j27);
IkReal x814=IKcos(j27);
IkReal x815=((1.0)*x814);
evalcond[0]=((-0.0175)+(((-1.0)*npy*x815))+(((-1.0)*npx*x813)));
evalcond[1]=((((-1.0)*npx*x815))+(((0.33)*sj25))+((npy*x813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j26))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j27eval[3];
sj26=0;
cj26=1.0;
j26=0;
IkReal x816=npy*npy;
IkReal x817=npx*npx;
IkReal x818=((132.0)*cj25);
j27eval[0]=((((-1.0)*x817))+(((-1.0)*x816)));
j27eval[1]=((IKabs(((((-120.0)*npx))+(((-1.0)*npx*x818))+(((7.0)*npy)))))+(IKabs(((((120.0)*npy))+((npy*x818))+(((7.0)*npx))))));
j27eval[2]=IKsign(((((-400.0)*x816))+(((-400.0)*x817))));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  || IKabs(j27eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j27]

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x819=((132.0)*cj25);
CheckValue<IkReal> x820=IKPowWithIntegerCheck(IKsign(((((-400.0)*(npy*npy)))+(((-400.0)*(npx*npx))))),-1);
if(!x820.valid){
continue;
}
CheckValue<IkReal> x821 = IKatan2WithCheck(IkReal(((((120.0)*npy))+((npy*x819))+(((7.0)*npx)))),IkReal(((((-120.0)*npx))+(((-1.0)*npx*x819))+(((7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x821.valid){
continue;
}
j27array[0]=((-1.5707963267949)+(((1.5707963267949)*(x820.value)))+(x821.value));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[2];
IkReal x822=IKsin(j27);
IkReal x823=IKcos(j27);
IkReal x824=((1.0)*x823);
evalcond[0]=((-0.0175)+(((-1.0)*npy*x824))+(((-1.0)*npx*x822)));
evalcond[1]=((0.3)+(((-1.0)*npx*x824))+(((0.33)*cj25))+((npy*x822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j26)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j27eval[3];
sj26=0;
cj26=-1.0;
j26=3.14159265358979;
IkReal x825=npy*npy;
IkReal x826=npx*npx;
IkReal x827=((132.0)*cj25);
j27eval[0]=(x826+x825);
j27eval[1]=((IKabs(((((-120.0)*npx))+(((-1.0)*npx*x827))+(((-7.0)*npy)))))+(IKabs(((((120.0)*npy))+(((-7.0)*npx))+((npy*x827))))));
j27eval[2]=IKsign(((((400.0)*x826))+(((400.0)*x825))));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  || IKabs(j27eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j27]

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x828=((132.0)*cj25);
CheckValue<IkReal> x829 = IKatan2WithCheck(IkReal(((((120.0)*npy))+(((-7.0)*npx))+((npy*x828)))),IkReal(((((-120.0)*npx))+(((-1.0)*npx*x828))+(((-7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x829.valid){
continue;
}
CheckValue<IkReal> x830=IKPowWithIntegerCheck(IKsign(((((400.0)*(npy*npy)))+(((400.0)*(npx*npx))))),-1);
if(!x830.valid){
continue;
}
j27array[0]=((-1.5707963267949)+(x829.value)+(((1.5707963267949)*(x830.value))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[2];
IkReal x831=IKcos(j27);
IkReal x832=IKsin(j27);
IkReal x833=((1.0)*npy);
evalcond[0]=((-0.0175)+(((-1.0)*npx*x832))+(((-1.0)*x831*x833)));
evalcond[1]=((0.3)+(((-1.0)*x832*x833))+((npx*x831))+(((0.33)*cj25)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j27]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x834=((120.0)*cj26);
IkReal x835=((132.0)*sj25*sj26);
IkReal x836=((132.0)*cj25*cj26);
CheckValue<IkReal> x837=IKPowWithIntegerCheck(IKsign(((((-400.0)*(npy*npy)))+(((-400.0)*(npx*npx))))),-1);
if(!x837.valid){
continue;
}
CheckValue<IkReal> x838 = IKatan2WithCheck(IkReal(((((-1.0)*npy*x835))+((npy*x836))+((npy*x834))+(((7.0)*npx)))),IkReal(((((-1.0)*npx*x834))+(((-1.0)*npx*x836))+((npx*x835))+(((7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x838.valid){
continue;
}
j27array[0]=((-1.5707963267949)+(((1.5707963267949)*(x837.value)))+(x838.value));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x839=IKcos(j27);
IkReal x840=IKsin(j27);
IkReal x841=((1.0)*npz);
IkReal x842=((0.33)*sj25);
IkReal x843=((0.33)*cj25);
IkReal x844=(npy*x840);
IkReal x845=(npx*x839);
evalcond[0]=((-0.0175)+(((-1.0)*npx*x840))+(((-1.0)*npy*x839)));
evalcond[1]=((((-1.0)*sj26*x844))+(((-1.0)*cj26*x841))+((sj26*x845))+x842);
evalcond[2]=((0.3)+(((-1.0)*sj26*x841))+(((-1.0)*cj26*x845))+((cj26*x844))+x843);
evalcond[3]=((((-1.0)*sj26*x842))+((cj26*x843))+(((-1.0)*x845))+x844+(((0.3)*cj26)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x846=((400.0)*cj26);
IkReal x847=((7.0)*cj26);
IkReal x848=((132.0)*cj25);
IkReal x849=((400.0)*npz*sj26);
CheckValue<IkReal> x850=IKPowWithIntegerCheck(IKsign((((x846*(npx*npx)))+((x846*(npy*npy))))),-1);
if(!x850.valid){
continue;
}
CheckValue<IkReal> x851 = IKatan2WithCheck(IkReal(((((-1.0)*npy*x848))+(((-1.0)*npx*x847))+(((-120.0)*npy))+((npy*x849)))),IkReal(((((-1.0)*npy*x847))+(((120.0)*npx))+(((-1.0)*npx*x849))+((npx*x848)))),IKFAST_ATAN2_MAGTHRESH);
if(!x851.valid){
continue;
}
j27array[0]=((-1.5707963267949)+(((1.5707963267949)*(x850.value)))+(x851.value));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x852=IKcos(j27);
IkReal x853=IKsin(j27);
IkReal x854=((1.0)*npz);
IkReal x855=((0.33)*sj25);
IkReal x856=((0.33)*cj25);
IkReal x857=(npy*x853);
IkReal x858=(npx*x852);
evalcond[0]=((-0.0175)+(((-1.0)*npx*x853))+(((-1.0)*npy*x852)));
evalcond[1]=((((-1.0)*sj26*x857))+(((-1.0)*cj26*x854))+x855+((sj26*x858)));
evalcond[2]=((0.3)+((cj26*x857))+(((-1.0)*sj26*x854))+x856+(((-1.0)*cj26*x858)));
evalcond[3]=(((cj26*x856))+(((-1.0)*x858))+(((-1.0)*sj26*x855))+x857+(((0.3)*cj26)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x859=((400.0)*sj26);
IkReal x860=((132.0)*sj25);
IkReal x861=((7.0)*sj26);
IkReal x862=((400.0)*cj26*npz);
CheckValue<IkReal> x863=IKPowWithIntegerCheck(IKsign((((x859*(npy*npy)))+((x859*(npx*npx))))),-1);
if(!x863.valid){
continue;
}
CheckValue<IkReal> x864 = IKatan2WithCheck(IkReal(((((-1.0)*npx*x861))+(((-1.0)*npy*x862))+((npy*x860)))),IkReal((((npx*x862))+(((-1.0)*npx*x860))+(((-1.0)*npy*x861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x864.valid){
continue;
}
j27array[0]=((-1.5707963267949)+(((1.5707963267949)*(x863.value)))+(x864.value));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x865=IKcos(j27);
IkReal x866=IKsin(j27);
IkReal x867=((1.0)*npz);
IkReal x868=((0.33)*sj25);
IkReal x869=((0.33)*cj25);
IkReal x870=(npy*x866);
IkReal x871=(npx*x865);
evalcond[0]=((-0.0175)+(((-1.0)*npx*x866))+(((-1.0)*npy*x865)));
evalcond[1]=((((-1.0)*sj26*x870))+x868+(((-1.0)*cj26*x867))+((sj26*x871)));
evalcond[2]=((0.3)+(((-1.0)*cj26*x871))+(((-1.0)*sj26*x867))+x869+((cj26*x870)));
evalcond[3]=((((-1.0)*sj26*x868))+(((-1.0)*x871))+x870+(((0.3)*cj26))+((cj26*x869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j27array[2], cj27array[2], sj27array[2];
bool j27valid[2]={false};
_nj27 = 2;
CheckValue<IkReal> x874 = IKatan2WithCheck(IkReal(((-1.0)*npy)),IkReal(((-1.0)*npx)),IKFAST_ATAN2_MAGTHRESH);
if(!x874.valid){
continue;
}
IkReal x872=((1.0)*(x874.value));
if((((npx*npx)+(npy*npy))) < -0.00001)
continue;
CheckValue<IkReal> x875=IKPowWithIntegerCheck(IKabs(IKsqrt(((npx*npx)+(npy*npy)))),-1);
if(!x875.valid){
continue;
}
if( (((0.0175)*(x875.value))) < -1-IKFAST_SINCOS_THRESH || (((0.0175)*(x875.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x873=IKasin(((0.0175)*(x875.value)));
j27array[0]=(x873+(((-1.0)*x872)));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
j27array[1]=((3.14159265358979)+(((-1.0)*x873))+(((-1.0)*x872)));
sj27array[1]=IKsin(j27array[1]);
cj27array[1]=IKcos(j27array[1]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
if( j27array[1] > IKPI )
{
    j27array[1]-=IK2PI;
}
else if( j27array[1] < -IKPI )
{    j27array[1]+=IK2PI;
}
j27valid[1] = true;
for(int ij27 = 0; ij27 < 2; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 2; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];

{
IkReal j26eval[3];
IkReal x876=(npy*sj27);
IkReal x877=((3300.0)*sj25);
IkReal x878=(cj27*npx);
IkReal x879=((3300.0)*cj25);
j26eval[0]=((1.00454545454545)+cj25);
j26eval[1]=((IKabs(((((-1.0)*x877*x878))+((x876*x877))+(((3000.0)*npz))+((npz*x879)))))+(IKabs(((((-1.0)*x876*x879))+((x878*x879))+(((-3000.0)*x876))+((npz*x877))+(((3000.0)*x878))))));
j26eval[2]=IKsign(((1989.0)+(((1980.0)*cj25))));
if( IKabs(j26eval[0]) < 0.0000010000000000  || IKabs(j26eval[1]) < 0.0000010000000000  || IKabs(j26eval[2]) < 0.0000010000000000  )
{
{
IkReal j26eval[3];
IkReal x880=(npy*sj27);
IkReal x881=(npz*sj25);
IkReal x882=(cj27*npx);
IkReal x883=((100.0)*npz);
IkReal x884=(cj25*x882);
j26eval[0]=((((1.1)*x881))+(((-1.1)*x884))+(((1.1)*cj25*x880))+(((-1.0)*x882))+x880);
j26eval[1]=((IKabs(((((-1.0)*x882*x883))+((x880*x883))+(((10.89)*cj25*sj25))+(((9.9)*sj25)))))+(IKabs(((-9.0)+(((-10.89)*(cj25*cj25)))+((npz*x883))+(((-19.8)*cj25))))));
j26eval[2]=IKsign(((((33.0)*x881))+(((33.0)*cj25*x880))+(((30.0)*x880))+(((-33.0)*x884))+(((-30.0)*x882))));
if( IKabs(j26eval[0]) < 0.0000010000000000  || IKabs(j26eval[1]) < 0.0000010000000000  || IKabs(j26eval[2]) < 0.0000010000000000  )
{
{
IkReal j26eval[3];
IkReal x885=cj27*cj27;
IkReal x886=npy*npy;
IkReal x887=npz*npz;
IkReal x888=npx*npx;
IkReal x889=(npy*sj27);
IkReal x890=((33.0)*sj25);
IkReal x891=(cj27*npx);
IkReal x892=((33.0)*cj25);
IkReal x893=((33.0)*x891);
IkReal x894=(x885*x886);
IkReal x895=(x885*x888);
j26eval[0]=((((-1.0)*x894))+(((-2.0)*x889*x891))+x887+x886+x895);
j26eval[1]=((IKabs(((((30.0)*npz))+((npz*x892))+((x889*x890))+(((-1.0)*x890*x891)))))+(IKabs(((((-1.0)*x889*x892))+((npz*x890))+((x891*x892))+(((30.0)*x891))+(((-30.0)*x889))))));
j26eval[2]=IKsign(((((-100.0)*x894))+(((100.0)*x895))+(((100.0)*x886))+(((100.0)*x887))+(((-200.0)*x889*x891))));
if( IKabs(j26eval[0]) < 0.0000010000000000  || IKabs(j26eval[1]) < 0.0000010000000000  || IKabs(j26eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j26]

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x896=cj27*cj27;
IkReal x897=npy*npy;
IkReal x898=((33.0)*cj25);
IkReal x899=(cj27*npx);
IkReal x900=((33.0)*sj25);
IkReal x901=(npy*sj27);
IkReal x902=((100.0)*x896);
CheckValue<IkReal> x903 = IKatan2WithCheck(IkReal(((((30.0)*npz))+((x900*x901))+((npz*x898))+(((-1.0)*x899*x900)))),IkReal((((x898*x899))+(((-30.0)*x901))+(((-1.0)*x898*x901))+((npz*x900))+(((30.0)*x899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x903.valid){
continue;
}
CheckValue<IkReal> x904=IKPowWithIntegerCheck(IKsign(((((100.0)*x897))+(((100.0)*(npz*npz)))+(((-200.0)*x899*x901))+((x902*(npx*npx)))+(((-1.0)*x897*x902)))),-1);
if(!x904.valid){
continue;
}
j26array[0]=((-1.5707963267949)+(x903.value)+(((1.5707963267949)*(x904.value))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x905=IKsin(j26);
IkReal x906=IKcos(j26);
IkReal x907=((0.33)*sj25);
IkReal x908=((1.0)*npz);
IkReal x909=((0.33)*cj25);
IkReal x910=(npy*sj27);
IkReal x911=((1.0)*cj27*npx);
evalcond[0]=(((x905*x909))+(((-1.0)*x908))+((x906*x907))+(((0.3)*x905)));
evalcond[1]=(((cj27*npx*x905))+(((-1.0)*x905*x910))+x907+(((-1.0)*x906*x908)));
evalcond[2]=((0.3)+(((-1.0)*x906*x911))+((x906*x910))+x909+(((-1.0)*x905*x908)));
evalcond[3]=((((-1.0)*x911))+((x906*x909))+(((0.3)*x906))+x910+(((-1.0)*x905*x907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x912=(cj27*npx);
IkReal x913=((33.0)*cj25);
IkReal x914=(npy*sj27);
IkReal x915=((100.0)*npz);
CheckValue<IkReal> x916=IKPowWithIntegerCheck(IKsign(((((-30.0)*x912))+(((33.0)*npz*sj25))+(((-1.0)*x912*x913))+((x913*x914))+(((30.0)*x914)))),-1);
if(!x916.valid){
continue;
}
CheckValue<IkReal> x917 = IKatan2WithCheck(IkReal((((x914*x915))+(((-1.0)*x912*x915))+(((10.89)*cj25*sj25))+(((9.9)*sj25)))),IkReal(((-9.0)+(((-10.89)*(cj25*cj25)))+((npz*x915))+(((-19.8)*cj25)))),IKFAST_ATAN2_MAGTHRESH);
if(!x917.valid){
continue;
}
j26array[0]=((-1.5707963267949)+(((1.5707963267949)*(x916.value)))+(x917.value));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x918=IKsin(j26);
IkReal x919=IKcos(j26);
IkReal x920=((0.33)*sj25);
IkReal x921=((1.0)*npz);
IkReal x922=((0.33)*cj25);
IkReal x923=(npy*sj27);
IkReal x924=((1.0)*cj27*npx);
evalcond[0]=(((x918*x922))+(((-1.0)*x921))+((x919*x920))+(((0.3)*x918)));
evalcond[1]=(((cj27*npx*x918))+(((-1.0)*x918*x923))+(((-1.0)*x919*x921))+x920);
evalcond[2]=((0.3)+((x919*x923))+(((-1.0)*x918*x921))+(((-1.0)*x919*x924))+x922);
evalcond[3]=((((-1.0)*x924))+((x919*x922))+(((-1.0)*x918*x920))+(((0.3)*x919))+x923);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x925=(npy*sj27);
IkReal x926=((3300.0)*sj25);
IkReal x927=(cj27*npx);
IkReal x928=((3300.0)*cj25);
CheckValue<IkReal> x929=IKPowWithIntegerCheck(IKsign(((1989.0)+(((1980.0)*cj25)))),-1);
if(!x929.valid){
continue;
}
CheckValue<IkReal> x930 = IKatan2WithCheck(IkReal((((npz*x928))+(((-1.0)*x926*x927))+(((3000.0)*npz))+((x925*x926)))),IkReal((((npz*x926))+(((-1.0)*x925*x928))+(((-3000.0)*x925))+(((3000.0)*x927))+((x927*x928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x930.valid){
continue;
}
j26array[0]=((-1.5707963267949)+(((1.5707963267949)*(x929.value)))+(x930.value));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x931=IKsin(j26);
IkReal x932=IKcos(j26);
IkReal x933=((0.33)*sj25);
IkReal x934=((1.0)*npz);
IkReal x935=((0.33)*cj25);
IkReal x936=(npy*sj27);
IkReal x937=((1.0)*cj27*npx);
evalcond[0]=((((0.3)*x931))+((x931*x935))+((x932*x933))+(((-1.0)*x934)));
evalcond[1]=((((-1.0)*x931*x936))+(((-1.0)*x932*x934))+x933+((cj27*npx*x931)));
evalcond[2]=((0.3)+(((-1.0)*x931*x934))+(((-1.0)*x932*x937))+x935+((x932*x936)));
evalcond[3]=((((-1.0)*x931*x933))+(((0.3)*x932))+x936+((x932*x935))+(((-1.0)*x937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x91=(cj26*r12);
IkReal x92=(cj26*r22);
IkReal x93=((1.0)*sj26);
IkReal x94=((1.0)*sj27);
IkReal x95=((1.0)*sj25);
IkReal x96=((-1.0)*sj26);
IkReal x97=(((cj27*r00))+(((-1.0)*r01*x94)));
IkReal x98=(((cj27*r10))+(((-1.0)*r11*x94)));
IkReal x99=(((cj27*r20))+(((-1.0)*r21*x94)));
IkReal x100=(sj26*x99);
IkReal x101=(((cj26*x97))+((r02*sj26)));
IkReal x102=(((cj26*x98))+((r12*sj26)));
IkReal x103=(((r22*sj26))+((cj26*x99)));
IkReal x104=(((x96*x97))+((cj26*r02)));
new_r00=(((cj25*x104))+(((-1.0)*x101*x95)));
new_r01=(((sj25*x104))+((cj25*x101)));
new_r02=(((r00*sj27))+((cj27*r01)));
new_r10=((((-1.0)*x102*x95))+((cj25*((x91+(((-1.0)*x93*x98)))))));
new_r11=(((cj25*x102))+((sj25*((((x96*x98))+x91)))));
new_r12=(((cj27*r11))+((r10*sj27)));
new_r20=((((-1.0)*x103*x95))+((cj25*((x92+(((-1.0)*x93*x99)))))));
new_r21=(((cj25*x103))+((sj25*((((x96*x99))+x92)))));
new_r22=(((cj27*r21))+((r20*sj27)));
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
sj23array[0]=new_r22;
if( sj23array[0] >= -1-IKFAST_SINCOS_THRESH && sj23array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j23valid[0] = j23valid[1] = true;
    j23array[0] = IKasin(sj23array[0]);
    cj23array[0] = IKcos(j23array[0]);
    sj23array[1] = sj23array[0];
    j23array[1] = j23array[0] > 0 ? (IKPI-j23array[0]) : (-IKPI-j23array[0]);
    cj23array[1] = -cj23array[0];
}
else if( isnan(sj23array[0]) )
{
    // probably any value will work
    j23valid[0] = true;
    cj23array[0] = 1; sj23array[0] = 0; j23array[0] = 0;
}
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];

{
IkReal j24eval[3];
j24eval[0]=cj23;
j24eval[1]=IKsign(cj23);
j24eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
j22eval[0]=cj23;
j22eval[1]=IKsign(cj23);
j22eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[2];
j22eval[0]=cj23;
j22eval[1]=new_r02;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j24mul = 1;
j24=0;
j22mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].fmul = j22mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].fmul = j24mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j24mul = 1;
j24=0;
j22mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].fmul = j22mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].fmul = j24mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x105=new_r22*new_r22;
IkReal x106=((16.0)*new_r10);
IkReal x107=((16.0)*new_r01);
IkReal x108=((16.0)*new_r00);
IkReal x109=(new_r11*new_r22);
IkReal x110=((8.0)*new_r00);
IkReal x111=(x105*x106);
IkReal x112=(x105*x107);
j22eval[0]=((IKabs(((((-1.0)*x111))+x106)))+(IKabs(((((32.0)*new_r00))+(((-16.0)*x109))+(((-1.0)*x105*x108)))))+(IKabs((((new_r22*x110))+(((-8.0)*new_r11)))))+(IKabs(((((-1.0)*x112))+x107)))+(IKabs(((((-8.0)*x109))+((x105*x110)))))+(IKabs(((((-32.0)*new_r11*x105))+((new_r22*x108))+(((16.0)*new_r11)))))+(IKabs(((((-1.0)*x107))+x112)))+(IKabs(((((-1.0)*x106))+x111))));
if( IKabs(j22eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j22, j24]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j22evalpoly[1];
IkReal x113=new_r22*new_r22;
IkReal x114=((16.0)*new_r01);
IkReal x115=(new_r00*new_r22);
IkReal x116=(x113*x114);
IkReal x117=((((8.0)*x115))+(((-8.0)*new_r11)));
op[0]=x117;
op[1]=((((-1.0)*x114))+x116);
op[2]=((((16.0)*x115))+(((16.0)*new_r11))+(((-32.0)*new_r11*x113)));
op[3]=((((-1.0)*x116))+x114);
op[4]=x117;
polyroots4(op,zeror,numroots);
IkReal j22array[4], cj22array[4], sj22array[4], tempj22array[1];
int numsolutions = 0;
for(int ij22 = 0; ij22 < numroots; ++ij22)
{
IkReal htj22 = zeror[ij22];
tempj22array[0]=((2.0)*(atan(htj22)));
for(int kj22 = 0; kj22 < 1; ++kj22)
{
j22array[numsolutions] = tempj22array[kj22];
if( j22array[numsolutions] > IKPI )
{
    j22array[numsolutions]-=IK2PI;
}
else if( j22array[numsolutions] < -IKPI )
{
    j22array[numsolutions]+=IK2PI;
}
sj22array[numsolutions] = IKsin(j22array[numsolutions]);
cj22array[numsolutions] = IKcos(j22array[numsolutions]);
numsolutions++;
}
}
bool j22valid[4]={true,true,true,true};
_nj22 = 4;
for(int ij22 = 0; ij22 < numsolutions; ++ij22)
    {
if( !j22valid[ij22] )
{
    continue;
}
    j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
htj22 = IKtan(j22/2);

IkReal x118=new_r22*new_r22;
IkReal x119=((16.0)*new_r10);
IkReal x120=(new_r11*new_r22);
IkReal x121=((8.0)*x120);
IkReal x122=(new_r00*x118);
IkReal x123=((8.0)*x122);
IkReal x124=(x118*x119);
j22evalpoly[0]=((((htj22*htj22)*(((((32.0)*new_r00))+(((-16.0)*x122))+(((-16.0)*x120))))))+(((-1.0)*x121))+x123+(((htj22*htj22*htj22*htj22)*(((((-1.0)*x121))+x123))))+((htj22*(((((-1.0)*x119))+x124))))+(((htj22*htj22*htj22)*(((((-1.0)*x124))+x119)))));
if( IKabs(j22evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < numsolutions; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
{
IkReal j24eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x125=new_r22*new_r22;
IkReal x126=cj22*cj22;
IkReal x127=(new_r22*sj22);
IkReal x128=(((x125*x126))+(((-1.0)*x125))+(((-1.0)*x126)));
j24eval[0]=x128;
j24eval[1]=IKsign(x128);
j24eval[2]=((IKabs(((((-1.0)*cj22*new_r00))+((new_r01*x127)))))+(IKabs((((cj22*new_r01))+((new_r00*x127))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal j24eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j24eval[0]=new_r22;
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal j24eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j24eval[0]=cj22;
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j22)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[4];
IkReal x129=IKsin(j24);
IkReal x130=IKcos(j24);
evalcond[0]=x129;
evalcond[1]=x130;
evalcond[2]=(x129+new_r11);
evalcond[3]=((((-1.0)*x130))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j22)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[4];
IkReal x131=IKsin(j24);
IkReal x132=IKcos(j24);
evalcond[0]=x131;
evalcond[1]=x132;
evalcond[2]=(x131+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x133=new_r22*new_r22;
CheckValue<IkReal> x134=IKPowWithIntegerCheck(((-1.0)+x133),-1);
if(!x134.valid){
continue;
}
if(((x133*(x134.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x133*(x134.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj22)))))+(IKabs(((((-1.0)*gconst6))+cj22)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
IkReal x135=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
sj22=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
cj22=gconst6;
if( (gconst6) < -1-IKFAST_SINCOS_THRESH || (gconst6) > 1+IKFAST_SINCOS_THRESH )
    continue;
j22=IKacos(gconst6);
CheckValue<IkReal> x136=IKPowWithIntegerCheck(((-1.0)+x135),-1);
if(!x136.valid){
continue;
}
if(((x135*(x136.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x135*(x136.value)));
j24eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
CheckValue<IkReal> x137=IKPowWithIntegerCheck(gconst6,-1);
if(!x137.valid){
continue;
}
if( IKabs(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x137.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))))+IKsqr((new_r00*(x137.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))), (new_r00*(x137.value)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x138=IKsin(j24);
IkReal x139=IKcos(j24);
IkReal x140=((1.0)*x139);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x141=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
evalcond[0]=x138;
evalcond[1]=x139;
evalcond[2]=(((gconst6*x138))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x140))+new_r00);
evalcond[4]=(((x138*x141))+new_r11);
evalcond[5]=((((-1.0)*x140*x141))+new_r10);
evalcond[6]=(((gconst6*new_r01))+((new_r11*x141))+x138);
evalcond[7]=((((-1.0)*x140))+((gconst6*new_r00))+((new_r10*x141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x142 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x142.valid){
continue;
}
CheckValue<IkReal> x143=IKPowWithIntegerCheck(IKsign(gconst6),-1);
if(!x143.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(x142.value)+(((1.5707963267949)*(x143.value))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x144=IKsin(j24);
IkReal x145=IKcos(j24);
IkReal x146=((1.0)*x145);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x147=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
evalcond[0]=x144;
evalcond[1]=x145;
evalcond[2]=(((gconst6*x144))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x146))+new_r00);
evalcond[4]=(((x144*x147))+new_r11);
evalcond[5]=((((-1.0)*x146*x147))+new_r10);
evalcond[6]=(((gconst6*new_r01))+((new_r11*x147))+x144);
evalcond[7]=((((-1.0)*x146))+((gconst6*new_r00))+((new_r10*x147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x148=new_r22*new_r22;
CheckValue<IkReal> x149=IKPowWithIntegerCheck(((-1.0)+x148),-1);
if(!x149.valid){
continue;
}
if(((x148*(x149.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x148*(x149.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj22)))))+(IKabs(((((-1.0)*gconst6))+cj22)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
IkReal x150=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
sj22=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))));
cj22=gconst6;
if( (gconst6) < -1-IKFAST_SINCOS_THRESH || (gconst6) > 1+IKFAST_SINCOS_THRESH )
    continue;
j22=((-1.0)*(IKacos(gconst6)));
CheckValue<IkReal> x151=IKPowWithIntegerCheck(((-1.0)+x150),-1);
if(!x151.valid){
continue;
}
if(((x150*(x151.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x150*(x151.value)));
j24eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
CheckValue<IkReal> x152=IKPowWithIntegerCheck(gconst6,-1);
if(!x152.valid){
continue;
}
if( IKabs(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x152.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))))+IKsqr((new_r00*(x152.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))), (new_r00*(x152.value)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x153=IKsin(j24);
IkReal x154=IKcos(j24);
IkReal x155=((1.0)*x154);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x156=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
IkReal x157=((1.0)*x156);
evalcond[0]=x153;
evalcond[1]=x154;
evalcond[2]=(((gconst6*x153))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x155))+new_r00);
evalcond[4]=(((x154*x156))+new_r10);
evalcond[5]=((((-1.0)*x153*x157))+new_r11);
evalcond[6]=(((gconst6*new_r01))+x153+(((-1.0)*new_r11*x157)));
evalcond[7]=((((-1.0)*x155))+((gconst6*new_r00))+(((-1.0)*new_r10*x157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x158 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x158.valid){
continue;
}
CheckValue<IkReal> x159=IKPowWithIntegerCheck(IKsign(gconst6),-1);
if(!x159.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(x158.value)+(((1.5707963267949)*(x159.value))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x160=IKsin(j24);
IkReal x161=IKcos(j24);
IkReal x162=((1.0)*x161);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x163=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
IkReal x164=((1.0)*x163);
evalcond[0]=x160;
evalcond[1]=x161;
evalcond[2]=(((gconst6*x160))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x162))+new_r00);
evalcond[4]=(((x161*x163))+new_r10);
evalcond[5]=((((-1.0)*x160*x164))+new_r11);
evalcond[6]=(((gconst6*new_r01))+(((-1.0)*new_r11*x164))+x160);
evalcond[7]=((((-1.0)*x162))+((gconst6*new_r00))+(((-1.0)*new_r10*x164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x165=new_r22*new_r22;
CheckValue<IkReal> x166=IKPowWithIntegerCheck(((-1.0)+x165),-1);
if(!x166.valid){
continue;
}
if(((x165*(x166.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x165*(x166.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst7))+cj22)))+(IKabs(((-1.0)+(IKsign(sj22)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
IkReal x167=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
sj22=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
cj22=gconst7;
if( (gconst7) < -1-IKFAST_SINCOS_THRESH || (gconst7) > 1+IKFAST_SINCOS_THRESH )
    continue;
j22=IKacos(gconst7);
CheckValue<IkReal> x168=IKPowWithIntegerCheck(((-1.0)+x167),-1);
if(!x168.valid){
continue;
}
if(((x167*(x168.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x167*(x168.value)))));
j24eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
CheckValue<IkReal> x169=IKPowWithIntegerCheck(gconst7,-1);
if(!x169.valid){
continue;
}
if( IKabs(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x169.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))))+IKsqr((new_r00*(x169.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))), (new_r00*(x169.value)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x170=IKsin(j24);
IkReal x171=IKcos(j24);
IkReal x172=((1.0)*x171);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x173=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
evalcond[0]=x170;
evalcond[1]=x171;
evalcond[2]=(((gconst7*x170))+new_r01);
evalcond[3]=((((-1.0)*gconst7*x172))+new_r00);
evalcond[4]=(((x170*x173))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x172*x173)));
evalcond[6]=(((new_r11*x173))+x170+((gconst7*new_r01)));
evalcond[7]=(((new_r10*x173))+(((-1.0)*x172))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x174 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x174.valid){
continue;
}
CheckValue<IkReal> x175=IKPowWithIntegerCheck(IKsign(gconst7),-1);
if(!x175.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(x174.value)+(((1.5707963267949)*(x175.value))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x176=IKsin(j24);
IkReal x177=IKcos(j24);
IkReal x178=((1.0)*x177);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x179=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
evalcond[0]=x176;
evalcond[1]=x177;
evalcond[2]=(((gconst7*x176))+new_r01);
evalcond[3]=((((-1.0)*gconst7*x178))+new_r00);
evalcond[4]=(((x176*x179))+new_r11);
evalcond[5]=((((-1.0)*x178*x179))+new_r10);
evalcond[6]=(((new_r11*x179))+x176+((gconst7*new_r01)));
evalcond[7]=(((new_r10*x179))+(((-1.0)*x178))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x180=new_r22*new_r22;
CheckValue<IkReal> x181=IKPowWithIntegerCheck(((-1.0)+x180),-1);
if(!x181.valid){
continue;
}
if(((x180*(x181.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x180*(x181.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst7))+cj22)))+(IKabs(((1.0)+(IKsign(sj22)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
IkReal x182=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
sj22=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))))));
cj22=gconst7;
if( (gconst7) < -1-IKFAST_SINCOS_THRESH || (gconst7) > 1+IKFAST_SINCOS_THRESH )
    continue;
j22=((-1.0)*(IKacos(gconst7)));
CheckValue<IkReal> x183=IKPowWithIntegerCheck(((-1.0)+x182),-1);
if(!x183.valid){
continue;
}
if(((x182*(x183.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x182*(x183.value)))));
j24eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
CheckValue<IkReal> x184=IKPowWithIntegerCheck(gconst7,-1);
if(!x184.valid){
continue;
}
if( IKabs((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x184.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01))))+IKsqr((new_r00*(x184.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01))), (new_r00*(x184.value)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x185=IKsin(j24);
IkReal x186=IKcos(j24);
IkReal x187=((1.0)*x186);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x188=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
IkReal x189=((1.0)*x188);
evalcond[0]=x185;
evalcond[1]=x186;
evalcond[2]=(new_r01+((gconst7*x185)));
evalcond[3]=(new_r00+(((-1.0)*gconst7*x187)));
evalcond[4]=(((x186*x188))+new_r10);
evalcond[5]=((((-1.0)*x185*x189))+new_r11);
evalcond[6]=(x185+(((-1.0)*new_r11*x189))+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x187))+(((-1.0)*new_r10*x189))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x190 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x190.valid){
continue;
}
CheckValue<IkReal> x191=IKPowWithIntegerCheck(IKsign(gconst7),-1);
if(!x191.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(x190.value)+(((1.5707963267949)*(x191.value))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x192=IKsin(j24);
IkReal x193=IKcos(j24);
IkReal x194=((1.0)*x193);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x195=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
IkReal x196=((1.0)*x195);
evalcond[0]=x192;
evalcond[1]=x193;
evalcond[2]=(new_r01+((gconst7*x192)));
evalcond[3]=(new_r00+(((-1.0)*gconst7*x194)));
evalcond[4]=(((x193*x195))+new_r10);
evalcond[5]=((((-1.0)*x192*x196))+new_r11);
evalcond[6]=(x192+(((-1.0)*new_r11*x196))+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x194))+(((-1.0)*new_r10*x196))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j24]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x197=((1.0)*new_r22);
IkReal x198=(cj22*new_r01);
CheckValue<IkReal> x199=IKPowWithIntegerCheck(cj22,-1);
if(!x199.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*sj22))+(((-1.0)*x198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x199.value)*((((new_r11*new_r22*(cj22*cj22)))+(((-1.0)*sj22*x197*x198))+(((-1.0)*new_r11*x197))+new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj22))+(((-1.0)*x198))))+IKsqr(((x199.value)*((((new_r11*new_r22*(cj22*cj22)))+(((-1.0)*sj22*x197*x198))+(((-1.0)*new_r11*x197))+new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*new_r11*sj22))+(((-1.0)*x198))), ((x199.value)*((((new_r11*new_r22*(cj22*cj22)))+(((-1.0)*sj22*x197*x198))+(((-1.0)*new_r11*x197))+new_r00))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[10];
IkReal x200=IKsin(j24);
IkReal x201=IKcos(j24);
IkReal x202=(new_r22*sj22);
IkReal x203=(cj22*new_r10);
IkReal x204=((1.0)*new_r22);
IkReal x205=((1.0)*sj22);
IkReal x206=(cj22*new_r11);
IkReal x207=((1.0)*x201);
IkReal x208=(cj22*x200);
evalcond[0]=(((cj22*new_r01))+x200+((new_r11*sj22)));
evalcond[1]=(((cj22*new_r00))+(((-1.0)*x207))+((new_r10*sj22)));
evalcond[2]=(((x201*x202))+x208+new_r01);
evalcond[3]=((((-1.0)*x203*x204))+((new_r00*x202))+x200);
evalcond[4]=((((-1.0)*x204*x206))+((new_r01*x202))+x201);
evalcond[5]=((((-1.0)*cj22*x207))+((x200*x202))+new_r00);
evalcond[6]=(((sj22*x200))+(((-1.0)*cj22*x201*x204))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x205))+(((-1.0)*x200*x204))+x203);
evalcond[8]=((((-1.0)*x201*x204))+x206+(((-1.0)*new_r01*x205)));
evalcond[9]=((((-1.0)*x204*x208))+(((-1.0)*x201*x205))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x209=((1.0)*new_r01);
CheckValue<IkReal> x210=IKPowWithIntegerCheck(new_r22,-1);
if(!x210.valid){
continue;
}
if( IKabs(((((-1.0)*cj22*x209))+(((-1.0)*new_r11*sj22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x210.value)*(((((-1.0)*sj22*x209))+((cj22*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj22*x209))+(((-1.0)*new_r11*sj22))))+IKsqr(((x210.value)*(((((-1.0)*sj22*x209))+((cj22*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*cj22*x209))+(((-1.0)*new_r11*sj22))), ((x210.value)*(((((-1.0)*sj22*x209))+((cj22*new_r11))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[10];
IkReal x211=IKsin(j24);
IkReal x212=IKcos(j24);
IkReal x213=(new_r22*sj22);
IkReal x214=(cj22*new_r10);
IkReal x215=((1.0)*new_r22);
IkReal x216=((1.0)*sj22);
IkReal x217=(cj22*new_r11);
IkReal x218=((1.0)*x212);
IkReal x219=(cj22*x211);
evalcond[0]=(((cj22*new_r01))+x211+((new_r11*sj22)));
evalcond[1]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x218)));
evalcond[2]=(x219+((x212*x213))+new_r01);
evalcond[3]=(x211+((new_r00*x213))+(((-1.0)*x214*x215)));
evalcond[4]=(x212+((new_r01*x213))+(((-1.0)*x215*x217)));
evalcond[5]=(((x211*x213))+(((-1.0)*cj22*x218))+new_r00);
evalcond[6]=((((-1.0)*cj22*x212*x215))+((sj22*x211))+new_r11);
evalcond[7]=(x214+(((-1.0)*x211*x215))+(((-1.0)*new_r00*x216)));
evalcond[8]=(x217+(((-1.0)*new_r01*x216))+(((-1.0)*x212*x215)));
evalcond[9]=(new_r10+(((-1.0)*x212*x216))+(((-1.0)*x215*x219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x220=new_r22*new_r22;
IkReal x221=cj22*cj22;
IkReal x222=(new_r22*sj22);
CheckValue<IkReal> x223 = IKatan2WithCheck(IkReal((((cj22*new_r01))+((new_r00*x222)))),IkReal((((new_r01*x222))+(((-1.0)*cj22*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x223.valid){
continue;
}
CheckValue<IkReal> x224=IKPowWithIntegerCheck(IKsign((((x220*x221))+(((-1.0)*x221))+(((-1.0)*x220)))),-1);
if(!x224.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(x223.value)+(((1.5707963267949)*(x224.value))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[10];
IkReal x225=IKsin(j24);
IkReal x226=IKcos(j24);
IkReal x227=(new_r22*sj22);
IkReal x228=(cj22*new_r10);
IkReal x229=((1.0)*new_r22);
IkReal x230=((1.0)*sj22);
IkReal x231=(cj22*new_r11);
IkReal x232=((1.0)*x226);
IkReal x233=(cj22*x225);
evalcond[0]=(((cj22*new_r01))+x225+((new_r11*sj22)));
evalcond[1]=(((cj22*new_r00))+(((-1.0)*x232))+((new_r10*sj22)));
evalcond[2]=(x233+((x226*x227))+new_r01);
evalcond[3]=(((new_r00*x227))+(((-1.0)*x228*x229))+x225);
evalcond[4]=(((new_r01*x227))+x226+(((-1.0)*x229*x231)));
evalcond[5]=(((x225*x227))+new_r00+(((-1.0)*cj22*x232)));
evalcond[6]=(((sj22*x225))+new_r11+(((-1.0)*cj22*x226*x229)));
evalcond[7]=((((-1.0)*x225*x229))+x228+(((-1.0)*new_r00*x230)));
evalcond[8]=(x231+(((-1.0)*x226*x229))+(((-1.0)*new_r01*x230)));
evalcond[9]=((((-1.0)*x226*x230))+new_r10+(((-1.0)*x229*x233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j22, j24]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x235=IKPowWithIntegerCheck(cj23,-1);
if(!x235.valid){
continue;
}
IkReal x234=x235.value;
CheckValue<IkReal> x236=IKPowWithIntegerCheck(new_r02,-1);
if(!x236.valid){
continue;
}
CheckValue<IkReal> x237=IKPowWithIntegerCheck(x234,-2);
if(!x237.valid){
continue;
}
if( IKabs((x234*(x236.value)*(((x237.value)+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x234)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x234*(x236.value)*(((x237.value)+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x234))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((x234*(x236.value)*(((x237.value)+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x234));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x238=IKsin(j22);
IkReal x239=IKcos(j22);
IkReal x240=((1.0)*new_r12);
IkReal x241=(new_r02*x238);
IkReal x242=(cj23*x239);
IkReal x243=(cj23*x238);
evalcond[0]=(x242+new_r12);
evalcond[1]=((((-1.0)*x243))+new_r02);
evalcond[2]=(((new_r02*x239))+((new_r12*x238)));
evalcond[3]=((((-1.0)*x241))+((new_r12*x239))+cj23);
evalcond[4]=(((new_r20*sj23))+((new_r00*x243))+(((-1.0)*new_r10*x242)));
evalcond[5]=(((new_r21*sj23))+(((-1.0)*new_r11*x242))+((new_r01*x243)));
evalcond[6]=(((sj23*x241))+(((-1.0)*cj23*new_r22))+(((-1.0)*sj23*x239*x240)));
evalcond[7]=((-1.0)+(((-1.0)*x240*x242))+((cj23*x241))+((new_r22*sj23)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j24eval[3];
j24eval[0]=cj23;
j24eval[1]=IKsign(cj23);
j24eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal j24eval[2];
j24eval[0]=cj23;
j24eval[1]=cj22;
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  )
{
{
IkReal j24eval[3];
j24eval[0]=cj23;
j24eval[1]=sj22;
j24eval[2]=sj23;
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x244=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r00*sj22))+(((-1.0)*cj22*x244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj22*new_r00))+(((-1.0)*sj22*x244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*sj22))+(((-1.0)*cj22*x244))))+IKsqr((((cj22*new_r00))+(((-1.0)*sj22*x244))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*new_r00*sj22))+(((-1.0)*cj22*x244))), (((cj22*new_r00))+(((-1.0)*sj22*x244))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x245=IKsin(j24);
IkReal x246=IKcos(j24);
IkReal x247=((1.0)*sj22);
IkReal x248=(sj22*x245);
IkReal x249=((1.0)*x246);
IkReal x250=((1.0)*x245);
IkReal x251=(cj22*x249);
evalcond[0]=(((cj22*new_r01))+x245+((new_r11*sj22)));
evalcond[1]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x249)));
evalcond[2]=(((sj22*x246))+new_r01+((cj22*x245)));
evalcond[3]=(x248+new_r00+(((-1.0)*x251)));
evalcond[4]=(x248+new_r11+(((-1.0)*x251)));
evalcond[5]=((((-1.0)*new_r00*x247))+((cj22*new_r10))+(((-1.0)*x250)));
evalcond[6]=((((-1.0)*new_r01*x247))+(((-1.0)*x249))+((cj22*new_r11)));
evalcond[7]=((((-1.0)*cj22*x250))+new_r10+(((-1.0)*x246*x247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x252=((1.0)*cj22);
if( IKabs(((((-1.0)*new_r01*x252))+(((-1.0)*new_r11*sj22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj22))+(((-1.0)*new_r11*x252)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x252))+(((-1.0)*new_r11*sj22))))+IKsqr((((new_r01*sj22))+(((-1.0)*new_r11*x252))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*new_r01*x252))+(((-1.0)*new_r11*sj22))), (((new_r01*sj22))+(((-1.0)*new_r11*x252))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x253=IKsin(j24);
IkReal x254=IKcos(j24);
IkReal x255=((1.0)*sj22);
IkReal x256=(cj22*x253);
IkReal x257=((1.0)*x254);
IkReal x258=(x254*x255);
evalcond[0]=(((cj22*new_r01))+x253+((new_r11*sj22)));
evalcond[1]=(x253+(((-1.0)*new_r00*x255))+((cj22*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x255))+x254+((cj22*new_r11)));
evalcond[3]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x257)));
evalcond[4]=(((cj22*x254))+((sj22*x253))+new_r11);
evalcond[5]=(x256+new_r01+(((-1.0)*x258)));
evalcond[6]=(x256+new_r10+(((-1.0)*x258)));
evalcond[7]=((((-1.0)*cj22*x257))+new_r00+(((-1.0)*x253*x255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j22))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x259=IKsin(j24);
IkReal x260=IKcos(j24);
IkReal x261=((1.0)*sj23);
IkReal x262=((1.0)*cj23);
IkReal x263=((1.0)*x260);
evalcond[0]=(x259+new_r01);
evalcond[1]=(new_r00+(((-1.0)*x263)));
evalcond[2]=((((-1.0)*x259*x262))+new_r20);
evalcond[3]=(new_r21+(((-1.0)*x260*x262)));
evalcond[4]=(new_r11+(((-1.0)*x260*x261)));
evalcond[5]=((((-1.0)*x259*x261))+new_r10);
evalcond[6]=(x259+(((-1.0)*new_r10*x261))+(((-1.0)*new_r20*x262)));
evalcond[7]=((((-1.0)*new_r21*x262))+x260+(((-1.0)*new_r11*x261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j22)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x264=IKsin(j24);
IkReal x265=IKcos(j24);
IkReal x266=((1.0)*cj23);
IkReal x267=((1.0)*x265);
IkReal x268=((1.0)*x264);
evalcond[0]=(x264+(((-1.0)*new_r01)));
evalcond[1]=(((sj23*x265))+new_r11);
evalcond[2]=(new_r20+(((-1.0)*x264*x266)));
evalcond[3]=((((-1.0)*x265*x266))+new_r21);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x267)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*sj23*x268)));
evalcond[6]=(x264+(((-1.0)*new_r20*x266))+((new_r10*sj23)));
evalcond[7]=((((-1.0)*new_r21*x266))+x265+((new_r11*sj23)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j23))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(new_r20, new_r21);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x269=IKsin(j24);
IkReal x270=IKcos(j24);
IkReal x271=((1.0)*x270);
evalcond[0]=((((-1.0)*x269))+new_r20);
evalcond[1]=((((-1.0)*x271))+new_r21);
evalcond[2]=(((cj22*x269))+new_r01);
evalcond[3]=(((sj22*x269))+new_r11);
evalcond[4]=((((-1.0)*cj22*x271))+new_r00);
evalcond[5]=((((-1.0)*sj22*x271))+new_r10);
evalcond[6]=(((cj22*new_r01))+x269+((new_r11*sj22)));
evalcond[7]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j23)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x272=IKsin(j24);
IkReal x273=IKcos(j24);
IkReal x274=((1.0)*x273);
evalcond[0]=(x272+new_r20);
evalcond[1]=(x273+new_r21);
evalcond[2]=(((cj22*x272))+new_r01);
evalcond[3]=(((sj22*x272))+new_r11);
evalcond[4]=((((-1.0)*cj22*x274))+new_r00);
evalcond[5]=((((-1.0)*sj22*x274))+new_r10);
evalcond[6]=(((cj22*new_r01))+x272+((new_r11*sj22)));
evalcond[7]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j22)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x275=IKcos(j24);
IkReal x276=IKsin(j24);
IkReal x277=((1.0)*cj23);
IkReal x278=((1.0)*x275);
evalcond[0]=(x276+new_r11);
evalcond[1]=((((-1.0)*x278))+new_r10);
evalcond[2]=(((sj23*x275))+new_r01);
evalcond[3]=(((sj23*x276))+new_r00);
evalcond[4]=(new_r20+(((-1.0)*x276*x277)));
evalcond[5]=((((-1.0)*x275*x277))+new_r21);
evalcond[6]=(((new_r00*sj23))+x276+(((-1.0)*new_r20*x277)));
evalcond[7]=(((new_r01*sj23))+(((-1.0)*new_r21*x277))+x275);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j22)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x279=IKsin(j24);
IkReal x280=IKcos(j24);
IkReal x281=((1.0)*cj23);
IkReal x282=((1.0)*sj23);
IkReal x283=((1.0)*x280);
evalcond[0]=(x279+(((-1.0)*new_r11)));
evalcond[1]=(new_r20+(((-1.0)*x279*x281)));
evalcond[2]=((((-1.0)*x280*x281))+new_r21);
evalcond[3]=((((-1.0)*x280*x282))+new_r01);
evalcond[4]=(new_r00+(((-1.0)*x279*x282)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x283)));
evalcond[6]=((((-1.0)*new_r00*x282))+x279+(((-1.0)*new_r20*x281)));
evalcond[7]=(x280+(((-1.0)*new_r01*x282))+(((-1.0)*new_r21*x281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j24eval[0]=IKabs(new_r22);
if( IKabs(j24eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j24]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
IkReal j24array[2], cj24array[2], sj24array[2], tempj24array[1];
int numsolutions = 0;
for(int ij24 = 0; ij24 < numroots; ++ij24)
{
IkReal htj24 = zeror[ij24];
tempj24array[0]=((2.0)*(atan(htj24)));
for(int kj24 = 0; kj24 < 1; ++kj24)
{
j24array[numsolutions] = tempj24array[kj24];
if( j24array[numsolutions] > IKPI )
{
    j24array[numsolutions]-=IK2PI;
}
else if( j24array[numsolutions] < -IKPI )
{
    j24array[numsolutions]+=IK2PI;
}
sj24array[numsolutions] = IKsin(j24array[numsolutions]);
cj24array[numsolutions] = IKcos(j24array[numsolutions]);
numsolutions++;
}
}
bool j24valid[2]={true,true};
_nj24 = 2;
for(int ij24 = 0; ij24 < numsolutions; ++ij24)
    {
if( !j24valid[ij24] )
{
    continue;
}
    j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
htj24 = IKtan(j24/2);

_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < numsolutions; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j24]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x285=IKPowWithIntegerCheck(cj23,-1);
if(!x285.valid){
continue;
}
IkReal x284=x285.value;
CheckValue<IkReal> x286=IKPowWithIntegerCheck(sj22,-1);
if(!x286.valid){
continue;
}
CheckValue<IkReal> x287=IKPowWithIntegerCheck(sj23,-1);
if(!x287.valid){
continue;
}
if( IKabs((new_r20*x284)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x284*(x286.value)*(x287.value)*(((((-1.0)*cj23*new_r01))+(((-1.0)*cj22*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x284))+IKsqr((x284*(x286.value)*(x287.value)*(((((-1.0)*cj23*new_r01))+(((-1.0)*cj22*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2((new_r20*x284), (x284*(x286.value)*(x287.value)*(((((-1.0)*cj23*new_r01))+(((-1.0)*cj22*new_r20))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x288=IKsin(j24);
IkReal x289=IKcos(j24);
IkReal x290=(sj22*sj23);
IkReal x291=(cj22*new_r10);
IkReal x292=((1.0)*sj22);
IkReal x293=(cj22*new_r11);
IkReal x294=((1.0)*sj23);
IkReal x295=((1.0)*cj23);
IkReal x296=((1.0)*x289);
IkReal x297=(cj22*x288);
evalcond[0]=((((-1.0)*x288*x295))+new_r20);
evalcond[1]=((((-1.0)*x289*x295))+new_r21);
evalcond[2]=(((cj22*new_r01))+x288+((new_r11*sj22)));
evalcond[3]=(((cj22*new_r00))+(((-1.0)*x296))+((new_r10*sj22)));
evalcond[4]=(((x289*x290))+x297+new_r01);
evalcond[5]=((((-1.0)*cj22*x296))+new_r00+((x288*x290)));
evalcond[6]=(((sj22*x288))+new_r11+(((-1.0)*cj22*x289*x294)));
evalcond[7]=(x291+(((-1.0)*x288*x294))+(((-1.0)*new_r00*x292)));
evalcond[8]=((((-1.0)*new_r01*x292))+(((-1.0)*x289*x294))+x293);
evalcond[9]=((((-1.0)*x289*x292))+new_r10+(((-1.0)*x294*x297)));
evalcond[10]=((((-1.0)*x291*x294))+(((-1.0)*new_r20*x295))+((new_r00*x290))+x288);
evalcond[11]=((((-1.0)*new_r21*x295))+(((-1.0)*x293*x294))+x289+((new_r01*x290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x299=IKPowWithIntegerCheck(cj23,-1);
if(!x299.valid){
continue;
}
IkReal x298=x299.value;
CheckValue<IkReal> x300=IKPowWithIntegerCheck(cj22,-1);
if(!x300.valid){
continue;
}
if( IKabs((new_r20*x298)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x298*(x300.value)*((((new_r20*sj22*sj23))+((cj23*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x298))+IKsqr((x298*(x300.value)*((((new_r20*sj22*sj23))+((cj23*new_r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2((new_r20*x298), (x298*(x300.value)*((((new_r20*sj22*sj23))+((cj23*new_r00))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x301=IKsin(j24);
IkReal x302=IKcos(j24);
IkReal x303=(sj22*sj23);
IkReal x304=(cj22*new_r10);
IkReal x305=((1.0)*sj22);
IkReal x306=(cj22*new_r11);
IkReal x307=((1.0)*sj23);
IkReal x308=((1.0)*cj23);
IkReal x309=((1.0)*x302);
IkReal x310=(cj22*x301);
evalcond[0]=((((-1.0)*x301*x308))+new_r20);
evalcond[1]=((((-1.0)*x302*x308))+new_r21);
evalcond[2]=(((cj22*new_r01))+x301+((new_r11*sj22)));
evalcond[3]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x309)));
evalcond[4]=(x310+((x302*x303))+new_r01);
evalcond[5]=(((x301*x303))+(((-1.0)*cj22*x309))+new_r00);
evalcond[6]=((((-1.0)*cj22*x302*x307))+new_r11+((sj22*x301)));
evalcond[7]=((((-1.0)*x301*x307))+x304+(((-1.0)*new_r00*x305)));
evalcond[8]=((((-1.0)*x302*x307))+x306+(((-1.0)*new_r01*x305)));
evalcond[9]=((((-1.0)*x302*x305))+(((-1.0)*x307*x310))+new_r10);
evalcond[10]=(((new_r00*x303))+(((-1.0)*new_r20*x308))+x301+(((-1.0)*x304*x307)));
evalcond[11]=(((new_r01*x303))+(((-1.0)*new_r21*x308))+x302+(((-1.0)*x306*x307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x311=IKPowWithIntegerCheck(IKsign(cj23),-1);
if(!x311.valid){
continue;
}
CheckValue<IkReal> x312 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x312.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(((1.5707963267949)*(x311.value)))+(x312.value));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x313=IKsin(j24);
IkReal x314=IKcos(j24);
IkReal x315=(sj22*sj23);
IkReal x316=(cj22*new_r10);
IkReal x317=((1.0)*sj22);
IkReal x318=(cj22*new_r11);
IkReal x319=((1.0)*sj23);
IkReal x320=((1.0)*cj23);
IkReal x321=((1.0)*x314);
IkReal x322=(cj22*x313);
evalcond[0]=(new_r20+(((-1.0)*x313*x320)));
evalcond[1]=((((-1.0)*x314*x320))+new_r21);
evalcond[2]=(((cj22*new_r01))+x313+((new_r11*sj22)));
evalcond[3]=(((cj22*new_r00))+(((-1.0)*x321))+((new_r10*sj22)));
evalcond[4]=(x322+new_r01+((x314*x315)));
evalcond[5]=((((-1.0)*cj22*x321))+new_r00+((x313*x315)));
evalcond[6]=(((sj22*x313))+(((-1.0)*cj22*x314*x319))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x317))+(((-1.0)*x313*x319))+x316);
evalcond[8]=(x318+(((-1.0)*x314*x319))+(((-1.0)*new_r01*x317)));
evalcond[9]=((((-1.0)*x319*x322))+(((-1.0)*x314*x317))+new_r10);
evalcond[10]=(((new_r00*x315))+x313+(((-1.0)*new_r20*x320))+(((-1.0)*x316*x319)));
evalcond[11]=((((-1.0)*x318*x319))+((new_r01*x315))+x314+(((-1.0)*new_r21*x320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x323=IKPowWithIntegerCheck(IKsign(cj23),-1);
if(!x323.valid){
continue;
}
CheckValue<IkReal> x324 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x324.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x323.value)))+(x324.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x325=IKsin(j22);
IkReal x326=IKcos(j22);
IkReal x327=((1.0)*new_r12);
IkReal x328=(new_r02*x325);
IkReal x329=(cj23*x326);
IkReal x330=(cj23*x325);
evalcond[0]=(x329+new_r12);
evalcond[1]=((((-1.0)*x330))+new_r02);
evalcond[2]=(((new_r12*x325))+((new_r02*x326)));
evalcond[3]=(((new_r12*x326))+(((-1.0)*x328))+cj23);
evalcond[4]=(((new_r00*x330))+((new_r20*sj23))+(((-1.0)*new_r10*x329)));
evalcond[5]=(((new_r21*sj23))+((new_r01*x330))+(((-1.0)*new_r11*x329)));
evalcond[6]=((((-1.0)*sj23*x326*x327))+(((-1.0)*cj23*new_r22))+((sj23*x328)));
evalcond[7]=((-1.0)+(((-1.0)*x327*x329))+((cj23*x328))+((new_r22*sj23)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j24eval[3];
j24eval[0]=cj23;
j24eval[1]=IKsign(cj23);
j24eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal j24eval[2];
j24eval[0]=cj23;
j24eval[1]=cj22;
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  )
{
{
IkReal j24eval[3];
j24eval[0]=cj23;
j24eval[1]=sj22;
j24eval[2]=sj23;
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x331=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r00*sj22))+(((-1.0)*cj22*x331)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj22*new_r00))+(((-1.0)*sj22*x331)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*sj22))+(((-1.0)*cj22*x331))))+IKsqr((((cj22*new_r00))+(((-1.0)*sj22*x331))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*new_r00*sj22))+(((-1.0)*cj22*x331))), (((cj22*new_r00))+(((-1.0)*sj22*x331))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x332=IKsin(j24);
IkReal x333=IKcos(j24);
IkReal x334=((1.0)*sj22);
IkReal x335=(sj22*x332);
IkReal x336=((1.0)*x333);
IkReal x337=((1.0)*x332);
IkReal x338=(cj22*x336);
evalcond[0]=(((cj22*new_r01))+x332+((new_r11*sj22)));
evalcond[1]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x336)));
evalcond[2]=(((sj22*x333))+new_r01+((cj22*x332)));
evalcond[3]=(x335+(((-1.0)*x338))+new_r00);
evalcond[4]=(x335+(((-1.0)*x338))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x334))+(((-1.0)*x337))+((cj22*new_r10)));
evalcond[6]=((((-1.0)*x336))+(((-1.0)*new_r01*x334))+((cj22*new_r11)));
evalcond[7]=((((-1.0)*x333*x334))+(((-1.0)*cj22*x337))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x339=((1.0)*cj22);
if( IKabs(((((-1.0)*new_r11*sj22))+(((-1.0)*new_r01*x339)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x339))+((new_r01*sj22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj22))+(((-1.0)*new_r01*x339))))+IKsqr(((((-1.0)*new_r11*x339))+((new_r01*sj22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*new_r11*sj22))+(((-1.0)*new_r01*x339))), ((((-1.0)*new_r11*x339))+((new_r01*sj22))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x340=IKsin(j24);
IkReal x341=IKcos(j24);
IkReal x342=((1.0)*sj22);
IkReal x343=(cj22*x340);
IkReal x344=((1.0)*x341);
IkReal x345=(x341*x342);
evalcond[0]=(((cj22*new_r01))+x340+((new_r11*sj22)));
evalcond[1]=(x340+(((-1.0)*new_r00*x342))+((cj22*new_r10)));
evalcond[2]=(x341+(((-1.0)*new_r01*x342))+((cj22*new_r11)));
evalcond[3]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x344)));
evalcond[4]=(((sj22*x340))+((cj22*x341))+new_r11);
evalcond[5]=(x343+new_r01+(((-1.0)*x345)));
evalcond[6]=(x343+new_r10+(((-1.0)*x345)));
evalcond[7]=((((-1.0)*cj22*x344))+(((-1.0)*x340*x342))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j22))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x346=IKsin(j24);
IkReal x347=IKcos(j24);
IkReal x348=((1.0)*sj23);
IkReal x349=((1.0)*cj23);
IkReal x350=((1.0)*x347);
evalcond[0]=(x346+new_r01);
evalcond[1]=((((-1.0)*x350))+new_r00);
evalcond[2]=((((-1.0)*x346*x349))+new_r20);
evalcond[3]=((((-1.0)*x347*x349))+new_r21);
evalcond[4]=((((-1.0)*x347*x348))+new_r11);
evalcond[5]=((((-1.0)*x346*x348))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x348))+x346+(((-1.0)*new_r20*x349)));
evalcond[7]=((((-1.0)*new_r11*x348))+x347+(((-1.0)*new_r21*x349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j22)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x351=IKsin(j24);
IkReal x352=IKcos(j24);
IkReal x353=((1.0)*cj23);
IkReal x354=((1.0)*x352);
IkReal x355=((1.0)*x351);
evalcond[0]=(x351+(((-1.0)*new_r01)));
evalcond[1]=(((sj23*x352))+new_r11);
evalcond[2]=((((-1.0)*x351*x353))+new_r20);
evalcond[3]=(new_r21+(((-1.0)*x352*x353)));
evalcond[4]=((((-1.0)*x354))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*sj23*x355)));
evalcond[6]=(x351+((new_r10*sj23))+(((-1.0)*new_r20*x353)));
evalcond[7]=(x352+((new_r11*sj23))+(((-1.0)*new_r21*x353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j23))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(new_r20, new_r21);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x356=IKsin(j24);
IkReal x357=IKcos(j24);
IkReal x358=((1.0)*x357);
evalcond[0]=((((-1.0)*x356))+new_r20);
evalcond[1]=((((-1.0)*x358))+new_r21);
evalcond[2]=(((cj22*x356))+new_r01);
evalcond[3]=(((sj22*x356))+new_r11);
evalcond[4]=((((-1.0)*cj22*x358))+new_r00);
evalcond[5]=((((-1.0)*sj22*x358))+new_r10);
evalcond[6]=(((cj22*new_r01))+x356+((new_r11*sj22)));
evalcond[7]=(((cj22*new_r00))+(((-1.0)*x358))+((new_r10*sj22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j23)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x359=IKsin(j24);
IkReal x360=IKcos(j24);
IkReal x361=((1.0)*x360);
evalcond[0]=(x359+new_r20);
evalcond[1]=(x360+new_r21);
evalcond[2]=(((cj22*x359))+new_r01);
evalcond[3]=(((sj22*x359))+new_r11);
evalcond[4]=(new_r00+(((-1.0)*cj22*x361)));
evalcond[5]=((((-1.0)*sj22*x361))+new_r10);
evalcond[6]=(((cj22*new_r01))+x359+((new_r11*sj22)));
evalcond[7]=(((cj22*new_r00))+(((-1.0)*x361))+((new_r10*sj22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j22)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x362=IKcos(j24);
IkReal x363=IKsin(j24);
IkReal x364=((1.0)*cj23);
IkReal x365=((1.0)*x362);
evalcond[0]=(x363+new_r11);
evalcond[1]=((((-1.0)*x365))+new_r10);
evalcond[2]=(((sj23*x362))+new_r01);
evalcond[3]=(((sj23*x363))+new_r00);
evalcond[4]=((((-1.0)*x363*x364))+new_r20);
evalcond[5]=((((-1.0)*x362*x364))+new_r21);
evalcond[6]=((((-1.0)*new_r20*x364))+((new_r00*sj23))+x363);
evalcond[7]=(((new_r01*sj23))+x362+(((-1.0)*new_r21*x364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j22)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x366=IKsin(j24);
IkReal x367=IKcos(j24);
IkReal x368=((1.0)*cj23);
IkReal x369=((1.0)*sj23);
IkReal x370=((1.0)*x367);
evalcond[0]=(x366+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*x366*x368))+new_r20);
evalcond[2]=((((-1.0)*x367*x368))+new_r21);
evalcond[3]=((((-1.0)*x367*x369))+new_r01);
evalcond[4]=((((-1.0)*x366*x369))+new_r00);
evalcond[5]=((((-1.0)*x370))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r00*x369))+(((-1.0)*new_r20*x368))+x366);
evalcond[7]=(x367+(((-1.0)*new_r01*x369))+(((-1.0)*new_r21*x368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j24eval[0]=IKabs(new_r22);
if( IKabs(j24eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j24]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
IkReal j24array[2], cj24array[2], sj24array[2], tempj24array[1];
int numsolutions = 0;
for(int ij24 = 0; ij24 < numroots; ++ij24)
{
IkReal htj24 = zeror[ij24];
tempj24array[0]=((2.0)*(atan(htj24)));
for(int kj24 = 0; kj24 < 1; ++kj24)
{
j24array[numsolutions] = tempj24array[kj24];
if( j24array[numsolutions] > IKPI )
{
    j24array[numsolutions]-=IK2PI;
}
else if( j24array[numsolutions] < -IKPI )
{
    j24array[numsolutions]+=IK2PI;
}
sj24array[numsolutions] = IKsin(j24array[numsolutions]);
cj24array[numsolutions] = IKcos(j24array[numsolutions]);
numsolutions++;
}
}
bool j24valid[2]={true,true};
_nj24 = 2;
for(int ij24 = 0; ij24 < numsolutions; ++ij24)
    {
if( !j24valid[ij24] )
{
    continue;
}
    j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
htj24 = IKtan(j24/2);

_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < numsolutions; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j24]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x372=IKPowWithIntegerCheck(cj23,-1);
if(!x372.valid){
continue;
}
IkReal x371=x372.value;
CheckValue<IkReal> x373=IKPowWithIntegerCheck(sj22,-1);
if(!x373.valid){
continue;
}
CheckValue<IkReal> x374=IKPowWithIntegerCheck(sj23,-1);
if(!x374.valid){
continue;
}
if( IKabs((new_r20*x371)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x371*(x373.value)*(x374.value)*(((((-1.0)*cj23*new_r01))+(((-1.0)*cj22*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x371))+IKsqr((x371*(x373.value)*(x374.value)*(((((-1.0)*cj23*new_r01))+(((-1.0)*cj22*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2((new_r20*x371), (x371*(x373.value)*(x374.value)*(((((-1.0)*cj23*new_r01))+(((-1.0)*cj22*new_r20))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x375=IKsin(j24);
IkReal x376=IKcos(j24);
IkReal x377=(sj22*sj23);
IkReal x378=(cj22*new_r10);
IkReal x379=((1.0)*sj22);
IkReal x380=(cj22*new_r11);
IkReal x381=((1.0)*sj23);
IkReal x382=((1.0)*cj23);
IkReal x383=((1.0)*x376);
IkReal x384=(cj22*x375);
evalcond[0]=((((-1.0)*x375*x382))+new_r20);
evalcond[1]=((((-1.0)*x376*x382))+new_r21);
evalcond[2]=(((cj22*new_r01))+x375+((new_r11*sj22)));
evalcond[3]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x383)));
evalcond[4]=(x384+((x376*x377))+new_r01);
evalcond[5]=(((x375*x377))+(((-1.0)*cj22*x383))+new_r00);
evalcond[6]=((((-1.0)*cj22*x376*x381))+((sj22*x375))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x379))+(((-1.0)*x375*x381))+x378);
evalcond[8]=((((-1.0)*x376*x381))+x380+(((-1.0)*new_r01*x379)));
evalcond[9]=((((-1.0)*x381*x384))+(((-1.0)*x376*x379))+new_r10);
evalcond[10]=((((-1.0)*new_r20*x382))+x375+((new_r00*x377))+(((-1.0)*x378*x381)));
evalcond[11]=((((-1.0)*x380*x381))+((new_r01*x377))+x376+(((-1.0)*new_r21*x382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x386=IKPowWithIntegerCheck(cj23,-1);
if(!x386.valid){
continue;
}
IkReal x385=x386.value;
CheckValue<IkReal> x387=IKPowWithIntegerCheck(cj22,-1);
if(!x387.valid){
continue;
}
if( IKabs((new_r20*x385)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x385*(x387.value)*((((new_r20*sj22*sj23))+((cj23*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x385))+IKsqr((x385*(x387.value)*((((new_r20*sj22*sj23))+((cj23*new_r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2((new_r20*x385), (x385*(x387.value)*((((new_r20*sj22*sj23))+((cj23*new_r00))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x388=IKsin(j24);
IkReal x389=IKcos(j24);
IkReal x390=(sj22*sj23);
IkReal x391=(cj22*new_r10);
IkReal x392=((1.0)*sj22);
IkReal x393=(cj22*new_r11);
IkReal x394=((1.0)*sj23);
IkReal x395=((1.0)*cj23);
IkReal x396=((1.0)*x389);
IkReal x397=(cj22*x388);
evalcond[0]=((((-1.0)*x388*x395))+new_r20);
evalcond[1]=((((-1.0)*x389*x395))+new_r21);
evalcond[2]=(((cj22*new_r01))+x388+((new_r11*sj22)));
evalcond[3]=(((cj22*new_r00))+(((-1.0)*x396))+((new_r10*sj22)));
evalcond[4]=(x397+new_r01+((x389*x390)));
evalcond[5]=(new_r00+((x388*x390))+(((-1.0)*cj22*x396)));
evalcond[6]=((((-1.0)*cj22*x389*x394))+((sj22*x388))+new_r11);
evalcond[7]=((((-1.0)*x388*x394))+x391+(((-1.0)*new_r00*x392)));
evalcond[8]=((((-1.0)*new_r01*x392))+(((-1.0)*x389*x394))+x393);
evalcond[9]=((((-1.0)*x394*x397))+(((-1.0)*x389*x392))+new_r10);
evalcond[10]=(x388+(((-1.0)*x391*x394))+((new_r00*x390))+(((-1.0)*new_r20*x395)));
evalcond[11]=((((-1.0)*new_r21*x395))+x389+((new_r01*x390))+(((-1.0)*x393*x394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x398=IKPowWithIntegerCheck(IKsign(cj23),-1);
if(!x398.valid){
continue;
}
CheckValue<IkReal> x399 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x399.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(((1.5707963267949)*(x398.value)))+(x399.value));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x400=IKsin(j24);
IkReal x401=IKcos(j24);
IkReal x402=(sj22*sj23);
IkReal x403=(cj22*new_r10);
IkReal x404=((1.0)*sj22);
IkReal x405=(cj22*new_r11);
IkReal x406=((1.0)*sj23);
IkReal x407=((1.0)*cj23);
IkReal x408=((1.0)*x401);
IkReal x409=(cj22*x400);
evalcond[0]=((((-1.0)*x400*x407))+new_r20);
evalcond[1]=((((-1.0)*x401*x407))+new_r21);
evalcond[2]=(((cj22*new_r01))+x400+((new_r11*sj22)));
evalcond[3]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x408)));
evalcond[4]=(x409+new_r01+((x401*x402)));
evalcond[5]=((((-1.0)*cj22*x408))+new_r00+((x400*x402)));
evalcond[6]=(((sj22*x400))+(((-1.0)*cj22*x401*x406))+new_r11);
evalcond[7]=((((-1.0)*x400*x406))+x403+(((-1.0)*new_r00*x404)));
evalcond[8]=((((-1.0)*x401*x406))+x405+(((-1.0)*new_r01*x404)));
evalcond[9]=((((-1.0)*x406*x409))+(((-1.0)*x401*x404))+new_r10);
evalcond[10]=((((-1.0)*new_r20*x407))+(((-1.0)*x403*x406))+x400+((new_r00*x402)));
evalcond[11]=(x401+(((-1.0)*new_r21*x407))+(((-1.0)*x405*x406))+((new_r01*x402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x410=IKPowWithIntegerCheck(IKsign(cj23),-1);
if(!x410.valid){
continue;
}
CheckValue<IkReal> x411 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x411.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(((1.5707963267949)*(x410.value)))+(x411.value));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[2];
IkReal x412=((1.0)*cj23);
evalcond[0]=((((-1.0)*x412*(IKsin(j24))))+new_r20);
evalcond[1]=((((-1.0)*x412*(IKcos(j24))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j22eval[3];
j22eval[0]=cj23;
j22eval[1]=IKsign(cj23);
j22eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[2];
j22eval[0]=cj23;
j22eval[1]=new_r11;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x413=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r00*sj24))+(((-1.0)*cj24*x413)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj24*x413))+((cj24*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*sj24))+(((-1.0)*cj24*x413))))+IKsqr(((((-1.0)*sj24*x413))+((cj24*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((-1.0)*new_r00*sj24))+(((-1.0)*cj24*x413))), ((((-1.0)*sj24*x413))+((cj24*new_r00))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x414=IKsin(j22);
IkReal x415=IKcos(j22);
IkReal x416=((1.0)*cj24);
IkReal x417=(sj24*x414);
IkReal x418=((1.0)*x414);
IkReal x419=(sj24*x415);
IkReal x420=(x415*x416);
evalcond[0]=(sj24+((new_r11*x414))+((new_r01*x415)));
evalcond[1]=(((cj24*x414))+x419+new_r01);
evalcond[2]=((((-1.0)*x420))+x417+new_r00);
evalcond[3]=((((-1.0)*x420))+x417+new_r11);
evalcond[4]=(((new_r10*x414))+(((-1.0)*x416))+((new_r00*x415)));
evalcond[5]=(new_r10+(((-1.0)*x414*x416))+(((-1.0)*x419)));
evalcond[6]=((((-1.0)*sj24))+((new_r10*x415))+(((-1.0)*new_r00*x418)));
evalcond[7]=(((new_r11*x415))+(((-1.0)*x416))+(((-1.0)*new_r01*x418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[3];
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
IkReal x421=(((new_r11*sj24))+((cj24*new_r01)));
j22eval[0]=x421;
j22eval[1]=((IKabs(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj24*sj24)))))+(IKabs(((-1.0)+(cj24*cj24)+(new_r01*new_r01)))));
j22eval[2]=IKsign(x421);
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
IkReal x422=((1.0)*sj24);
IkReal x423=(((new_r10*new_r11))+((new_r00*new_r01)));
j22eval[0]=x423;
j22eval[1]=((IKabs((((new_r01*sj24))+(((-1.0)*new_r10*x422)))))+(IKabs(((((-1.0)*new_r00*x422))+(((-1.0)*new_r11*x422))))));
j22eval[2]=IKsign(x423);
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
IkReal x424=((1.0)*sj24);
IkReal x425=((new_r01*new_r01)+(new_r11*new_r11));
j22eval[0]=x425;
j22eval[1]=((IKabs(((((-1.0)*cj24*new_r11))+(((-1.0)*new_r01*x424)))))+(IKabs(((((-1.0)*new_r11*x424))+((cj24*new_r01))))));
j22eval[2]=IKsign(x425);
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
new_r01=0;
new_r11=0;
j22eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x427 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x427.valid){
continue;
}
IkReal x426=x427.value;
j22array[0]=((-1.0)*x426);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=((3.14159265358979)+(((-1.0)*x426)));
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j22))))+((new_r10*(IKcos(j22)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j24))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x428=IKcos(j22);
IkReal x429=IKsin(j22);
IkReal x430=((1.0)*x429);
evalcond[0]=(x428+new_r11);
evalcond[1]=((((-1.0)*x430))+new_r01);
evalcond[2]=((((-1.0)*x428))+new_r00);
evalcond[3]=((((-1.0)*x430))+new_r10);
evalcond[4]=(((new_r11*x429))+((new_r01*x428)));
evalcond[5]=((-1.0)+((new_r10*x429))+((new_r00*x428)));
evalcond[6]=((((-1.0)*new_r00*x430))+((new_r10*x428)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x430))+((new_r11*x428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j24)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x431=IKsin(j22);
IkReal x432=IKcos(j22);
IkReal x433=((1.0)*x431);
evalcond[0]=(x431+new_r01);
evalcond[1]=(x432+new_r00);
evalcond[2]=(x431+new_r10);
evalcond[3]=((((-1.0)*x432))+new_r11);
evalcond[4]=(((new_r01*x432))+((new_r11*x431)));
evalcond[5]=((1.0)+((new_r00*x432))+((new_r10*x431)));
evalcond[6]=((((-1.0)*new_r00*x433))+((new_r10*x432)));
evalcond[7]=((-1.0)+(((-1.0)*new_r01*x433))+((new_r11*x432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x435 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x435)==0){
continue;
}
IkReal x434=pow(x435,-0.5);
CheckValue<IkReal> x436 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x436.valid){
continue;
}
IkReal gconst0=((-1.0)*(x436.value));
IkReal gconst1=((-1.0)*new_r01*x434);
IkReal gconst2=(new_r11*x434);
CheckValue<IkReal> x437 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x437.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j24+(x437.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[3];
CheckValue<IkReal> x440 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x440.valid){
continue;
}
IkReal x438=((-1.0)*(x440.value));
IkReal x439=x434;
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x438;
IkReal gconst0=x438;
IkReal gconst1=((-1.0)*new_r01*x439);
IkReal gconst2=(new_r11*x439);
IkReal x441=new_r01*new_r01;
IkReal x442=(new_r00*new_r01);
IkReal x443=(((new_r10*new_r11))+x442);
IkReal x444=x434;
IkReal x445=(new_r01*x444);
j22eval[0]=x443;
j22eval[1]=((IKabs((((new_r11*x445))+((x442*x444)))))+(IKabs((((new_r10*x445))+(((-1.0)*x441*x444))))));
j22eval[2]=IKsign(x443);
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[2];
CheckValue<IkReal> x448 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x448.valid){
continue;
}
IkReal x446=((-1.0)*(x448.value));
IkReal x447=x434;
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x446;
IkReal gconst0=x446;
IkReal gconst1=((-1.0)*new_r01*x447);
IkReal gconst2=(new_r11*x447);
IkReal x449=((new_r01*new_r01)+(new_r11*new_r11));
j22eval[0]=x449;
j22eval[1]=IKsign(x449);
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x452 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x452.valid){
continue;
}
IkReal x450=((-1.0)*(x452.value));
IkReal x451=x434;
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x450;
IkReal gconst0=x450;
IkReal gconst1=((-1.0)*new_r01*x451);
IkReal gconst2=(new_r11*x451);
j22eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst1*gconst1)+(gconst2*gconst2));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[4], cj22array[4], sj22array[4];
bool j22valid[4]={false};
_nj22 = 4;
j22array[0]=0;
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=1.5707963267949;
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
j22array[2]=3.14159265358979;
sj22array[2]=IKsin(j22array[2]);
cj22array[2]=IKcos(j22array[2]);
j22array[3]=-1.5707963267949;
sj22array[3]=IKsin(j22array[3]);
cj22array[3]=IKcos(j22array[3]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
if( j22array[2] > IKPI )
{
    j22array[2]-=IK2PI;
}
else if( j22array[2] < -IKPI )
{    j22array[2]+=IK2PI;
}
j22valid[2] = true;
if( j22array[3] > IKPI )
{
    j22array[3]-=IK2PI;
}
else if( j22array[3] < -IKPI )
{    j22array[3]+=IK2PI;
}
j22valid[3] = true;
for(int ij22 = 0; ij22 < 4; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 4; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
CheckValue<IkReal> x454 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x454.valid){
continue;
}
IkReal x453=((-1.0)*(x454.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x453;
new_r11=0;
new_r00=0;
IkReal gconst0=x453;
IkReal x455 = new_r01*new_r01;
if(IKabs(x455)==0){
continue;
}
IkReal gconst1=((-1.0)*new_r01*(pow(x455,-0.5)));
IkReal gconst2=0;
j22eval[0]=new_r01;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x456=IKPowWithIntegerCheck(gconst1,-1);
if(!x456.valid){
continue;
}
cj22array[0]=((-1.0)*new_r01*(x456.value));
if( cj22array[0] >= -1-IKFAST_SINCOS_THRESH && cj22array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j22valid[0] = j22valid[1] = true;
    j22array[0] = IKacos(cj22array[0]);
    sj22array[0] = IKsin(j22array[0]);
    cj22array[1] = cj22array[0];
    j22array[1] = -j22array[0];
    sj22array[1] = -sj22array[0];
}
else if( isnan(cj22array[0]) )
{
    // probably any value will work
    j22valid[0] = true;
    cj22array[0] = 1; sj22array[0] = 0; j22array[0] = 0;
}
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x457=IKsin(j22);
IkReal x458=IKcos(j22);
IkReal x459=((-1.0)*x457);
evalcond[0]=(new_r10*x457);
evalcond[1]=(gconst1*x459);
evalcond[2]=(new_r01*x459);
evalcond[3]=(((new_r01*x458))+gconst1);
evalcond[4]=(((new_r10*x458))+gconst1);
evalcond[5]=(((gconst1*x458))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x460=IKPowWithIntegerCheck(new_r01,-1);
if(!x460.valid){
continue;
}
cj22array[0]=((-1.0)*gconst1*(x460.value));
if( cj22array[0] >= -1-IKFAST_SINCOS_THRESH && cj22array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j22valid[0] = j22valid[1] = true;
    j22array[0] = IKacos(cj22array[0]);
    sj22array[0] = IKsin(j22array[0]);
    cj22array[1] = cj22array[0];
    j22array[1] = -j22array[0];
    sj22array[1] = -sj22array[0];
}
else if( isnan(cj22array[0]) )
{
    // probably any value will work
    j22valid[0] = true;
    cj22array[0] = 1; sj22array[0] = 0; j22array[0] = 0;
}
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x461=IKsin(j22);
IkReal x462=IKcos(j22);
IkReal x463=(gconst1*x462);
IkReal x464=((-1.0)*x461);
evalcond[0]=(new_r10*x461);
evalcond[1]=(gconst1*x464);
evalcond[2]=(new_r01*x464);
evalcond[3]=(x463+new_r01);
evalcond[4]=(((new_r10*x462))+gconst1);
evalcond[5]=(x463+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst2;
evalcond[2]=gconst1;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[3];
CheckValue<IkReal> x466 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x466.valid){
continue;
}
IkReal x465=((-1.0)*(x466.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x465;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x465;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j22eval[0]=-1.0;
j22eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j22eval[2]=-1.0;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
CheckValue<IkReal> x468 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x468.valid){
continue;
}
IkReal x467=((-1.0)*(x468.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x467;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x467;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j22eval[0]=-1.0;
j22eval[1]=-1.0;
j22eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
CheckValue<IkReal> x470 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x470.valid){
continue;
}
IkReal x469=((-1.0)*(x470.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x469;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x469;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j22eval[0]=1.0;
j22eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j22eval[2]=1.0;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x471=((1.0)*new_r11);
CheckValue<IkReal> x472 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x471)))),IkReal(((((-1.0)*gconst2*x471))+(((-1.0)*gconst1*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x472.valid){
continue;
}
CheckValue<IkReal> x473=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x473.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x472.value)+(((1.5707963267949)*(x473.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x474=IKsin(j22);
IkReal x475=IKcos(j22);
IkReal x476=((1.0)*gconst2);
IkReal x477=(gconst1*x475);
IkReal x478=(gconst1*x474);
IkReal x479=(x474*x476);
evalcond[0]=(((new_r01*x475))+gconst1+((new_r11*x474)));
evalcond[1]=(x478+((gconst2*x475))+new_r11);
evalcond[2]=((((-1.0)*x479))+x477);
evalcond[3]=((((-1.0)*x479))+x477+new_r01);
evalcond[4]=((((-1.0)*x475*x476))+(((-1.0)*x478)));
evalcond[5]=(gconst2+((new_r11*x475))+(((-1.0)*new_r01*x474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x480=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst2*gconst2)))+(((-1.0)*(gconst1*gconst1))))),-1);
if(!x480.valid){
continue;
}
CheckValue<IkReal> x481 = IKatan2WithCheck(IkReal((gconst1*new_r11)),IkReal((gconst2*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x481.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x480.value)))+(x481.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x482=IKsin(j22);
IkReal x483=IKcos(j22);
IkReal x484=((1.0)*gconst2);
IkReal x485=(gconst1*x483);
IkReal x486=(gconst1*x482);
IkReal x487=(x482*x484);
evalcond[0]=(((new_r11*x482))+gconst1+((new_r01*x483)));
evalcond[1]=(x486+((gconst2*x483))+new_r11);
evalcond[2]=((((-1.0)*x487))+x485);
evalcond[3]=((((-1.0)*x487))+x485+new_r01);
evalcond[4]=((((-1.0)*x483*x484))+(((-1.0)*x486)));
evalcond[5]=((((-1.0)*new_r01*x482))+((new_r11*x483))+gconst2);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x488=IKPowWithIntegerCheck(IKsign((((gconst1*new_r01))+(((-1.0)*gconst2*new_r11)))),-1);
if(!x488.valid){
continue;
}
CheckValue<IkReal> x489 = IKatan2WithCheck(IkReal((gconst1*gconst2)),IkReal(((-1.0)*(gconst1*gconst1))),IKFAST_ATAN2_MAGTHRESH);
if(!x489.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x488.value)))+(x489.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x490=IKsin(j22);
IkReal x491=IKcos(j22);
IkReal x492=((1.0)*gconst2);
IkReal x493=(gconst1*x491);
IkReal x494=(gconst1*x490);
IkReal x495=(x490*x492);
evalcond[0]=(gconst1+((new_r11*x490))+((new_r01*x491)));
evalcond[1]=(((gconst2*x491))+x494+new_r11);
evalcond[2]=((((-1.0)*x495))+x493);
evalcond[3]=((((-1.0)*x495))+x493+new_r01);
evalcond[4]=((((-1.0)*x491*x492))+(((-1.0)*x494)));
evalcond[5]=(gconst2+(((-1.0)*new_r01*x490))+((new_r11*x491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x496=IKPowWithIntegerCheck(gconst2,-1);
if(!x496.valid){
continue;
}
cj22array[0]=(new_r00*(x496.value));
if( cj22array[0] >= -1-IKFAST_SINCOS_THRESH && cj22array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j22valid[0] = j22valid[1] = true;
    j22array[0] = IKacos(cj22array[0]);
    sj22array[0] = IKsin(j22array[0]);
    cj22array[1] = cj22array[0];
    j22array[1] = -j22array[0];
    sj22array[1] = -sj22array[0];
}
else if( isnan(cj22array[0]) )
{
    // probably any value will work
    j22valid[0] = true;
    cj22array[0] = 1; sj22array[0] = 0; j22array[0] = 0;
}
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x497=IKsin(j22);
IkReal x498=IKcos(j22);
IkReal x499=((-1.0)*x497);
evalcond[0]=(new_r11*x497);
evalcond[1]=(gconst2*x499);
evalcond[2]=(new_r00*x499);
evalcond[3]=(((gconst2*x498))+new_r11);
evalcond[4]=(gconst2+((new_r11*x498)));
evalcond[5]=((((-1.0)*gconst2))+((new_r00*x498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
CheckValue<IkReal> x501 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x501.valid){
continue;
}
IkReal x500=((-1.0)*(x501.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x500;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x500;
IkReal gconst1=0;
IkReal x502 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x502)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x502,-0.5)));
j22eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x504 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x504.valid){
continue;
}
IkReal x503=((-1.0)*(x504.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x503;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x503;
IkReal gconst1=0;
IkReal x505 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x505)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x505,-0.5)));
j22eval[0]=new_r11;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x507 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x507.valid){
continue;
}
IkReal x506=((-1.0)*(x507.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x506;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x506;
IkReal gconst1=0;
IkReal x508 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x508)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x508,-0.5)));
j22eval[0]=new_r10;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x509=IKPowWithIntegerCheck(new_r10,-1);
if(!x509.valid){
continue;
}
CheckValue<IkReal> x510=IKPowWithIntegerCheck(gconst2,-1);
if(!x510.valid){
continue;
}
if( IKabs((gconst2*(x509.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x510.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst2*(x509.value)))+IKsqr(((-1.0)*new_r11*(x510.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((gconst2*(x509.value)), ((-1.0)*new_r11*(x510.value)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x511=IKsin(j22);
IkReal x512=IKcos(j22);
IkReal x513=((1.0)*gconst2);
IkReal x514=((-1.0)*gconst2);
evalcond[0]=(new_r11*x511);
evalcond[1]=(new_r10*x512);
evalcond[2]=(x511*x514);
evalcond[3]=(x512*x514);
evalcond[4]=(((gconst2*x512))+new_r11);
evalcond[5]=(((new_r11*x512))+gconst2);
evalcond[6]=((((-1.0)*x511*x513))+new_r10);
evalcond[7]=(((new_r10*x511))+(((-1.0)*x513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x515=IKPowWithIntegerCheck(gconst2,-1);
if(!x515.valid){
continue;
}
CheckValue<IkReal> x516=IKPowWithIntegerCheck(new_r11,-1);
if(!x516.valid){
continue;
}
if( IKabs((new_r10*(x515.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x516.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x515.value)))+IKsqr(((-1.0)*gconst2*(x516.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((new_r10*(x515.value)), ((-1.0)*gconst2*(x516.value)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x517=IKsin(j22);
IkReal x518=IKcos(j22);
IkReal x519=((1.0)*gconst2);
IkReal x520=((-1.0)*gconst2);
evalcond[0]=(new_r11*x517);
evalcond[1]=(new_r10*x518);
evalcond[2]=(x517*x520);
evalcond[3]=(x518*x520);
evalcond[4]=(((gconst2*x518))+new_r11);
evalcond[5]=(((new_r11*x518))+gconst2);
evalcond[6]=((((-1.0)*x517*x519))+new_r10);
evalcond[7]=(((new_r10*x517))+(((-1.0)*x519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x521 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x521.valid){
continue;
}
CheckValue<IkReal> x522=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x522.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x521.value)+(((1.5707963267949)*(x522.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x523=IKsin(j22);
IkReal x524=IKcos(j22);
IkReal x525=((1.0)*gconst2);
IkReal x526=((-1.0)*gconst2);
evalcond[0]=(new_r11*x523);
evalcond[1]=(new_r10*x524);
evalcond[2]=(x523*x526);
evalcond[3]=(x524*x526);
evalcond[4]=(((gconst2*x524))+new_r11);
evalcond[5]=(gconst2+((new_r11*x524)));
evalcond[6]=((((-1.0)*x523*x525))+new_r10);
evalcond[7]=((((-1.0)*x525))+((new_r10*x523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
CheckValue<IkReal> x528 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x528.valid){
continue;
}
IkReal x527=((-1.0)*(x528.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x527;
new_r01=0;
IkReal gconst0=x527;
IkReal gconst1=0;
IkReal x529 = new_r11*new_r11;
if(IKabs(x529)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x529,-0.5)));
j22eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x531 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x531.valid){
continue;
}
IkReal x530=((-1.0)*(x531.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x530;
new_r01=0;
IkReal gconst0=x530;
IkReal gconst1=0;
IkReal x532 = new_r11*new_r11;
if(IKabs(x532)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x532,-0.5)));
j22eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x534 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x534.valid){
continue;
}
IkReal x533=((-1.0)*(x534.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x533;
new_r01=0;
IkReal gconst0=x533;
IkReal gconst1=0;
IkReal x535 = new_r11*new_r11;
if(IKabs(x535)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x535,-0.5)));
j22eval[0]=new_r11;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x536=IKPowWithIntegerCheck(gconst2,-1);
if(!x536.valid){
continue;
}
CheckValue<IkReal> x537=IKPowWithIntegerCheck(new_r11,-1);
if(!x537.valid){
continue;
}
if( IKabs((new_r10*(x536.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x537.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x536.value)))+IKsqr(((-1.0)*gconst2*(x537.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((new_r10*(x536.value)), ((-1.0)*gconst2*(x537.value)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x538=IKsin(j22);
IkReal x539=IKcos(j22);
IkReal x540=(gconst2*x538);
IkReal x541=(gconst2*x539);
evalcond[0]=(new_r11*x538);
evalcond[1]=((-1.0)*x540);
evalcond[2]=(x541+new_r11);
evalcond[3]=(gconst2+((new_r11*x539)));
evalcond[4]=((((-1.0)*x541))+new_r00);
evalcond[5]=((((-1.0)*x540))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x538))+((new_r10*x539)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x538))+((new_r00*x539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x542 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x542.valid){
continue;
}
CheckValue<IkReal> x543=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x543.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x542.value)+(((1.5707963267949)*(x543.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x544=IKsin(j22);
IkReal x545=IKcos(j22);
IkReal x546=(gconst2*x544);
IkReal x547=(gconst2*x545);
evalcond[0]=(new_r11*x544);
evalcond[1]=((-1.0)*x546);
evalcond[2]=(x547+new_r11);
evalcond[3]=(gconst2+((new_r11*x545)));
evalcond[4]=((((-1.0)*x547))+new_r00);
evalcond[5]=((((-1.0)*x546))+new_r10);
evalcond[6]=(((new_r10*x545))+(((-1.0)*new_r00*x544)));
evalcond[7]=(((new_r00*x545))+((new_r10*x544))+(((-1.0)*gconst2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x548=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x548.valid){
continue;
}
CheckValue<IkReal> x549 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x549.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x548.value)))+(x549.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x550=IKsin(j22);
IkReal x551=IKcos(j22);
IkReal x552=(gconst2*x550);
IkReal x553=(gconst2*x551);
evalcond[0]=(new_r11*x550);
evalcond[1]=((-1.0)*x552);
evalcond[2]=(x553+new_r11);
evalcond[3]=(((new_r11*x551))+gconst2);
evalcond[4]=((((-1.0)*x553))+new_r00);
evalcond[5]=((((-1.0)*x552))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x550))+((new_r10*x551)));
evalcond[7]=(((new_r10*x550))+(((-1.0)*gconst2))+((new_r00*x551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j22]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x554=((1.0)*new_r11);
CheckValue<IkReal> x555=IKPowWithIntegerCheck(IKsign(((gconst1*gconst1)+(gconst2*gconst2))),-1);
if(!x555.valid){
continue;
}
CheckValue<IkReal> x556 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x554)))),IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x556.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x555.value)))+(x556.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x557=IKsin(j22);
IkReal x558=IKcos(j22);
IkReal x559=((1.0)*gconst2);
IkReal x560=(gconst1*x558);
IkReal x561=(gconst1*x557);
IkReal x562=((1.0)*x557);
IkReal x563=(x557*x559);
evalcond[0]=(((new_r11*x557))+gconst1+((new_r01*x558)));
evalcond[1]=(((gconst2*x558))+x561+new_r11);
evalcond[2]=(x560+new_r01+(((-1.0)*x563)));
evalcond[3]=((((-1.0)*new_r00*x562))+((new_r10*x558))+gconst1);
evalcond[4]=(((new_r11*x558))+gconst2+(((-1.0)*new_r01*x562)));
evalcond[5]=(x560+new_r10+(((-1.0)*x563)));
evalcond[6]=(((new_r10*x557))+(((-1.0)*x559))+((new_r00*x558)));
evalcond[7]=((((-1.0)*x561))+(((-1.0)*x558*x559))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x564=((1.0)*new_r11);
CheckValue<IkReal> x565 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x564)))),IkReal(((((-1.0)*gconst2*x564))+(((-1.0)*gconst1*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x565.valid){
continue;
}
CheckValue<IkReal> x566=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x566.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x565.value)+(((1.5707963267949)*(x566.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x567=IKsin(j22);
IkReal x568=IKcos(j22);
IkReal x569=((1.0)*gconst2);
IkReal x570=(gconst1*x568);
IkReal x571=(gconst1*x567);
IkReal x572=((1.0)*x567);
IkReal x573=(x567*x569);
evalcond[0]=(gconst1+((new_r01*x568))+((new_r11*x567)));
evalcond[1]=(x571+new_r11+((gconst2*x568)));
evalcond[2]=((((-1.0)*x573))+x570+new_r01);
evalcond[3]=(gconst1+(((-1.0)*new_r00*x572))+((new_r10*x568)));
evalcond[4]=(gconst2+((new_r11*x568))+(((-1.0)*new_r01*x572)));
evalcond[5]=((((-1.0)*x573))+x570+new_r10);
evalcond[6]=(((new_r00*x568))+((new_r10*x567))+(((-1.0)*x569)));
evalcond[7]=((((-1.0)*x571))+(((-1.0)*x568*x569))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x574=((1.0)*gconst1);
CheckValue<IkReal> x575 = IKatan2WithCheck(IkReal((((gconst1*new_r01))+(((-1.0)*new_r10*x574)))),IkReal(((((-1.0)*new_r11*x574))+(((-1.0)*new_r00*x574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x575.valid){
continue;
}
CheckValue<IkReal> x576=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x576.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x575.value)+(((1.5707963267949)*(x576.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x577=IKsin(j22);
IkReal x578=IKcos(j22);
IkReal x579=((1.0)*gconst2);
IkReal x580=(gconst1*x578);
IkReal x581=(gconst1*x577);
IkReal x582=((1.0)*x577);
IkReal x583=(x577*x579);
evalcond[0]=(((new_r11*x577))+((new_r01*x578))+gconst1);
evalcond[1]=(((gconst2*x578))+x581+new_r11);
evalcond[2]=(x580+new_r01+(((-1.0)*x583)));
evalcond[3]=(((new_r10*x578))+gconst1+(((-1.0)*new_r00*x582)));
evalcond[4]=((((-1.0)*new_r01*x582))+((new_r11*x578))+gconst2);
evalcond[5]=(x580+new_r10+(((-1.0)*x583)));
evalcond[6]=(((new_r00*x578))+((new_r10*x577))+(((-1.0)*x579)));
evalcond[7]=((((-1.0)*x578*x579))+(((-1.0)*x581))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x585 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x585)==0){
continue;
}
IkReal x584=pow(x585,-0.5);
CheckValue<IkReal> x586 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x586.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x586.value))));
IkReal gconst4=((1.0)*new_r01*x584);
IkReal gconst5=((-1.0)*new_r11*x584);
CheckValue<IkReal> x587 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x587.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j24+(x587.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[3];
CheckValue<IkReal> x590 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x590.valid){
continue;
}
IkReal x588=((1.0)*(x590.value));
IkReal x589=x584;
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x588)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x588)));
IkReal gconst4=((1.0)*new_r01*x589);
IkReal gconst5=((-1.0)*new_r11*x589);
IkReal x591=new_r01*new_r01;
IkReal x592=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x593=x584;
IkReal x594=((1.0)*new_r01*x593);
j22eval[0]=x592;
j22eval[1]=IKsign(x592);
j22eval[2]=((IKabs(((((-1.0)*new_r10*x594))+((x591*x593)))))+(IKabs(((((-1.0)*new_r00*x594))+(((-1.0)*new_r11*x594))))));
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[2];
CheckValue<IkReal> x597 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x597.valid){
continue;
}
IkReal x595=((1.0)*(x597.value));
IkReal x596=x584;
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x595)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x595)));
IkReal gconst4=((1.0)*new_r01*x596);
IkReal gconst5=((-1.0)*new_r11*x596);
IkReal x598=((new_r01*new_r01)+(new_r11*new_r11));
j22eval[0]=x598;
j22eval[1]=IKsign(x598);
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x601 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x601.valid){
continue;
}
IkReal x599=((1.0)*(x601.value));
IkReal x600=x584;
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x599)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x599)));
IkReal gconst4=((1.0)*new_r01*x600);
IkReal gconst5=((-1.0)*new_r11*x600);
j22eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst4*gconst4)+(gconst5*gconst5));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[4], cj22array[4], sj22array[4];
bool j22valid[4]={false};
_nj22 = 4;
j22array[0]=0;
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=1.5707963267949;
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
j22array[2]=3.14159265358979;
sj22array[2]=IKsin(j22array[2]);
cj22array[2]=IKcos(j22array[2]);
j22array[3]=-1.5707963267949;
sj22array[3]=IKsin(j22array[3]);
cj22array[3]=IKcos(j22array[3]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
if( j22array[2] > IKPI )
{
    j22array[2]-=IK2PI;
}
else if( j22array[2] < -IKPI )
{    j22array[2]+=IK2PI;
}
j22valid[2] = true;
if( j22array[3] > IKPI )
{
    j22array[3]-=IK2PI;
}
else if( j22array[3] < -IKPI )
{    j22array[3]+=IK2PI;
}
j22valid[3] = true;
for(int ij22 = 0; ij22 < 4; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 4; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
CheckValue<IkReal> x603 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x603.valid){
continue;
}
IkReal x602=((1.0)*(x603.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x602)));
new_r11=0;
new_r00=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x602)));
IkReal x604 = new_r01*new_r01;
if(IKabs(x604)==0){
continue;
}
IkReal gconst4=((1.0)*new_r01*(pow(x604,-0.5)));
IkReal gconst5=0;
j22eval[0]=new_r01;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x605=IKPowWithIntegerCheck(gconst4,-1);
if(!x605.valid){
continue;
}
cj22array[0]=((-1.0)*new_r01*(x605.value));
if( cj22array[0] >= -1-IKFAST_SINCOS_THRESH && cj22array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j22valid[0] = j22valid[1] = true;
    j22array[0] = IKacos(cj22array[0]);
    sj22array[0] = IKsin(j22array[0]);
    cj22array[1] = cj22array[0];
    j22array[1] = -j22array[0];
    sj22array[1] = -sj22array[0];
}
else if( isnan(cj22array[0]) )
{
    // probably any value will work
    j22valid[0] = true;
    cj22array[0] = 1; sj22array[0] = 0; j22array[0] = 0;
}
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x606=IKsin(j22);
IkReal x607=IKcos(j22);
IkReal x608=((-1.0)*x606);
evalcond[0]=(new_r10*x606);
evalcond[1]=(gconst4*x608);
evalcond[2]=(new_r01*x608);
evalcond[3]=(gconst4+((new_r01*x607)));
evalcond[4]=(gconst4+((new_r10*x607)));
evalcond[5]=(((gconst4*x607))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x609=IKPowWithIntegerCheck(new_r01,-1);
if(!x609.valid){
continue;
}
cj22array[0]=((-1.0)*gconst4*(x609.value));
if( cj22array[0] >= -1-IKFAST_SINCOS_THRESH && cj22array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j22valid[0] = j22valid[1] = true;
    j22array[0] = IKacos(cj22array[0]);
    sj22array[0] = IKsin(j22array[0]);
    cj22array[1] = cj22array[0];
    j22array[1] = -j22array[0];
    sj22array[1] = -sj22array[0];
}
else if( isnan(cj22array[0]) )
{
    // probably any value will work
    j22valid[0] = true;
    cj22array[0] = 1; sj22array[0] = 0; j22array[0] = 0;
}
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x610=IKsin(j22);
IkReal x611=IKcos(j22);
IkReal x612=(gconst4*x611);
IkReal x613=((-1.0)*x610);
evalcond[0]=(new_r10*x610);
evalcond[1]=(gconst4*x613);
evalcond[2]=(new_r01*x613);
evalcond[3]=(x612+new_r01);
evalcond[4]=(gconst4+((new_r10*x611)));
evalcond[5]=(x612+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst5;
evalcond[2]=gconst4;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[4];
CheckValue<IkReal> x615 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x615.valid){
continue;
}
IkReal x614=((1.0)*(x615.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x614)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x614)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j22eval[0]=1.0;
j22eval[1]=1.0;
j22eval[2]=new_r01;
j22eval[3]=1.0;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  || IKabs(j22eval[3]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
CheckValue<IkReal> x617 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x617.valid){
continue;
}
IkReal x616=((1.0)*(x617.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x616)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x616)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j22eval[0]=-1.0;
j22eval[1]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
j22eval[2]=-1.0;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
CheckValue<IkReal> x619 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x619.valid){
continue;
}
IkReal x618=((1.0)*(x619.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x618)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x618)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j22eval[0]=1.0;
j22eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j22eval[2]=1.0;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x620=((1.0)*new_r11);
CheckValue<IkReal> x621 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x620)))),IkReal(((((-1.0)*gconst5*x620))+(((-1.0)*gconst4*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x621.valid){
continue;
}
CheckValue<IkReal> x622=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x622.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x621.value)+(((1.5707963267949)*(x622.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x623=IKsin(j22);
IkReal x624=IKcos(j22);
IkReal x625=(gconst4*x624);
IkReal x626=((1.0)*x623);
IkReal x627=(gconst5*x624);
IkReal x628=(gconst5*x626);
evalcond[0]=(gconst4+((new_r01*x624))+((new_r11*x623)));
evalcond[1]=(((gconst4*x623))+x627+new_r11);
evalcond[2]=((((-1.0)*x628))+x625);
evalcond[3]=((((-1.0)*x628))+x625+new_r01);
evalcond[4]=((((-1.0)*gconst4*x626))+(((-1.0)*x627)));
evalcond[5]=((((-1.0)*new_r01*x626))+gconst5+((new_r11*x624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x629 = IKatan2WithCheck(IkReal((gconst4*new_r11)),IkReal((gconst5*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x629.valid){
continue;
}
CheckValue<IkReal> x630=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst4*gconst4)))+(((-1.0)*(gconst5*gconst5))))),-1);
if(!x630.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x629.value)+(((1.5707963267949)*(x630.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x631=IKsin(j22);
IkReal x632=IKcos(j22);
IkReal x633=(gconst4*x632);
IkReal x634=((1.0)*x631);
IkReal x635=(gconst5*x632);
IkReal x636=(gconst5*x634);
evalcond[0]=(gconst4+((new_r01*x632))+((new_r11*x631)));
evalcond[1]=(((gconst4*x631))+x635+new_r11);
evalcond[2]=((((-1.0)*x636))+x633);
evalcond[3]=((((-1.0)*x636))+x633+new_r01);
evalcond[4]=((((-1.0)*gconst4*x634))+(((-1.0)*x635)));
evalcond[5]=((((-1.0)*new_r01*x634))+gconst5+((new_r11*x632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x637 = IKatan2WithCheck(IkReal((gconst4*gconst5)),IkReal(((-1.0)*(gconst4*gconst4))),IKFAST_ATAN2_MAGTHRESH);
if(!x637.valid){
continue;
}
CheckValue<IkReal> x638=IKPowWithIntegerCheck(IKsign((((gconst4*new_r01))+(((-1.0)*gconst5*new_r11)))),-1);
if(!x638.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x637.value)+(((1.5707963267949)*(x638.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x639=IKsin(j22);
IkReal x640=IKcos(j22);
IkReal x641=(gconst4*x640);
IkReal x642=((1.0)*x639);
IkReal x643=(gconst5*x640);
IkReal x644=(gconst5*x642);
evalcond[0]=(gconst4+((new_r01*x640))+((new_r11*x639)));
evalcond[1]=(((gconst4*x639))+x643+new_r11);
evalcond[2]=((((-1.0)*x644))+x641);
evalcond[3]=((((-1.0)*x644))+x641+new_r01);
evalcond[4]=((((-1.0)*x643))+(((-1.0)*gconst4*x642)));
evalcond[5]=(gconst5+((new_r11*x640))+(((-1.0)*new_r01*x642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x645=IKPowWithIntegerCheck(gconst5,-1);
if(!x645.valid){
continue;
}
cj22array[0]=(new_r00*(x645.value));
if( cj22array[0] >= -1-IKFAST_SINCOS_THRESH && cj22array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j22valid[0] = j22valid[1] = true;
    j22array[0] = IKacos(cj22array[0]);
    sj22array[0] = IKsin(j22array[0]);
    cj22array[1] = cj22array[0];
    j22array[1] = -j22array[0];
    sj22array[1] = -sj22array[0];
}
else if( isnan(cj22array[0]) )
{
    // probably any value will work
    j22valid[0] = true;
    cj22array[0] = 1; sj22array[0] = 0; j22array[0] = 0;
}
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x646=IKsin(j22);
IkReal x647=IKcos(j22);
IkReal x648=((-1.0)*x646);
evalcond[0]=(new_r11*x646);
evalcond[1]=(gconst5*x648);
evalcond[2]=(new_r00*x648);
evalcond[3]=(new_r11+((gconst5*x647)));
evalcond[4]=(gconst5+((new_r11*x647)));
evalcond[5]=((((-1.0)*gconst5))+((new_r00*x647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
CheckValue<IkReal> x650 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x650.valid){
continue;
}
IkReal x649=((1.0)*(x650.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x649)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x649)));
IkReal gconst4=0;
IkReal x651 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x651)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x651,-0.5)));
j22eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x653 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x653.valid){
continue;
}
IkReal x652=((1.0)*(x653.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x652)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x652)));
IkReal gconst4=0;
IkReal x654 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x654)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x654,-0.5)));
j22eval[0]=new_r11;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x656 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x656.valid){
continue;
}
IkReal x655=((1.0)*(x656.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x655)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x655)));
IkReal gconst4=0;
IkReal x657 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x657)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x657,-0.5)));
j22eval[0]=new_r10;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x658=IKPowWithIntegerCheck(new_r10,-1);
if(!x658.valid){
continue;
}
CheckValue<IkReal> x659=IKPowWithIntegerCheck(gconst5,-1);
if(!x659.valid){
continue;
}
if( IKabs((gconst5*(x658.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x659.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst5*(x658.value)))+IKsqr(((-1.0)*new_r11*(x659.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((gconst5*(x658.value)), ((-1.0)*new_r11*(x659.value)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x660=IKsin(j22);
IkReal x661=IKcos(j22);
IkReal x662=((1.0)*gconst5);
IkReal x663=(gconst5*x661);
evalcond[0]=(new_r11*x660);
evalcond[1]=(new_r10*x661);
evalcond[2]=((-1.0)*gconst5*x660);
evalcond[3]=((-1.0)*x663);
evalcond[4]=(x663+new_r11);
evalcond[5]=(gconst5+((new_r11*x661)));
evalcond[6]=((((-1.0)*x660*x662))+new_r10);
evalcond[7]=(((new_r10*x660))+(((-1.0)*x662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x664=IKPowWithIntegerCheck(gconst5,-1);
if(!x664.valid){
continue;
}
CheckValue<IkReal> x665=IKPowWithIntegerCheck(new_r11,-1);
if(!x665.valid){
continue;
}
if( IKabs((new_r10*(x664.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x665.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x664.value)))+IKsqr(((-1.0)*gconst5*(x665.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((new_r10*(x664.value)), ((-1.0)*gconst5*(x665.value)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x666=IKsin(j22);
IkReal x667=IKcos(j22);
IkReal x668=((1.0)*gconst5);
IkReal x669=(gconst5*x667);
evalcond[0]=(new_r11*x666);
evalcond[1]=(new_r10*x667);
evalcond[2]=((-1.0)*gconst5*x666);
evalcond[3]=((-1.0)*x669);
evalcond[4]=(x669+new_r11);
evalcond[5]=(gconst5+((new_r11*x667)));
evalcond[6]=((((-1.0)*x666*x668))+new_r10);
evalcond[7]=(((new_r10*x666))+(((-1.0)*x668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x670 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x670.valid){
continue;
}
CheckValue<IkReal> x671=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x671.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x670.value)+(((1.5707963267949)*(x671.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x672=IKsin(j22);
IkReal x673=IKcos(j22);
IkReal x674=((1.0)*gconst5);
IkReal x675=(gconst5*x673);
evalcond[0]=(new_r11*x672);
evalcond[1]=(new_r10*x673);
evalcond[2]=((-1.0)*gconst5*x672);
evalcond[3]=((-1.0)*x675);
evalcond[4]=(x675+new_r11);
evalcond[5]=(((new_r11*x673))+gconst5);
evalcond[6]=((((-1.0)*x672*x674))+new_r10);
evalcond[7]=(((new_r10*x672))+(((-1.0)*x674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
CheckValue<IkReal> x677 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x677.valid){
continue;
}
IkReal x676=((1.0)*(x677.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x676)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x676)));
IkReal gconst4=0;
IkReal x678 = new_r11*new_r11;
if(IKabs(x678)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x678,-0.5)));
j22eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x680 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x680.valid){
continue;
}
IkReal x679=((1.0)*(x680.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x679)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x679)));
IkReal gconst4=0;
IkReal x681 = new_r11*new_r11;
if(IKabs(x681)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x681,-0.5)));
j22eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x683 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x683.valid){
continue;
}
IkReal x682=((1.0)*(x683.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x682)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x682)));
IkReal gconst4=0;
IkReal x684 = new_r11*new_r11;
if(IKabs(x684)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x684,-0.5)));
j22eval[0]=new_r11;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x685=IKPowWithIntegerCheck(gconst5,-1);
if(!x685.valid){
continue;
}
CheckValue<IkReal> x686=IKPowWithIntegerCheck(new_r11,-1);
if(!x686.valid){
continue;
}
if( IKabs((new_r10*(x685.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x686.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x685.value)))+IKsqr(((-1.0)*gconst5*(x686.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((new_r10*(x685.value)), ((-1.0)*gconst5*(x686.value)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x687=IKsin(j22);
IkReal x688=IKcos(j22);
IkReal x689=((1.0)*gconst5);
evalcond[0]=(new_r11*x687);
evalcond[1]=((-1.0)*gconst5*x687);
evalcond[2]=(((gconst5*x688))+new_r11);
evalcond[3]=(gconst5+((new_r11*x688)));
evalcond[4]=((((-1.0)*x688*x689))+new_r00);
evalcond[5]=((((-1.0)*x687*x689))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x687))+((new_r10*x688)));
evalcond[7]=((((-1.0)*x689))+((new_r00*x688))+((new_r10*x687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x690 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x690.valid){
continue;
}
CheckValue<IkReal> x691=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x691.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x690.value)+(((1.5707963267949)*(x691.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x692=IKsin(j22);
IkReal x693=IKcos(j22);
IkReal x694=((1.0)*gconst5);
evalcond[0]=(new_r11*x692);
evalcond[1]=((-1.0)*gconst5*x692);
evalcond[2]=(new_r11+((gconst5*x693)));
evalcond[3]=(gconst5+((new_r11*x693)));
evalcond[4]=((((-1.0)*x693*x694))+new_r00);
evalcond[5]=((((-1.0)*x692*x694))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x692))+((new_r10*x693)));
evalcond[7]=(((new_r10*x692))+(((-1.0)*x694))+((new_r00*x693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x695 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x695.valid){
continue;
}
CheckValue<IkReal> x696=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x696.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x695.value)+(((1.5707963267949)*(x696.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x697=IKsin(j22);
IkReal x698=IKcos(j22);
IkReal x699=((1.0)*gconst5);
evalcond[0]=(new_r11*x697);
evalcond[1]=((-1.0)*gconst5*x697);
evalcond[2]=(new_r11+((gconst5*x698)));
evalcond[3]=(gconst5+((new_r11*x698)));
evalcond[4]=((((-1.0)*x698*x699))+new_r00);
evalcond[5]=((((-1.0)*x697*x699))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x697))+((new_r10*x698)));
evalcond[7]=(((new_r10*x697))+(((-1.0)*x699))+((new_r00*x698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j22]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x700=((1.0)*new_r11);
CheckValue<IkReal> x701 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x700)))),IkReal(((((-1.0)*gconst5*x700))+(((-1.0)*gconst4*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x701.valid){
continue;
}
CheckValue<IkReal> x702=IKPowWithIntegerCheck(IKsign(((gconst4*gconst4)+(gconst5*gconst5))),-1);
if(!x702.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x701.value)+(((1.5707963267949)*(x702.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x703=IKsin(j22);
IkReal x704=IKcos(j22);
IkReal x705=((1.0)*gconst5);
IkReal x706=(gconst4*x704);
IkReal x707=((1.0)*x703);
IkReal x708=(x703*x705);
evalcond[0]=(((new_r01*x704))+gconst4+((new_r11*x703)));
evalcond[1]=(((gconst5*x704))+((gconst4*x703))+new_r11);
evalcond[2]=((((-1.0)*x708))+x706+new_r01);
evalcond[3]=(gconst4+((new_r10*x704))+(((-1.0)*new_r00*x707)));
evalcond[4]=(gconst5+((new_r11*x704))+(((-1.0)*new_r01*x707)));
evalcond[5]=((((-1.0)*x708))+x706+new_r10);
evalcond[6]=(((new_r00*x704))+(((-1.0)*x705))+((new_r10*x703)));
evalcond[7]=((((-1.0)*gconst4*x707))+(((-1.0)*x704*x705))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x709=((1.0)*new_r11);
CheckValue<IkReal> x710=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x710.valid){
continue;
}
CheckValue<IkReal> x711 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x709)))),IkReal(((((-1.0)*gconst5*x709))+(((-1.0)*gconst4*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x711.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x710.value)))+(x711.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x712=IKsin(j22);
IkReal x713=IKcos(j22);
IkReal x714=((1.0)*gconst5);
IkReal x715=(gconst4*x713);
IkReal x716=((1.0)*x712);
IkReal x717=(x712*x714);
evalcond[0]=(((new_r01*x713))+gconst4+((new_r11*x712)));
evalcond[1]=(((gconst5*x713))+((gconst4*x712))+new_r11);
evalcond[2]=((((-1.0)*x717))+x715+new_r01);
evalcond[3]=(gconst4+((new_r10*x713))+(((-1.0)*new_r00*x716)));
evalcond[4]=(gconst5+((new_r11*x713))+(((-1.0)*new_r01*x716)));
evalcond[5]=((((-1.0)*x717))+x715+new_r10);
evalcond[6]=(((new_r00*x713))+(((-1.0)*x714))+((new_r10*x712)));
evalcond[7]=((((-1.0)*gconst4*x716))+new_r00+(((-1.0)*x713*x714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x718=((1.0)*gconst4);
CheckValue<IkReal> x719 = IKatan2WithCheck(IkReal((((gconst4*new_r01))+(((-1.0)*new_r10*x718)))),IkReal(((((-1.0)*new_r11*x718))+(((-1.0)*new_r00*x718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x719.valid){
continue;
}
CheckValue<IkReal> x720=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x720.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x719.value)+(((1.5707963267949)*(x720.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x721=IKsin(j22);
IkReal x722=IKcos(j22);
IkReal x723=((1.0)*gconst5);
IkReal x724=(gconst4*x722);
IkReal x725=((1.0)*x721);
IkReal x726=(x721*x723);
evalcond[0]=(gconst4+((new_r01*x722))+((new_r11*x721)));
evalcond[1]=(((gconst5*x722))+((gconst4*x721))+new_r11);
evalcond[2]=((((-1.0)*x726))+x724+new_r01);
evalcond[3]=(gconst4+(((-1.0)*new_r00*x725))+((new_r10*x722)));
evalcond[4]=(gconst5+((new_r11*x722))+(((-1.0)*new_r01*x725)));
evalcond[5]=((((-1.0)*x726))+x724+new_r10);
evalcond[6]=(((new_r00*x722))+(((-1.0)*x723))+((new_r10*x721)));
evalcond[7]=((((-1.0)*gconst4*x725))+(((-1.0)*x722*x723))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j22eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j22]

} else
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x728 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x728.valid){
continue;
}
IkReal x727=x728.value;
j22array[0]=((-1.0)*x727);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=((3.14159265358979)+(((-1.0)*x727)));
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j22))))+((new_r10*(IKcos(j22)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j22]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x729=((1.0)*new_r11);
CheckValue<IkReal> x730=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x730.valid){
continue;
}
CheckValue<IkReal> x731 = IKatan2WithCheck(IkReal(((((-1.0)*sj24*x729))+((cj24*new_r01)))),IkReal(((((-1.0)*new_r01*sj24))+(((-1.0)*cj24*x729)))),IKFAST_ATAN2_MAGTHRESH);
if(!x731.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x730.value)))+(x731.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x732=IKcos(j22);
IkReal x733=IKsin(j22);
IkReal x734=((1.0)*cj24);
IkReal x735=(sj24*x732);
IkReal x736=(sj24*x733);
IkReal x737=((1.0)*x733);
IkReal x738=(x733*x734);
evalcond[0]=(((new_r01*x732))+sj24+((new_r11*x733)));
evalcond[1]=(x736+new_r11+((cj24*x732)));
evalcond[2]=((((-1.0)*x738))+x735+new_r01);
evalcond[3]=(sj24+(((-1.0)*new_r00*x737))+((new_r10*x732)));
evalcond[4]=(cj24+(((-1.0)*new_r01*x737))+((new_r11*x732)));
evalcond[5]=((((-1.0)*x738))+x735+new_r10);
evalcond[6]=(((new_r00*x732))+(((-1.0)*x734))+((new_r10*x733)));
evalcond[7]=((((-1.0)*x732*x734))+(((-1.0)*x736))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x739=((1.0)*sj24);
CheckValue<IkReal> x740 = IKatan2WithCheck(IkReal((((new_r01*sj24))+(((-1.0)*new_r10*x739)))),IkReal(((((-1.0)*new_r00*x739))+(((-1.0)*new_r11*x739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x740.valid){
continue;
}
CheckValue<IkReal> x741=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x741.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x740.value)+(((1.5707963267949)*(x741.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x742=IKcos(j22);
IkReal x743=IKsin(j22);
IkReal x744=((1.0)*cj24);
IkReal x745=(sj24*x742);
IkReal x746=(sj24*x743);
IkReal x747=((1.0)*x743);
IkReal x748=(x743*x744);
evalcond[0]=(sj24+((new_r01*x742))+((new_r11*x743)));
evalcond[1]=(((cj24*x742))+x746+new_r11);
evalcond[2]=(x745+new_r01+(((-1.0)*x748)));
evalcond[3]=((((-1.0)*new_r00*x747))+sj24+((new_r10*x742)));
evalcond[4]=((((-1.0)*new_r01*x747))+cj24+((new_r11*x742)));
evalcond[5]=(x745+new_r10+(((-1.0)*x748)));
evalcond[6]=(((new_r10*x743))+((new_r00*x742))+(((-1.0)*x744)));
evalcond[7]=((((-1.0)*x742*x744))+(((-1.0)*x746))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x749=IKPowWithIntegerCheck(IKsign((((new_r11*sj24))+((cj24*new_r01)))),-1);
if(!x749.valid){
continue;
}
CheckValue<IkReal> x750 = IKatan2WithCheck(IkReal(((-1.0)+(cj24*cj24)+(new_r01*new_r01))),IkReal(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj24*sj24)))),IKFAST_ATAN2_MAGTHRESH);
if(!x750.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x749.value)))+(x750.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x751=IKcos(j22);
IkReal x752=IKsin(j22);
IkReal x753=((1.0)*cj24);
IkReal x754=(sj24*x751);
IkReal x755=(sj24*x752);
IkReal x756=((1.0)*x752);
IkReal x757=(x752*x753);
evalcond[0]=(((new_r11*x752))+sj24+((new_r01*x751)));
evalcond[1]=(((cj24*x751))+x755+new_r11);
evalcond[2]=(x754+new_r01+(((-1.0)*x757)));
evalcond[3]=((((-1.0)*new_r00*x756))+sj24+((new_r10*x751)));
evalcond[4]=((((-1.0)*new_r01*x756))+((new_r11*x751))+cj24);
evalcond[5]=(x754+new_r10+(((-1.0)*x757)));
evalcond[6]=(((new_r00*x751))+((new_r10*x752))+(((-1.0)*x753)));
evalcond[7]=((((-1.0)*x751*x753))+(((-1.0)*x755))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j22eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j22eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j22eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j22]

} else
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x759 = IKatan2WithCheck(IkReal(((-1.0)*new_r10*new_r22)),IkReal((new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x759.valid){
continue;
}
IkReal x758=x759.value;
j22array[0]=((-1.0)*x758);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=((3.14159265358979)+(((-1.0)*x758)));
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[5];
IkReal x760=IKsin(j22);
IkReal x761=IKcos(j22);
IkReal x762=(new_r11*x761);
IkReal x763=(new_r01*x760);
evalcond[0]=(((new_r11*x760))+((new_r01*x761)));
evalcond[1]=(((new_r10*x760))+((new_r00*x761)));
evalcond[2]=(((new_r10*x761))+(((-1.0)*new_r00*x760)));
evalcond[3]=((((-1.0)*x763))+x762);
evalcond[4]=((((-1.0)*new_r22*x762))+((new_r22*x763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x765 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x765.valid){
continue;
}
IkReal x764=x765.value;
j22array[0]=((-1.0)*x764);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=((3.14159265358979)+(((-1.0)*x764)));
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[5];
IkReal x766=IKcos(j22);
IkReal x767=IKsin(j22);
IkReal x768=((1.0)*new_r22);
IkReal x769=(new_r11*x766);
IkReal x770=(new_r10*x766);
IkReal x771=(new_r01*x767);
IkReal x772=(new_r00*x767);
evalcond[0]=(((new_r11*x767))+((new_r01*x766)));
evalcond[1]=(x770+(((-1.0)*x772)));
evalcond[2]=(x769+(((-1.0)*x771)));
evalcond[3]=((((-1.0)*x768*x770))+((new_r22*x772)));
evalcond[4]=(((new_r22*x771))+(((-1.0)*x768*x769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x774 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x774.valid){
continue;
}
IkReal x773=x774.value;
j22array[0]=((-1.0)*x773);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=((3.14159265358979)+(((-1.0)*x773)));
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[5];
IkReal x775=IKcos(j22);
IkReal x776=IKsin(j22);
IkReal x777=((1.0)*new_r22);
IkReal x778=(new_r11*x775);
IkReal x779=(new_r10*x775);
IkReal x780=(new_r01*x776);
IkReal x781=(new_r00*x776);
evalcond[0]=(((new_r00*x775))+((new_r10*x776)));
evalcond[1]=(x779+(((-1.0)*x781)));
evalcond[2]=(x778+(((-1.0)*x780)));
evalcond[3]=(((new_r22*x781))+(((-1.0)*x777*x779)));
evalcond[4]=(((new_r22*x780))+(((-1.0)*x777*x778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j22]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x783=IKPowWithIntegerCheck(cj23,-1);
if(!x783.valid){
continue;
}
IkReal x782=x783.value;
CheckValue<IkReal> x784=IKPowWithIntegerCheck(new_r11,-1);
if(!x784.valid){
continue;
}
if( IKabs((x782*(x784.value)*((((new_r01*new_r12))+(((-1.0)*cj23*sj24)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x782)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x782*(x784.value)*((((new_r01*new_r12))+(((-1.0)*cj23*sj24))))))+IKsqr(((-1.0)*new_r12*x782))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((x782*(x784.value)*((((new_r01*new_r12))+(((-1.0)*cj23*sj24))))), ((-1.0)*new_r12*x782));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[18];
IkReal x785=IKsin(j22);
IkReal x786=IKcos(j22);
IkReal x787=((1.0)*cj24);
IkReal x788=((1.0)*sj23);
IkReal x789=((1.0)*cj23);
IkReal x790=(sj23*x785);
IkReal x791=(new_r10*x786);
IkReal x792=((1.0)*x786);
IkReal x793=((1.0)*x785);
IkReal x794=(cj23*x785);
evalcond[0]=(new_r12+((cj23*x786)));
evalcond[1]=(new_r02+(((-1.0)*x785*x789)));
evalcond[2]=(((new_r12*x785))+((new_r02*x786)));
evalcond[3]=(((new_r11*x785))+sj24+((new_r01*x786)));
evalcond[4]=(((new_r12*x786))+cj23+(((-1.0)*new_r02*x793)));
evalcond[5]=(((sj24*x786))+new_r01+((cj24*x790)));
evalcond[6]=(((new_r10*x785))+(((-1.0)*x787))+((new_r00*x786)));
evalcond[7]=(((sj24*x790))+(((-1.0)*x786*x787))+new_r00);
evalcond[8]=((((-1.0)*sj23*x786*x787))+((sj24*x785))+new_r11);
evalcond[9]=((((-1.0)*sj24*x786*x788))+new_r10+(((-1.0)*x785*x787)));
evalcond[10]=(x791+(((-1.0)*sj24*x788))+(((-1.0)*new_r00*x793)));
evalcond[11]=((((-1.0)*new_r01*x793))+((new_r11*x786))+(((-1.0)*sj23*x787)));
evalcond[12]=(((new_r20*sj23))+((new_r00*x794))+(((-1.0)*x789*x791)));
evalcond[13]=(((new_r21*sj23))+(((-1.0)*new_r11*x786*x789))+((new_r01*x794)));
evalcond[14]=((((-1.0)*new_r12*x786*x788))+(((-1.0)*new_r22*x789))+((new_r02*x790)));
evalcond[15]=((-1.0)+(((-1.0)*new_r12*x786*x789))+((new_r02*x794))+((new_r22*sj23)));
evalcond[16]=((((-1.0)*x788*x791))+sj24+((new_r00*x790))+(((-1.0)*new_r20*x789)));
evalcond[17]=((((-1.0)*new_r21*x789))+(((-1.0)*new_r11*x786*x788))+cj24+((new_r01*x790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x795=IKPowWithIntegerCheck(IKsign(cj23),-1);
if(!x795.valid){
continue;
}
CheckValue<IkReal> x796 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x796.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x795.value)))+(x796.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[18];
IkReal x797=IKsin(j22);
IkReal x798=IKcos(j22);
IkReal x799=((1.0)*cj24);
IkReal x800=((1.0)*sj23);
IkReal x801=((1.0)*cj23);
IkReal x802=(sj23*x797);
IkReal x803=(new_r10*x798);
IkReal x804=((1.0)*x798);
IkReal x805=((1.0)*x797);
IkReal x806=(cj23*x797);
evalcond[0]=(new_r12+((cj23*x798)));
evalcond[1]=((((-1.0)*x797*x801))+new_r02);
evalcond[2]=(((new_r12*x797))+((new_r02*x798)));
evalcond[3]=(((new_r11*x797))+sj24+((new_r01*x798)));
evalcond[4]=(((new_r12*x798))+(((-1.0)*new_r02*x805))+cj23);
evalcond[5]=(((sj24*x798))+((cj24*x802))+new_r01);
evalcond[6]=((((-1.0)*x799))+((new_r10*x797))+((new_r00*x798)));
evalcond[7]=((((-1.0)*x798*x799))+((sj24*x802))+new_r00);
evalcond[8]=((((-1.0)*sj23*x798*x799))+((sj24*x797))+new_r11);
evalcond[9]=((((-1.0)*sj24*x798*x800))+(((-1.0)*x797*x799))+new_r10);
evalcond[10]=((((-1.0)*new_r00*x805))+(((-1.0)*sj24*x800))+x803);
evalcond[11]=((((-1.0)*sj23*x799))+(((-1.0)*new_r01*x805))+((new_r11*x798)));
evalcond[12]=(((new_r20*sj23))+((new_r00*x806))+(((-1.0)*x801*x803)));
evalcond[13]=(((new_r21*sj23))+((new_r01*x806))+(((-1.0)*new_r11*x798*x801)));
evalcond[14]=(((new_r02*x802))+(((-1.0)*new_r22*x801))+(((-1.0)*new_r12*x798*x800)));
evalcond[15]=((-1.0)+((new_r02*x806))+(((-1.0)*new_r12*x798*x801))+((new_r22*sj23)));
evalcond[16]=((((-1.0)*new_r20*x801))+(((-1.0)*x800*x803))+sj24+((new_r00*x802)));
evalcond[17]=(cj24+((new_r01*x802))+(((-1.0)*new_r21*x801))+(((-1.0)*new_r11*x798*x800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - teoSim (defeb2fd3327ea06bb5b9518a572532e)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
