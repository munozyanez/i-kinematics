/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-05-09 17:56:03.982632
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfastLeftLeg.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast_ll;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKcos(j[2]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[4]);
x8=IKsin(j[4]);
x9=IKcos(j[5]);
x10=IKcos(j[1]);
x11=IKsin(j[5]);
x12=((0.3)*x4);
x13=((0.33)*x0);
x14=((1.0)*x11);
x15=((0.33)*x4);
x16=((1.0)*x4);
x17=((1.0)*x2);
x18=((1.0)*x0);
x19=(x10*x3);
x20=(x10*x6);
x21=((-1.0)*x6);
x22=(x0*x1);
x23=(x1*x10);
x24=(x2*x3);
x25=((-1.0)*x5);
x26=(x0*x3);
x27=(x10*x5);
x28=(x1*x2);
x29=((0.3)*x24);
x30=(x16*x28);
x31=(x16*x20);
x32=((((-1.0)*x30))+x26);
x33=(((x0*x24))+(((-1.0)*x1*x16)));
x34=(x22+((x24*x4)));
x35=((((-1.0)*x16*x3))+(((-1.0)*x17*x22)));
x36=((((-1.0)*x1*x18))+(((-1.0)*x16*x24)));
x37=(x32*x5);
x38=(x34*x5);
x39=((((-1.0)*x16*x27))+(((-1.0)*x18*x20)));
x40=(x35*x6);
x41=(((x35*x5))+((x6*(((((-1.0)*x18*x3))+x30)))));
x42=(((x7*(((((-1.0)*x31))+((x0*x27))))))+((x39*x8)));
x43=(((x7*((((x33*x5))+((x36*x6))))))+((x8*((((x21*x33))+((x25*x34)))))));
x44=(((x8*(((((-1.0)*x25*x32))+(((-1.0)*x21*x35))))))+(((-1.0)*x41*x7)));
eerot[0]=(((x41*x8))+((x7*((x37+x40)))));
eerot[1]=(((x11*x44))+((x23*x9)));
eerot[2]=((((-1.0)*x14*x23))+((x44*x9)));
IkReal x45=((1.0)*x3);
eetrans[0]=((((-1.0)*x13*x28))+(((-0.0175)*x23))+((x6*(((((-0.3)*x26))+((x12*x28))))))+((x5*(((((-0.3)*x2*x22))+(((-1.0)*x12*x45))))))+(((-1.0)*x15*x45)));
eerot[3]=(((x7*(((((-1.0)*x38))+(((-1.0)*x33*x6))))))+((x8*((((x21*x36))+((x25*x33)))))));
eerot[4]=(((x19*x9))+((x11*x43)));
eerot[5]=((((-1.0)*x14*x19))+((x43*x9)));
eetrans[1]=((0.146)+(((-1.0)*x13*x24))+((x1*x15))+(((-0.0175)*x19))+((x6*(((((0.3)*x22))+((x12*x24))))))+((x5*((((x1*x12))+(((-1.0)*x0*x29)))))));
eerot[6]=(((x8*(((((-1.0)*x18*x27))+x31))))+((x39*x7)));
eerot[7]=(((x11*x42))+(((-1.0)*x17*x9)));
eerot[8]=(((x42*x9))+((x11*x2)));
eetrans[2]=((-0.092)+(((0.0175)*x2))+(((-0.3)*x0*x27))+(((-1.0)*x10*x13))+((x12*x20)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j22,cj22,sj22,htj22,j22mul,j23,cj23,sj23,htj23,j23mul,j24,cj24,sj24,htj24,j24mul,j25,cj25,sj25,htj25,j25mul,j26,cj26,sj26,htj26,j26mul,j27,cj27,sj27,htj27,j27mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij22[2], _nj22,_ij23[2], _nj23,_ij24[2], _nj24,_ij25[2], _nj25,_ij26[2], _nj26,_ij27[2], _nj27;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j22=numeric_limits<IkReal>::quiet_NaN(); _ij22[0] = -1; _ij22[1] = -1; _nj22 = -1; j23=numeric_limits<IkReal>::quiet_NaN(); _ij23[0] = -1; _ij23[1] = -1; _nj23 = -1; j24=numeric_limits<IkReal>::quiet_NaN(); _ij24[0] = -1; _ij24[1] = -1; _nj24 = -1; j25=numeric_limits<IkReal>::quiet_NaN(); _ij25[0] = -1; _ij25[1] = -1; _nj25 = -1; j26=numeric_limits<IkReal>::quiet_NaN(); _ij26[0] = -1; _ij26[1] = -1; _nj26 = -1; j27=numeric_limits<IkReal>::quiet_NaN(); _ij27[0] = -1; _ij27[1] = -1; _nj27 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r02);
new_r01=r01;
new_r02=r00;
new_px=px;
new_r10=r12;
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r10);
new_py=((0.146)+(((-1.0)*py)));
new_r20=r22;
new_r21=((-1.0)*r21);
new_r22=((-1.0)*r20);
new_pz=((-0.092)+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x46=((1.0)*px);
IkReal x47=((1.0)*pz);
IkReal x48=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x48))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x47)));
rxp0_2=((((-1.0)*r10*x46))+((py*r00)));
rxp1_0=((((-1.0)*r21*x48))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x47)));
rxp1_2=((((-1.0)*r11*x46))+((py*r01)));
rxp2_0=((((-1.0)*r22*x48))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x47))+((px*r22)));
rxp2_2=((((-1.0)*r12*x46))+((py*r02)));
{
IkReal j25array[2], cj25array[2], sj25array[2];
bool j25valid[2]={false};
_nj25 = 2;
cj25array[0]=((-1.00609217171717)+(((5.05050505050505)*pp)));
if( cj25array[0] >= -1-IKFAST_SINCOS_THRESH && cj25array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j25valid[0] = j25valid[1] = true;
    j25array[0] = IKacos(cj25array[0]);
    sj25array[0] = IKsin(j25array[0]);
    cj25array[1] = cj25array[0];
    j25array[1] = -j25array[0];
    sj25array[1] = -sj25array[0];
}
else if( isnan(cj25array[0]) )
{
    // probably any value will work
    j25valid[0] = true;
    cj25array[0] = 1; sj25array[0] = 0; j25array[0] = 0;
}
for(int ij25 = 0; ij25 < 2; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 2; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

{
IkReal j27eval[2];
j27eval[0]=((npx*npx)+(npy*npy));
j27eval[1]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  )
{
{
IkReal j26eval[2];
j26eval[0]=((IKabs(sj25))+(((3.03030303030303)*(IKabs(((0.3)+(((0.33)*cj25))))))));
j26eval[1]=((1.0)+(((2.2)*cj25))+(((1.21)*(cj25*cj25)))+(((1.21)*(sj25*sj25))));
if( IKabs(j26eval[0]) < 0.0000010000000000  || IKabs(j26eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j26, j27]

} else
{
{
IkReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
_nj26 = 2;
IkReal x49=((0.3)+(((0.33)*cj25)));
CheckValue<IkReal> x52 = IKatan2WithCheck(IkReal(((0.33)*sj25)),IkReal(x49),IKFAST_ATAN2_MAGTHRESH);
if(!x52.valid){
continue;
}
IkReal x50=((1.0)*(x52.value));
if((((((0.1089)*(sj25*sj25)))+(x49*x49))) < -0.00001)
continue;
CheckValue<IkReal> x53=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.1089)*(sj25*sj25)))+(x49*x49)))),-1);
if(!x53.valid){
continue;
}
if( ((npz*(x53.value))) < -1-IKFAST_SINCOS_THRESH || ((npz*(x53.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x51=IKasin((npz*(x53.value)));
j26array[0]=(x51+(((-1.0)*x50)));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
j26array[1]=((3.14159265358979)+(((-1.0)*x50))+(((-1.0)*x51)));
sj26array[1]=IKsin(j26array[1]);
cj26array[1]=IKcos(j26array[1]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
if( j26array[1] > IKPI )
{
    j26array[1]-=IK2PI;
}
else if( j26array[1] < -IKPI )
{    j26array[1]+=IK2PI;
}
j26valid[1] = true;
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 2; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

{
IkReal j27eval[3];
IkReal x54=npy*npy;
IkReal x55=npx*npx;
IkReal x56=((400.0)*sj26);
IkReal x57=((132.0)*sj25);
IkReal x58=((7.0)*sj26);
IkReal x59=((400.0)*cj26*npz);
j27eval[0]=(((sj26*x55))+((sj26*x54)));
j27eval[1]=IKsign((((x55*x56))+((x54*x56))));
j27eval[2]=((IKabs((((npy*x57))+(((-1.0)*npx*x58))+(((-1.0)*npy*x59)))))+(IKabs((((npx*x59))+(((-1.0)*npx*x57))+(((-1.0)*npy*x58))))));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  || IKabs(j27eval[2]) < 0.0000010000000000  )
{
{
IkReal j27eval[3];
IkReal x60=npy*npy;
IkReal x61=npx*npx;
IkReal x62=((400.0)*cj26);
IkReal x63=((7.0)*cj26);
IkReal x64=((132.0)*cj25);
IkReal x65=((400.0)*npz*sj26);
j27eval[0]=(((cj26*x60))+((cj26*x61)));
j27eval[1]=IKsign((((x60*x62))+((x61*x62))));
j27eval[2]=((IKabs((((npy*x65))+(((-120.0)*npy))+(((-1.0)*npy*x64))+(((-1.0)*npx*x63)))))+(IKabs(((((120.0)*npx))+((npx*x64))+(((-1.0)*npy*x63))+(((-1.0)*npx*x65))))));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  || IKabs(j27eval[2]) < 0.0000010000000000  )
{
{
IkReal j27eval[3];
IkReal x66=npy*npy;
IkReal x67=npx*npx;
IkReal x68=((120.0)*cj26);
IkReal x69=((132.0)*sj25*sj26);
IkReal x70=((132.0)*cj25*cj26);
j27eval[0]=((((-1.0)*x67))+(((-1.0)*x66)));
j27eval[1]=((IKabs((((npy*x68))+(((-1.0)*npy*x69))+((npy*x70))+(((7.0)*npx)))))+(IKabs((((npx*x69))+(((-1.0)*npx*x70))+(((-1.0)*npx*x68))+(((7.0)*npy))))));
j27eval[2]=IKsign(((((-400.0)*x66))+(((-400.0)*x67))));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  || IKabs(j27eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j26)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j27eval[3];
sj26=1.0;
cj26=0;
j26=1.5707963267949;
IkReal x71=npy*npy;
IkReal x72=npx*npx;
IkReal x73=((132.0)*sj25);
j27eval[0]=(x72+x71);
j27eval[1]=IKsign(((((400.0)*x71))+(((400.0)*x72))));
j27eval[2]=((IKabs((((npy*x73))+(((-7.0)*npx)))))+(IKabs(((((-1.0)*npx*x73))+(((-7.0)*npy))))));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  || IKabs(j27eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j27]

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x74=((132.0)*sj25);
CheckValue<IkReal> x75 = IKatan2WithCheck(IkReal((((npy*x74))+(((-7.0)*npx)))),IkReal(((((-1.0)*npx*x74))+(((-7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x75.valid){
continue;
}
CheckValue<IkReal> x76=IKPowWithIntegerCheck(IKsign(((((400.0)*(npy*npy)))+(((400.0)*(npx*npx))))),-1);
if(!x76.valid){
continue;
}
j27array[0]=((-1.5707963267949)+(x75.value)+(((1.5707963267949)*(x76.value))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[2];
IkReal x77=IKcos(j27);
IkReal x78=IKsin(j27);
IkReal x79=((1.0)*npy);
evalcond[0]=((-0.0175)+(((-1.0)*x77*x79))+(((-1.0)*npx*x78)));
evalcond[1]=(((npx*x77))+(((-1.0)*x78*x79))+(((0.33)*sj25)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j26)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j27eval[3];
sj26=-1.0;
cj26=0;
j26=-1.5707963267949;
IkReal x796=npy*npy;
IkReal x797=npx*npx;
IkReal x798=((132.0)*sj25);
j27eval[0]=((((-1.0)*x796))+(((-1.0)*x797)));
j27eval[1]=((IKabs((((npy*x798))+(((7.0)*npx)))))+(IKabs(((((-1.0)*npx*x798))+(((7.0)*npy))))));
j27eval[2]=IKsign(((((-400.0)*x796))+(((-400.0)*x797))));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  || IKabs(j27eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j27]

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x799=((132.0)*sj25);
CheckValue<IkReal> x800=IKPowWithIntegerCheck(IKsign(((((-400.0)*(npy*npy)))+(((-400.0)*(npx*npx))))),-1);
if(!x800.valid){
continue;
}
CheckValue<IkReal> x801 = IKatan2WithCheck(IkReal((((npy*x799))+(((7.0)*npx)))),IkReal(((((-1.0)*npx*x799))+(((7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x801.valid){
continue;
}
j27array[0]=((-1.5707963267949)+(((1.5707963267949)*(x800.value)))+(x801.value));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[2];
IkReal x802=IKsin(j27);
IkReal x803=IKcos(j27);
IkReal x804=((1.0)*x803);
evalcond[0]=((-0.0175)+(((-1.0)*npx*x802))+(((-1.0)*npy*x804)));
evalcond[1]=(((npy*x802))+(((0.33)*sj25))+(((-1.0)*npx*x804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j26))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j27eval[3];
sj26=0;
cj26=1.0;
j26=0;
IkReal x805=npy*npy;
IkReal x806=npx*npx;
IkReal x807=((132.0)*cj25);
j27eval[0]=((((-1.0)*x805))+(((-1.0)*x806)));
j27eval[1]=((IKabs(((((-120.0)*npx))+(((7.0)*npy))+(((-1.0)*npx*x807)))))+(IKabs((((npy*x807))+(((120.0)*npy))+(((7.0)*npx))))));
j27eval[2]=IKsign(((((-400.0)*x806))+(((-400.0)*x805))));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  || IKabs(j27eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j27]

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x808=((132.0)*cj25);
CheckValue<IkReal> x809=IKPowWithIntegerCheck(IKsign(((((-400.0)*(npy*npy)))+(((-400.0)*(npx*npx))))),-1);
if(!x809.valid){
continue;
}
CheckValue<IkReal> x810 = IKatan2WithCheck(IkReal((((npy*x808))+(((120.0)*npy))+(((7.0)*npx)))),IkReal(((((-120.0)*npx))+(((7.0)*npy))+(((-1.0)*npx*x808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x810.valid){
continue;
}
j27array[0]=((-1.5707963267949)+(((1.5707963267949)*(x809.value)))+(x810.value));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[2];
IkReal x811=IKsin(j27);
IkReal x812=IKcos(j27);
IkReal x813=((1.0)*x812);
evalcond[0]=((-0.0175)+(((-1.0)*npy*x813))+(((-1.0)*npx*x811)));
evalcond[1]=((0.3)+(((-1.0)*npx*x813))+((npy*x811))+(((0.33)*cj25)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j26)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j27eval[3];
sj26=0;
cj26=-1.0;
j26=3.14159265358979;
IkReal x814=npy*npy;
IkReal x815=npx*npx;
IkReal x816=((132.0)*cj25);
j27eval[0]=(x814+x815);
j27eval[1]=((IKabs(((((-120.0)*npx))+(((-1.0)*npx*x816))+(((-7.0)*npy)))))+(IKabs(((((120.0)*npy))+((npy*x816))+(((-7.0)*npx))))));
j27eval[2]=IKsign(((((400.0)*x815))+(((400.0)*x814))));
if( IKabs(j27eval[0]) < 0.0000010000000000  || IKabs(j27eval[1]) < 0.0000010000000000  || IKabs(j27eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j27]

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x817=((132.0)*cj25);
CheckValue<IkReal> x818 = IKatan2WithCheck(IkReal(((((120.0)*npy))+((npy*x817))+(((-7.0)*npx)))),IkReal(((((-120.0)*npx))+(((-1.0)*npx*x817))+(((-7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x818.valid){
continue;
}
CheckValue<IkReal> x819=IKPowWithIntegerCheck(IKsign(((((400.0)*(npy*npy)))+(((400.0)*(npx*npx))))),-1);
if(!x819.valid){
continue;
}
j27array[0]=((-1.5707963267949)+(x818.value)+(((1.5707963267949)*(x819.value))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[2];
IkReal x820=IKcos(j27);
IkReal x821=IKsin(j27);
IkReal x822=((1.0)*npy);
evalcond[0]=((-0.0175)+(((-1.0)*x820*x822))+(((-1.0)*npx*x821)));
evalcond[1]=((0.3)+(((-1.0)*x821*x822))+(((0.33)*cj25))+((npx*x820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j27]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x823=((120.0)*cj26);
IkReal x824=((132.0)*sj25*sj26);
IkReal x825=((132.0)*cj25*cj26);
CheckValue<IkReal> x826=IKPowWithIntegerCheck(IKsign(((((-400.0)*(npy*npy)))+(((-400.0)*(npx*npx))))),-1);
if(!x826.valid){
continue;
}
CheckValue<IkReal> x827 = IKatan2WithCheck(IkReal(((((-1.0)*npy*x824))+((npy*x825))+((npy*x823))+(((7.0)*npx)))),IkReal(((((-1.0)*npx*x825))+(((-1.0)*npx*x823))+(((7.0)*npy))+((npx*x824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x827.valid){
continue;
}
j27array[0]=((-1.5707963267949)+(((1.5707963267949)*(x826.value)))+(x827.value));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x828=IKcos(j27);
IkReal x829=IKsin(j27);
IkReal x830=((1.0)*npz);
IkReal x831=((0.33)*sj25);
IkReal x832=((0.33)*cj25);
IkReal x833=(npy*x829);
IkReal x834=(npx*x828);
evalcond[0]=((-0.0175)+(((-1.0)*npy*x828))+(((-1.0)*npx*x829)));
evalcond[1]=((((-1.0)*cj26*x830))+((sj26*x834))+x831+(((-1.0)*sj26*x833)));
evalcond[2]=((0.3)+(((-1.0)*sj26*x830))+(((-1.0)*cj26*x834))+((cj26*x833))+x832);
evalcond[3]=((((-1.0)*sj26*x831))+((cj26*x832))+(((-1.0)*x834))+x833+(((0.3)*cj26)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x835=((400.0)*cj26);
IkReal x836=((7.0)*cj26);
IkReal x837=((132.0)*cj25);
IkReal x838=((400.0)*npz*sj26);
CheckValue<IkReal> x839=IKPowWithIntegerCheck(IKsign((((x835*(npy*npy)))+((x835*(npx*npx))))),-1);
if(!x839.valid){
continue;
}
CheckValue<IkReal> x840 = IKatan2WithCheck(IkReal(((((-1.0)*npx*x836))+(((-1.0)*npy*x837))+(((-120.0)*npy))+((npy*x838)))),IkReal(((((120.0)*npx))+(((-1.0)*npx*x838))+(((-1.0)*npy*x836))+((npx*x837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x840.valid){
continue;
}
j27array[0]=((-1.5707963267949)+(((1.5707963267949)*(x839.value)))+(x840.value));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x841=IKcos(j27);
IkReal x842=IKsin(j27);
IkReal x843=((1.0)*npz);
IkReal x844=((0.33)*sj25);
IkReal x845=((0.33)*cj25);
IkReal x846=(npy*x842);
IkReal x847=(npx*x841);
evalcond[0]=((-0.0175)+(((-1.0)*npx*x842))+(((-1.0)*npy*x841)));
evalcond[1]=((((-1.0)*sj26*x846))+(((-1.0)*cj26*x843))+((sj26*x847))+x844);
evalcond[2]=((0.3)+(((-1.0)*sj26*x843))+(((-1.0)*cj26*x847))+((cj26*x846))+x845);
evalcond[3]=((((-1.0)*sj26*x844))+((cj26*x845))+(((-1.0)*x847))+x846+(((0.3)*cj26)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x848=((400.0)*sj26);
IkReal x849=((132.0)*sj25);
IkReal x850=((7.0)*sj26);
IkReal x851=((400.0)*cj26*npz);
CheckValue<IkReal> x852 = IKatan2WithCheck(IkReal((((npy*x849))+(((-1.0)*npy*x851))+(((-1.0)*npx*x850)))),IkReal(((((-1.0)*npx*x849))+(((-1.0)*npy*x850))+((npx*x851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x852.valid){
continue;
}
CheckValue<IkReal> x853=IKPowWithIntegerCheck(IKsign((((x848*(npy*npy)))+((x848*(npx*npx))))),-1);
if(!x853.valid){
continue;
}
j27array[0]=((-1.5707963267949)+(x852.value)+(((1.5707963267949)*(x853.value))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x854=IKcos(j27);
IkReal x855=IKsin(j27);
IkReal x856=((1.0)*npz);
IkReal x857=((0.33)*sj25);
IkReal x858=((0.33)*cj25);
IkReal x859=(npy*x855);
IkReal x860=(npx*x854);
evalcond[0]=((-0.0175)+(((-1.0)*npx*x855))+(((-1.0)*npy*x854)));
evalcond[1]=(((sj26*x860))+(((-1.0)*sj26*x859))+(((-1.0)*cj26*x856))+x857);
evalcond[2]=((0.3)+(((-1.0)*cj26*x860))+((cj26*x859))+(((-1.0)*sj26*x856))+x858);
evalcond[3]=(((cj26*x858))+(((-1.0)*x860))+(((-1.0)*sj26*x857))+x859+(((0.3)*cj26)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j27array[2], cj27array[2], sj27array[2];
bool j27valid[2]={false};
_nj27 = 2;
CheckValue<IkReal> x863 = IKatan2WithCheck(IkReal(((-1.0)*npy)),IkReal(((-1.0)*npx)),IKFAST_ATAN2_MAGTHRESH);
if(!x863.valid){
continue;
}
IkReal x861=((1.0)*(x863.value));
if((((npx*npx)+(npy*npy))) < -0.00001)
continue;
CheckValue<IkReal> x864=IKPowWithIntegerCheck(IKabs(IKsqrt(((npx*npx)+(npy*npy)))),-1);
if(!x864.valid){
continue;
}
if( (((0.0175)*(x864.value))) < -1-IKFAST_SINCOS_THRESH || (((0.0175)*(x864.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x862=IKasin(((0.0175)*(x864.value)));
j27array[0]=((((-1.0)*x861))+x862);
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
j27array[1]=((3.14159265358979)+(((-1.0)*x861))+(((-1.0)*x862)));
sj27array[1]=IKsin(j27array[1]);
cj27array[1]=IKcos(j27array[1]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
if( j27array[1] > IKPI )
{
    j27array[1]-=IK2PI;
}
else if( j27array[1] < -IKPI )
{    j27array[1]+=IK2PI;
}
j27valid[1] = true;
for(int ij27 = 0; ij27 < 2; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 2; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];

{
IkReal j26eval[3];
IkReal x865=(npy*sj27);
IkReal x866=((3300.0)*sj25);
IkReal x867=(cj27*npx);
IkReal x868=((3300.0)*cj25);
j26eval[0]=((1.00454545454545)+cj25);
j26eval[1]=((IKabs(((((-1.0)*x865*x868))+(((3000.0)*x867))+((x867*x868))+(((-3000.0)*x865))+((npz*x866)))))+(IKabs(((((-1.0)*x866*x867))+(((3000.0)*npz))+((npz*x868))+((x865*x866))))));
j26eval[2]=IKsign(((1989.0)+(((1980.0)*cj25))));
if( IKabs(j26eval[0]) < 0.0000010000000000  || IKabs(j26eval[1]) < 0.0000010000000000  || IKabs(j26eval[2]) < 0.0000010000000000  )
{
{
IkReal j26eval[3];
IkReal x869=(npy*sj27);
IkReal x870=(npz*sj25);
IkReal x871=(cj27*npx);
IkReal x872=((100.0)*npz);
IkReal x873=(cj25*x871);
j26eval[0]=((((-1.1)*x873))+(((1.1)*x870))+(((-1.0)*x871))+(((1.1)*cj25*x869))+x869);
j26eval[1]=((IKabs(((-9.0)+(((-10.89)*(cj25*cj25)))+((npz*x872))+(((-19.8)*cj25)))))+(IKabs(((((-1.0)*x871*x872))+((x869*x872))+(((10.89)*cj25*sj25))+(((9.9)*sj25))))));
j26eval[2]=IKsign(((((-30.0)*x871))+(((-33.0)*x873))+(((30.0)*x869))+(((33.0)*x870))+(((33.0)*cj25*x869))));
if( IKabs(j26eval[0]) < 0.0000010000000000  || IKabs(j26eval[1]) < 0.0000010000000000  || IKabs(j26eval[2]) < 0.0000010000000000  )
{
{
IkReal j26eval[3];
IkReal x874=cj27*cj27;
IkReal x875=npy*npy;
IkReal x876=npz*npz;
IkReal x877=npx*npx;
IkReal x878=(npy*sj27);
IkReal x879=((33.0)*sj25);
IkReal x880=(cj27*npx);
IkReal x881=((33.0)*cj25);
IkReal x882=((33.0)*x880);
IkReal x883=(x874*x875);
IkReal x884=(x874*x877);
j26eval[0]=((((-1.0)*x883))+(((-2.0)*x878*x880))+x875+x876+x884);
j26eval[1]=((IKabs(((((-30.0)*x878))+((x880*x881))+(((30.0)*x880))+((npz*x879))+(((-1.0)*x878*x881)))))+(IKabs(((((-1.0)*x879*x880))+((x878*x879))+(((30.0)*npz))+((npz*x881))))));
j26eval[2]=IKsign(((((-100.0)*x883))+(((100.0)*x884))+(((-200.0)*x878*x880))+(((100.0)*x875))+(((100.0)*x876))));
if( IKabs(j26eval[0]) < 0.0000010000000000  || IKabs(j26eval[1]) < 0.0000010000000000  || IKabs(j26eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j26]

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x885=cj27*cj27;
IkReal x886=npy*npy;
IkReal x887=((33.0)*cj25);
IkReal x888=(cj27*npx);
IkReal x889=((33.0)*sj25);
IkReal x890=(npy*sj27);
IkReal x891=((100.0)*x885);
CheckValue<IkReal> x892 = IKatan2WithCheck(IkReal(((((30.0)*npz))+((npz*x887))+((x889*x890))+(((-1.0)*x888*x889)))),IkReal((((x887*x888))+((npz*x889))+(((30.0)*x888))+(((-30.0)*x890))+(((-1.0)*x887*x890)))),IKFAST_ATAN2_MAGTHRESH);
if(!x892.valid){
continue;
}
CheckValue<IkReal> x893=IKPowWithIntegerCheck(IKsign(((((100.0)*(npz*npz)))+(((100.0)*x886))+((x891*(npx*npx)))+(((-200.0)*x888*x890))+(((-1.0)*x886*x891)))),-1);
if(!x893.valid){
continue;
}
j26array[0]=((-1.5707963267949)+(x892.value)+(((1.5707963267949)*(x893.value))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x894=IKsin(j26);
IkReal x895=IKcos(j26);
IkReal x896=((0.33)*sj25);
IkReal x897=((1.0)*npz);
IkReal x898=((0.33)*cj25);
IkReal x899=(npy*sj27);
IkReal x900=((1.0)*cj27*npx);
evalcond[0]=(((x894*x898))+((x895*x896))+(((-1.0)*x897))+(((0.3)*x894)));
evalcond[1]=((((-1.0)*x895*x897))+((cj27*npx*x894))+(((-1.0)*x894*x899))+x896);
evalcond[2]=((0.3)+(((-1.0)*x895*x900))+((x895*x899))+(((-1.0)*x894*x897))+x898);
evalcond[3]=(((x895*x898))+(((-1.0)*x900))+(((0.3)*x895))+(((-1.0)*x894*x896))+x899);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x901=(cj27*npx);
IkReal x902=((33.0)*cj25);
IkReal x903=(npy*sj27);
IkReal x904=((100.0)*npz);
CheckValue<IkReal> x905=IKPowWithIntegerCheck(IKsign(((((-30.0)*x901))+(((33.0)*npz*sj25))+((x902*x903))+(((-1.0)*x901*x902))+(((30.0)*x903)))),-1);
if(!x905.valid){
continue;
}
CheckValue<IkReal> x906 = IKatan2WithCheck(IkReal((((x903*x904))+(((-1.0)*x901*x904))+(((10.89)*cj25*sj25))+(((9.9)*sj25)))),IkReal(((-9.0)+(((-10.89)*(cj25*cj25)))+((npz*x904))+(((-19.8)*cj25)))),IKFAST_ATAN2_MAGTHRESH);
if(!x906.valid){
continue;
}
j26array[0]=((-1.5707963267949)+(((1.5707963267949)*(x905.value)))+(x906.value));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x907=IKsin(j26);
IkReal x908=IKcos(j26);
IkReal x909=((0.33)*sj25);
IkReal x910=((1.0)*npz);
IkReal x911=((0.33)*cj25);
IkReal x912=(npy*sj27);
IkReal x913=((1.0)*cj27*npx);
evalcond[0]=((((-1.0)*x910))+((x907*x911))+(((0.3)*x907))+((x908*x909)));
evalcond[1]=(((cj27*npx*x907))+(((-1.0)*x908*x910))+(((-1.0)*x907*x912))+x909);
evalcond[2]=((0.3)+(((-1.0)*x908*x913))+((x908*x912))+(((-1.0)*x907*x910))+x911);
evalcond[3]=((((-1.0)*x913))+((x908*x911))+(((0.3)*x908))+x912+(((-1.0)*x907*x909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x914=(npy*sj27);
IkReal x915=((3300.0)*sj25);
IkReal x916=(cj27*npx);
IkReal x917=((3300.0)*cj25);
CheckValue<IkReal> x918 = IKatan2WithCheck(IkReal((((x914*x915))+(((3000.0)*npz))+((npz*x917))+(((-1.0)*x915*x916)))),IkReal(((((3000.0)*x916))+(((-3000.0)*x914))+(((-1.0)*x914*x917))+((x916*x917))+((npz*x915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x918.valid){
continue;
}
CheckValue<IkReal> x919=IKPowWithIntegerCheck(IKsign(((1989.0)+(((1980.0)*cj25)))),-1);
if(!x919.valid){
continue;
}
j26array[0]=((-1.5707963267949)+(x918.value)+(((1.5707963267949)*(x919.value))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x920=IKsin(j26);
IkReal x921=IKcos(j26);
IkReal x922=((0.33)*sj25);
IkReal x923=((1.0)*npz);
IkReal x924=((0.33)*cj25);
IkReal x925=(npy*sj27);
IkReal x926=((1.0)*cj27*npx);
evalcond[0]=((((-1.0)*x923))+((x920*x924))+(((0.3)*x920))+((x921*x922)));
evalcond[1]=((((-1.0)*x920*x925))+(((-1.0)*x921*x923))+x922+((cj27*npx*x920)));
evalcond[2]=((0.3)+(((-1.0)*x920*x923))+((x921*x925))+(((-1.0)*x921*x926))+x924);
evalcond[3]=((((-1.0)*x926))+(((-1.0)*x920*x922))+(((0.3)*x921))+((x921*x924))+x925);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x80=(cj26*r12);
IkReal x81=(cj26*r22);
IkReal x82=((1.0)*sj26);
IkReal x83=((1.0)*sj27);
IkReal x84=((1.0)*sj25);
IkReal x85=((-1.0)*sj26);
IkReal x86=(((cj27*r00))+(((-1.0)*r01*x83)));
IkReal x87=(((cj27*r10))+(((-1.0)*r11*x83)));
IkReal x88=(((cj27*r20))+(((-1.0)*r21*x83)));
IkReal x89=(sj26*x88);
IkReal x90=(((cj26*x86))+((r02*sj26)));
IkReal x91=(((cj26*x87))+((r12*sj26)));
IkReal x92=(((r22*sj26))+((cj26*x88)));
IkReal x93=(((x85*x86))+((cj26*r02)));
new_r00=(((cj25*x93))+(((-1.0)*x84*x90)));
new_r01=(((cj25*x90))+((sj25*x93)));
new_r02=(((r00*sj27))+((cj27*r01)));
new_r10=(((cj25*(((((-1.0)*x82*x87))+x80))))+(((-1.0)*x84*x91)));
new_r11=(((cj25*x91))+((sj25*((((x85*x87))+x80)))));
new_r12=(((cj27*r11))+((r10*sj27)));
new_r20=(((cj25*(((((-1.0)*x82*x88))+x81))))+(((-1.0)*x84*x92)));
new_r21=(((cj25*x92))+((sj25*((((x85*x88))+x81)))));
new_r22=(((cj27*r21))+((r20*sj27)));
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
sj23array[0]=new_r22;
if( sj23array[0] >= -1-IKFAST_SINCOS_THRESH && sj23array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j23valid[0] = j23valid[1] = true;
    j23array[0] = IKasin(sj23array[0]);
    cj23array[0] = IKcos(j23array[0]);
    sj23array[1] = sj23array[0];
    j23array[1] = j23array[0] > 0 ? (IKPI-j23array[0]) : (-IKPI-j23array[0]);
    cj23array[1] = -cj23array[0];
}
else if( isnan(sj23array[0]) )
{
    // probably any value will work
    j23valid[0] = true;
    cj23array[0] = 1; sj23array[0] = 0; j23array[0] = 0;
}
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];

{
IkReal j24eval[3];
j24eval[0]=cj23;
j24eval[1]=IKsign(cj23);
j24eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
j22eval[0]=cj23;
j22eval[1]=IKsign(cj23);
j22eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[2];
j22eval[0]=cj23;
j22eval[1]=new_r02;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j24mul = 1;
j24=0;
j22mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].fmul = j22mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].fmul = j24mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j24mul = 1;
j24=0;
j22mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].fmul = j22mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].fmul = j24mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x94=new_r22*new_r22;
IkReal x95=((16.0)*new_r10);
IkReal x96=((16.0)*new_r01);
IkReal x97=((16.0)*new_r00);
IkReal x98=(new_r11*new_r22);
IkReal x99=((8.0)*new_r00);
IkReal x100=(x94*x95);
IkReal x101=(x94*x96);
j22eval[0]=((IKabs(((((-1.0)*x101))+x96)))+(IKabs((x100+(((-1.0)*x95)))))+(IKabs((((new_r22*x99))+(((-8.0)*new_r11)))))+(IKabs((x101+(((-1.0)*x96)))))+(IKabs(((((-1.0)*x100))+x95)))+(IKabs(((((-32.0)*new_r11*x94))+((new_r22*x97))+(((16.0)*new_r11)))))+(IKabs(((((-8.0)*x98))+((x94*x99)))))+(IKabs(((((32.0)*new_r00))+(((-1.0)*x94*x97))+(((-16.0)*x98))))));
if( IKabs(j22eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j22, j24]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j22evalpoly[1];
IkReal x102=new_r22*new_r22;
IkReal x103=((16.0)*new_r01);
IkReal x104=(new_r00*new_r22);
IkReal x105=(x102*x103);
IkReal x106=((((8.0)*x104))+(((-8.0)*new_r11)));
op[0]=x106;
op[1]=((((-1.0)*x103))+x105);
op[2]=((((-32.0)*new_r11*x102))+(((16.0)*x104))+(((16.0)*new_r11)));
op[3]=((((-1.0)*x105))+x103);
op[4]=x106;
polyroots4(op,zeror,numroots);
IkReal j22array[4], cj22array[4], sj22array[4], tempj22array[1];
int numsolutions = 0;
for(int ij22 = 0; ij22 < numroots; ++ij22)
{
IkReal htj22 = zeror[ij22];
tempj22array[0]=((2.0)*(atan(htj22)));
for(int kj22 = 0; kj22 < 1; ++kj22)
{
j22array[numsolutions] = tempj22array[kj22];
if( j22array[numsolutions] > IKPI )
{
    j22array[numsolutions]-=IK2PI;
}
else if( j22array[numsolutions] < -IKPI )
{
    j22array[numsolutions]+=IK2PI;
}
sj22array[numsolutions] = IKsin(j22array[numsolutions]);
cj22array[numsolutions] = IKcos(j22array[numsolutions]);
numsolutions++;
}
}
bool j22valid[4]={true,true,true,true};
_nj22 = 4;
for(int ij22 = 0; ij22 < numsolutions; ++ij22)
    {
if( !j22valid[ij22] )
{
    continue;
}
    j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
htj22 = IKtan(j22/2);

IkReal x107=new_r22*new_r22;
IkReal x108=((16.0)*new_r10);
IkReal x109=(new_r11*new_r22);
IkReal x110=((8.0)*x109);
IkReal x111=(new_r00*x107);
IkReal x112=((8.0)*x111);
IkReal x113=(x107*x108);
j22evalpoly[0]=((((-1.0)*x110))+((htj22*(((((-1.0)*x108))+x113))))+x112+(((htj22*htj22*htj22*htj22)*(((((-1.0)*x110))+x112))))+(((htj22*htj22)*(((((32.0)*new_r00))+(((-16.0)*x111))+(((-16.0)*x109))))))+(((htj22*htj22*htj22)*(((((-1.0)*x113))+x108)))));
if( IKabs(j22evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < numsolutions; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
{
IkReal j24eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x114=new_r22*new_r22;
IkReal x115=cj22*cj22;
IkReal x116=(new_r22*sj22);
IkReal x117=(((x114*x115))+(((-1.0)*x114))+(((-1.0)*x115)));
j24eval[0]=x117;
j24eval[1]=IKsign(x117);
j24eval[2]=((IKabs(((((-1.0)*cj22*new_r00))+((new_r01*x116)))))+(IKabs((((cj22*new_r01))+((new_r00*x116))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal j24eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j24eval[0]=new_r22;
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal j24eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j24eval[0]=cj22;
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j22)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[4];
IkReal x118=IKsin(j24);
IkReal x119=IKcos(j24);
evalcond[0]=x118;
evalcond[1]=x119;
evalcond[2]=(x118+new_r11);
evalcond[3]=(new_r10+(((-1.0)*x119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j22)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[4];
IkReal x120=IKsin(j24);
IkReal x121=IKcos(j24);
evalcond[0]=x120;
evalcond[1]=x121;
evalcond[2]=(x120+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x122=new_r22*new_r22;
CheckValue<IkReal> x123=IKPowWithIntegerCheck(((-1.0)+x122),-1);
if(!x123.valid){
continue;
}
if(((x122*(x123.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x122*(x123.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj22)))))+(IKabs(((((-1.0)*gconst6))+cj22)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
IkReal x124=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
sj22=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
cj22=gconst6;
if( (gconst6) < -1-IKFAST_SINCOS_THRESH || (gconst6) > 1+IKFAST_SINCOS_THRESH )
    continue;
j22=IKacos(gconst6);
CheckValue<IkReal> x125=IKPowWithIntegerCheck(((-1.0)+x124),-1);
if(!x125.valid){
continue;
}
if(((x124*(x125.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x124*(x125.value)));
j24eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
CheckValue<IkReal> x126=IKPowWithIntegerCheck(gconst6,-1);
if(!x126.valid){
continue;
}
if( IKabs(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x126.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))))+IKsqr((new_r00*(x126.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))), (new_r00*(x126.value)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x127=IKsin(j24);
IkReal x128=IKcos(j24);
IkReal x129=((1.0)*x128);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x130=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
evalcond[0]=x127;
evalcond[1]=x128;
evalcond[2]=(((gconst6*x127))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x129))+new_r00);
evalcond[4]=(((x127*x130))+new_r11);
evalcond[5]=((((-1.0)*x129*x130))+new_r10);
evalcond[6]=(((gconst6*new_r01))+x127+((new_r11*x130)));
evalcond[7]=(((gconst6*new_r00))+(((-1.0)*x129))+((new_r10*x130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x131 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x131.valid){
continue;
}
CheckValue<IkReal> x132=IKPowWithIntegerCheck(IKsign(gconst6),-1);
if(!x132.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(x131.value)+(((1.5707963267949)*(x132.value))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x133=IKsin(j24);
IkReal x134=IKcos(j24);
IkReal x135=((1.0)*x134);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x136=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
evalcond[0]=x133;
evalcond[1]=x134;
evalcond[2]=(((gconst6*x133))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x135))+new_r00);
evalcond[4]=(((x133*x136))+new_r11);
evalcond[5]=((((-1.0)*x135*x136))+new_r10);
evalcond[6]=(((gconst6*new_r01))+x133+((new_r11*x136)));
evalcond[7]=(((gconst6*new_r00))+(((-1.0)*x135))+((new_r10*x136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x137=new_r22*new_r22;
CheckValue<IkReal> x138=IKPowWithIntegerCheck(((-1.0)+x137),-1);
if(!x138.valid){
continue;
}
if(((x137*(x138.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x137*(x138.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj22)))))+(IKabs(((((-1.0)*gconst6))+cj22)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
IkReal x139=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
sj22=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))));
cj22=gconst6;
if( (gconst6) < -1-IKFAST_SINCOS_THRESH || (gconst6) > 1+IKFAST_SINCOS_THRESH )
    continue;
j22=((-1.0)*(IKacos(gconst6)));
CheckValue<IkReal> x140=IKPowWithIntegerCheck(((-1.0)+x139),-1);
if(!x140.valid){
continue;
}
if(((x139*(x140.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x139*(x140.value)));
j24eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
CheckValue<IkReal> x141=IKPowWithIntegerCheck(gconst6,-1);
if(!x141.valid){
continue;
}
if( IKabs(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x141.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))))+IKsqr((new_r00*(x141.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))), (new_r00*(x141.value)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x142=IKsin(j24);
IkReal x143=IKcos(j24);
IkReal x144=((1.0)*x143);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x145=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
IkReal x146=((1.0)*x145);
evalcond[0]=x142;
evalcond[1]=x143;
evalcond[2]=(((gconst6*x142))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x144))+new_r00);
evalcond[4]=(new_r10+((x143*x145)));
evalcond[5]=((((-1.0)*x142*x146))+new_r11);
evalcond[6]=(((gconst6*new_r01))+(((-1.0)*new_r11*x146))+x142);
evalcond[7]=((((-1.0)*x144))+((gconst6*new_r00))+(((-1.0)*new_r10*x146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x147 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x147.valid){
continue;
}
CheckValue<IkReal> x148=IKPowWithIntegerCheck(IKsign(gconst6),-1);
if(!x148.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(x147.value)+(((1.5707963267949)*(x148.value))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x149=IKsin(j24);
IkReal x150=IKcos(j24);
IkReal x151=((1.0)*x150);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x152=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
IkReal x153=((1.0)*x152);
evalcond[0]=x149;
evalcond[1]=x150;
evalcond[2]=(((gconst6*x149))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x151))+new_r00);
evalcond[4]=(((x150*x152))+new_r10);
evalcond[5]=(new_r11+(((-1.0)*x149*x153)));
evalcond[6]=(((gconst6*new_r01))+x149+(((-1.0)*new_r11*x153)));
evalcond[7]=((((-1.0)*x151))+((gconst6*new_r00))+(((-1.0)*new_r10*x153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x154=new_r22*new_r22;
CheckValue<IkReal> x155=IKPowWithIntegerCheck(((-1.0)+x154),-1);
if(!x155.valid){
continue;
}
if(((x154*(x155.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x154*(x155.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst7))+cj22)))+(IKabs(((-1.0)+(IKsign(sj22)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
IkReal x156=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
sj22=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
cj22=gconst7;
if( (gconst7) < -1-IKFAST_SINCOS_THRESH || (gconst7) > 1+IKFAST_SINCOS_THRESH )
    continue;
j22=IKacos(gconst7);
CheckValue<IkReal> x157=IKPowWithIntegerCheck(((-1.0)+x156),-1);
if(!x157.valid){
continue;
}
if(((x156*(x157.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x156*(x157.value)))));
j24eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
CheckValue<IkReal> x158=IKPowWithIntegerCheck(gconst7,-1);
if(!x158.valid){
continue;
}
if( IKabs(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x158.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))))+IKsqr((new_r00*(x158.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))), (new_r00*(x158.value)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x159=IKsin(j24);
IkReal x160=IKcos(j24);
IkReal x161=((1.0)*x160);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x162=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
evalcond[0]=x159;
evalcond[1]=x160;
evalcond[2]=(new_r01+((gconst7*x159)));
evalcond[3]=((((-1.0)*gconst7*x161))+new_r00);
evalcond[4]=(new_r11+((x159*x162)));
evalcond[5]=((((-1.0)*x161*x162))+new_r10);
evalcond[6]=(((new_r11*x162))+x159+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x161))+((new_r10*x162))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x163 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x163.valid){
continue;
}
CheckValue<IkReal> x164=IKPowWithIntegerCheck(IKsign(gconst7),-1);
if(!x164.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(x163.value)+(((1.5707963267949)*(x164.value))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x165=IKsin(j24);
IkReal x166=IKcos(j24);
IkReal x167=((1.0)*x166);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x168=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
evalcond[0]=x165;
evalcond[1]=x166;
evalcond[2]=(((gconst7*x165))+new_r01);
evalcond[3]=((((-1.0)*gconst7*x167))+new_r00);
evalcond[4]=(((x165*x168))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x167*x168)));
evalcond[6]=(((new_r11*x168))+x165+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x167))+((new_r10*x168))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x169=new_r22*new_r22;
CheckValue<IkReal> x170=IKPowWithIntegerCheck(((-1.0)+x169),-1);
if(!x170.valid){
continue;
}
if(((x169*(x170.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x169*(x170.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst7))+cj22)))+(IKabs(((1.0)+(IKsign(sj22)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
IkReal x171=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
sj22=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))))));
cj22=gconst7;
if( (gconst7) < -1-IKFAST_SINCOS_THRESH || (gconst7) > 1+IKFAST_SINCOS_THRESH )
    continue;
j22=((-1.0)*(IKacos(gconst7)));
CheckValue<IkReal> x172=IKPowWithIntegerCheck(((-1.0)+x171),-1);
if(!x172.valid){
continue;
}
if(((x171*(x172.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x171*(x172.value)))));
j24eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
CheckValue<IkReal> x173=IKPowWithIntegerCheck(gconst7,-1);
if(!x173.valid){
continue;
}
if( IKabs((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x173.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01))))+IKsqr((new_r00*(x173.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01))), (new_r00*(x173.value)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x174=IKsin(j24);
IkReal x175=IKcos(j24);
IkReal x176=((1.0)*x175);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x177=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
IkReal x178=((1.0)*x177);
evalcond[0]=x174;
evalcond[1]=x175;
evalcond[2]=(((gconst7*x174))+new_r01);
evalcond[3]=((((-1.0)*gconst7*x176))+new_r00);
evalcond[4]=(((x175*x177))+new_r10);
evalcond[5]=((((-1.0)*x174*x178))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x178))+x174+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x176))+(((-1.0)*new_r10*x178))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x179 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x179.valid){
continue;
}
CheckValue<IkReal> x180=IKPowWithIntegerCheck(IKsign(gconst7),-1);
if(!x180.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(x179.value)+(((1.5707963267949)*(x180.value))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x181=IKsin(j24);
IkReal x182=IKcos(j24);
IkReal x183=((1.0)*x182);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x184=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
IkReal x185=((1.0)*x184);
evalcond[0]=x181;
evalcond[1]=x182;
evalcond[2]=(new_r01+((gconst7*x181)));
evalcond[3]=(new_r00+(((-1.0)*gconst7*x183)));
evalcond[4]=(new_r10+((x182*x184)));
evalcond[5]=(new_r11+(((-1.0)*x181*x185)));
evalcond[6]=(x181+(((-1.0)*new_r11*x185))+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x183))+(((-1.0)*new_r10*x185))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j24]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x186=((1.0)*new_r22);
IkReal x187=(cj22*new_r01);
CheckValue<IkReal> x188=IKPowWithIntegerCheck(cj22,-1);
if(!x188.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*sj22))+(((-1.0)*x187)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x188.value)*((((new_r11*new_r22*(cj22*cj22)))+(((-1.0)*sj22*x186*x187))+(((-1.0)*new_r11*x186))+new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj22))+(((-1.0)*x187))))+IKsqr(((x188.value)*((((new_r11*new_r22*(cj22*cj22)))+(((-1.0)*sj22*x186*x187))+(((-1.0)*new_r11*x186))+new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*new_r11*sj22))+(((-1.0)*x187))), ((x188.value)*((((new_r11*new_r22*(cj22*cj22)))+(((-1.0)*sj22*x186*x187))+(((-1.0)*new_r11*x186))+new_r00))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[10];
IkReal x189=IKsin(j24);
IkReal x190=IKcos(j24);
IkReal x191=(new_r22*sj22);
IkReal x192=(cj22*new_r10);
IkReal x193=((1.0)*new_r22);
IkReal x194=((1.0)*sj22);
IkReal x195=(cj22*new_r11);
IkReal x196=((1.0)*x190);
IkReal x197=(cj22*x189);
evalcond[0]=(((cj22*new_r01))+x189+((new_r11*sj22)));
evalcond[1]=(((cj22*new_r00))+(((-1.0)*x196))+((new_r10*sj22)));
evalcond[2]=(x197+((x190*x191))+new_r01);
evalcond[3]=((((-1.0)*x192*x193))+((new_r00*x191))+x189);
evalcond[4]=(((new_r01*x191))+x190+(((-1.0)*x193*x195)));
evalcond[5]=((((-1.0)*cj22*x196))+((x189*x191))+new_r00);
evalcond[6]=(((sj22*x189))+(((-1.0)*cj22*x190*x193))+new_r11);
evalcond[7]=((((-1.0)*x189*x193))+x192+(((-1.0)*new_r00*x194)));
evalcond[8]=((((-1.0)*x190*x193))+x195+(((-1.0)*new_r01*x194)));
evalcond[9]=((((-1.0)*x190*x194))+new_r10+(((-1.0)*x193*x197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x198=((1.0)*new_r01);
CheckValue<IkReal> x199=IKPowWithIntegerCheck(new_r22,-1);
if(!x199.valid){
continue;
}
if( IKabs(((((-1.0)*cj22*x198))+(((-1.0)*new_r11*sj22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x199.value)*(((((-1.0)*sj22*x198))+((cj22*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj22*x198))+(((-1.0)*new_r11*sj22))))+IKsqr(((x199.value)*(((((-1.0)*sj22*x198))+((cj22*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*cj22*x198))+(((-1.0)*new_r11*sj22))), ((x199.value)*(((((-1.0)*sj22*x198))+((cj22*new_r11))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[10];
IkReal x200=IKsin(j24);
IkReal x201=IKcos(j24);
IkReal x202=(new_r22*sj22);
IkReal x203=(cj22*new_r10);
IkReal x204=((1.0)*new_r22);
IkReal x205=((1.0)*sj22);
IkReal x206=(cj22*new_r11);
IkReal x207=((1.0)*x201);
IkReal x208=(cj22*x200);
evalcond[0]=(((cj22*new_r01))+x200+((new_r11*sj22)));
evalcond[1]=(((cj22*new_r00))+(((-1.0)*x207))+((new_r10*sj22)));
evalcond[2]=(((x201*x202))+x208+new_r01);
evalcond[3]=((((-1.0)*x203*x204))+((new_r00*x202))+x200);
evalcond[4]=((((-1.0)*x204*x206))+((new_r01*x202))+x201);
evalcond[5]=((((-1.0)*cj22*x207))+((x200*x202))+new_r00);
evalcond[6]=(((sj22*x200))+(((-1.0)*cj22*x201*x204))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x205))+(((-1.0)*x200*x204))+x203);
evalcond[8]=((((-1.0)*x201*x204))+x206+(((-1.0)*new_r01*x205)));
evalcond[9]=((((-1.0)*x204*x208))+(((-1.0)*x201*x205))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x209=new_r22*new_r22;
IkReal x210=cj22*cj22;
IkReal x211=(new_r22*sj22);
CheckValue<IkReal> x212 = IKatan2WithCheck(IkReal((((cj22*new_r01))+((new_r00*x211)))),IkReal(((((-1.0)*cj22*new_r00))+((new_r01*x211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x212.valid){
continue;
}
CheckValue<IkReal> x213=IKPowWithIntegerCheck(IKsign((((x209*x210))+(((-1.0)*x210))+(((-1.0)*x209)))),-1);
if(!x213.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(x212.value)+(((1.5707963267949)*(x213.value))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[10];
IkReal x214=IKsin(j24);
IkReal x215=IKcos(j24);
IkReal x216=(new_r22*sj22);
IkReal x217=(cj22*new_r10);
IkReal x218=((1.0)*new_r22);
IkReal x219=((1.0)*sj22);
IkReal x220=(cj22*new_r11);
IkReal x221=((1.0)*x215);
IkReal x222=(cj22*x214);
evalcond[0]=(((cj22*new_r01))+x214+((new_r11*sj22)));
evalcond[1]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x221)));
evalcond[2]=(((x215*x216))+x222+new_r01);
evalcond[3]=(x214+(((-1.0)*x217*x218))+((new_r00*x216)));
evalcond[4]=(x215+(((-1.0)*x218*x220))+((new_r01*x216)));
evalcond[5]=(((x214*x216))+(((-1.0)*cj22*x221))+new_r00);
evalcond[6]=((((-1.0)*cj22*x215*x218))+((sj22*x214))+new_r11);
evalcond[7]=(x217+(((-1.0)*x214*x218))+(((-1.0)*new_r00*x219)));
evalcond[8]=(x220+(((-1.0)*new_r01*x219))+(((-1.0)*x215*x218)));
evalcond[9]=((((-1.0)*x218*x222))+new_r10+(((-1.0)*x215*x219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j22, j24]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x224=IKPowWithIntegerCheck(cj23,-1);
if(!x224.valid){
continue;
}
IkReal x223=x224.value;
CheckValue<IkReal> x225=IKPowWithIntegerCheck(new_r02,-1);
if(!x225.valid){
continue;
}
CheckValue<IkReal> x226=IKPowWithIntegerCheck(x223,-2);
if(!x226.valid){
continue;
}
if( IKabs((x223*(x225.value)*(((x226.value)+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x223)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x223*(x225.value)*(((x226.value)+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x223))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((x223*(x225.value)*(((x226.value)+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x223));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x227=IKsin(j22);
IkReal x228=IKcos(j22);
IkReal x229=((1.0)*new_r12);
IkReal x230=(new_r02*x227);
IkReal x231=(cj23*x228);
IkReal x232=(cj23*x227);
evalcond[0]=(x231+new_r12);
evalcond[1]=(new_r02+(((-1.0)*x232)));
evalcond[2]=(((new_r02*x228))+((new_r12*x227)));
evalcond[3]=(cj23+((new_r12*x228))+(((-1.0)*x230)));
evalcond[4]=(((new_r00*x232))+((new_r20*sj23))+(((-1.0)*new_r10*x231)));
evalcond[5]=(((new_r21*sj23))+((new_r01*x232))+(((-1.0)*new_r11*x231)));
evalcond[6]=((((-1.0)*cj23*new_r22))+((sj23*x230))+(((-1.0)*sj23*x228*x229)));
evalcond[7]=((-1.0)+((cj23*x230))+(((-1.0)*x229*x231))+((new_r22*sj23)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j24eval[3];
j24eval[0]=cj23;
j24eval[1]=IKsign(cj23);
j24eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal j24eval[2];
j24eval[0]=cj23;
j24eval[1]=cj22;
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  )
{
{
IkReal j24eval[3];
j24eval[0]=cj23;
j24eval[1]=sj22;
j24eval[2]=sj23;
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x233=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r00*sj22))+(((-1.0)*cj22*x233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj22*new_r00))+(((-1.0)*sj22*x233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*sj22))+(((-1.0)*cj22*x233))))+IKsqr((((cj22*new_r00))+(((-1.0)*sj22*x233))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*new_r00*sj22))+(((-1.0)*cj22*x233))), (((cj22*new_r00))+(((-1.0)*sj22*x233))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x234=IKsin(j24);
IkReal x235=IKcos(j24);
IkReal x236=((1.0)*sj22);
IkReal x237=(sj22*x234);
IkReal x238=((1.0)*x235);
IkReal x239=((1.0)*x234);
IkReal x240=(cj22*x238);
evalcond[0]=(((cj22*new_r01))+x234+((new_r11*sj22)));
evalcond[1]=(((cj22*new_r00))+(((-1.0)*x238))+((new_r10*sj22)));
evalcond[2]=(((sj22*x235))+new_r01+((cj22*x234)));
evalcond[3]=(x237+(((-1.0)*x240))+new_r00);
evalcond[4]=(x237+(((-1.0)*x240))+new_r11);
evalcond[5]=((((-1.0)*x239))+(((-1.0)*new_r00*x236))+((cj22*new_r10)));
evalcond[6]=((((-1.0)*x238))+(((-1.0)*new_r01*x236))+((cj22*new_r11)));
evalcond[7]=((((-1.0)*x235*x236))+new_r10+(((-1.0)*cj22*x239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x241=((1.0)*cj22);
if( IKabs(((((-1.0)*new_r11*sj22))+(((-1.0)*new_r01*x241)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj22))+(((-1.0)*new_r11*x241)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj22))+(((-1.0)*new_r01*x241))))+IKsqr((((new_r01*sj22))+(((-1.0)*new_r11*x241))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*new_r11*sj22))+(((-1.0)*new_r01*x241))), (((new_r01*sj22))+(((-1.0)*new_r11*x241))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x242=IKsin(j24);
IkReal x243=IKcos(j24);
IkReal x244=((1.0)*sj22);
IkReal x245=(cj22*x242);
IkReal x246=((1.0)*x243);
IkReal x247=(x243*x244);
evalcond[0]=(((cj22*new_r01))+x242+((new_r11*sj22)));
evalcond[1]=((((-1.0)*new_r00*x244))+x242+((cj22*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x244))+x243+((cj22*new_r11)));
evalcond[3]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x246)));
evalcond[4]=(((sj22*x242))+new_r11+((cj22*x243)));
evalcond[5]=(x245+(((-1.0)*x247))+new_r01);
evalcond[6]=(x245+(((-1.0)*x247))+new_r10);
evalcond[7]=((((-1.0)*x242*x244))+(((-1.0)*cj22*x246))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j22))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x248=IKsin(j24);
IkReal x249=IKcos(j24);
IkReal x250=((1.0)*sj23);
IkReal x251=((1.0)*cj23);
IkReal x252=((1.0)*x249);
evalcond[0]=(x248+new_r01);
evalcond[1]=(new_r00+(((-1.0)*x252)));
evalcond[2]=((((-1.0)*x248*x251))+new_r20);
evalcond[3]=((((-1.0)*x249*x251))+new_r21);
evalcond[4]=((((-1.0)*x249*x250))+new_r11);
evalcond[5]=((((-1.0)*x248*x250))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x250))+x248+(((-1.0)*new_r20*x251)));
evalcond[7]=((((-1.0)*new_r21*x251))+(((-1.0)*new_r11*x250))+x249);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j22)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x253=IKsin(j24);
IkReal x254=IKcos(j24);
IkReal x255=((1.0)*cj23);
IkReal x256=((1.0)*x254);
IkReal x257=((1.0)*x253);
evalcond[0]=(x253+(((-1.0)*new_r01)));
evalcond[1]=(((sj23*x254))+new_r11);
evalcond[2]=(new_r20+(((-1.0)*x253*x255)));
evalcond[3]=((((-1.0)*x254*x255))+new_r21);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x256)));
evalcond[5]=((((-1.0)*sj23*x257))+(((-1.0)*new_r10)));
evalcond[6]=(x253+((new_r10*sj23))+(((-1.0)*new_r20*x255)));
evalcond[7]=((((-1.0)*new_r21*x255))+x254+((new_r11*sj23)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j23))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(new_r20, new_r21);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x258=IKsin(j24);
IkReal x259=IKcos(j24);
IkReal x260=((1.0)*x259);
evalcond[0]=(new_r20+(((-1.0)*x258)));
evalcond[1]=(new_r21+(((-1.0)*x260)));
evalcond[2]=(((cj22*x258))+new_r01);
evalcond[3]=(((sj22*x258))+new_r11);
evalcond[4]=((((-1.0)*cj22*x260))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*sj22*x260)));
evalcond[6]=(((cj22*new_r01))+x258+((new_r11*sj22)));
evalcond[7]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j23)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x261=IKsin(j24);
IkReal x262=IKcos(j24);
IkReal x263=((1.0)*x262);
evalcond[0]=(x261+new_r20);
evalcond[1]=(x262+new_r21);
evalcond[2]=(((cj22*x261))+new_r01);
evalcond[3]=(((sj22*x261))+new_r11);
evalcond[4]=((((-1.0)*cj22*x263))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*sj22*x263)));
evalcond[6]=(((cj22*new_r01))+x261+((new_r11*sj22)));
evalcond[7]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j22)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x264=IKcos(j24);
IkReal x265=IKsin(j24);
IkReal x266=((1.0)*cj23);
IkReal x267=((1.0)*x264);
evalcond[0]=(x265+new_r11);
evalcond[1]=(new_r10+(((-1.0)*x267)));
evalcond[2]=(((sj23*x264))+new_r01);
evalcond[3]=(((sj23*x265))+new_r00);
evalcond[4]=((((-1.0)*x265*x266))+new_r20);
evalcond[5]=(new_r21+(((-1.0)*x264*x266)));
evalcond[6]=(((new_r00*sj23))+x265+(((-1.0)*new_r20*x266)));
evalcond[7]=(((new_r01*sj23))+(((-1.0)*new_r21*x266))+x264);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j22)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x268=IKsin(j24);
IkReal x269=IKcos(j24);
IkReal x270=((1.0)*cj23);
IkReal x271=((1.0)*sj23);
IkReal x272=((1.0)*x269);
evalcond[0]=(x268+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*x268*x270))+new_r20);
evalcond[2]=((((-1.0)*x269*x270))+new_r21);
evalcond[3]=((((-1.0)*x269*x271))+new_r01);
evalcond[4]=((((-1.0)*x268*x271))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x272)));
evalcond[6]=((((-1.0)*new_r00*x271))+x268+(((-1.0)*new_r20*x270)));
evalcond[7]=((((-1.0)*new_r01*x271))+(((-1.0)*new_r21*x270))+x269);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j24eval[0]=IKabs(new_r22);
if( IKabs(j24eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j24]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
IkReal j24array[2], cj24array[2], sj24array[2], tempj24array[1];
int numsolutions = 0;
for(int ij24 = 0; ij24 < numroots; ++ij24)
{
IkReal htj24 = zeror[ij24];
tempj24array[0]=((2.0)*(atan(htj24)));
for(int kj24 = 0; kj24 < 1; ++kj24)
{
j24array[numsolutions] = tempj24array[kj24];
if( j24array[numsolutions] > IKPI )
{
    j24array[numsolutions]-=IK2PI;
}
else if( j24array[numsolutions] < -IKPI )
{
    j24array[numsolutions]+=IK2PI;
}
sj24array[numsolutions] = IKsin(j24array[numsolutions]);
cj24array[numsolutions] = IKcos(j24array[numsolutions]);
numsolutions++;
}
}
bool j24valid[2]={true,true};
_nj24 = 2;
for(int ij24 = 0; ij24 < numsolutions; ++ij24)
    {
if( !j24valid[ij24] )
{
    continue;
}
    j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
htj24 = IKtan(j24/2);

_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < numsolutions; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j24]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x274=IKPowWithIntegerCheck(cj23,-1);
if(!x274.valid){
continue;
}
IkReal x273=x274.value;
CheckValue<IkReal> x275=IKPowWithIntegerCheck(sj22,-1);
if(!x275.valid){
continue;
}
CheckValue<IkReal> x276=IKPowWithIntegerCheck(sj23,-1);
if(!x276.valid){
continue;
}
if( IKabs((new_r20*x273)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x273*(x275.value)*(x276.value)*(((((-1.0)*cj23*new_r01))+(((-1.0)*cj22*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x273))+IKsqr((x273*(x275.value)*(x276.value)*(((((-1.0)*cj23*new_r01))+(((-1.0)*cj22*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2((new_r20*x273), (x273*(x275.value)*(x276.value)*(((((-1.0)*cj23*new_r01))+(((-1.0)*cj22*new_r20))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x277=IKsin(j24);
IkReal x278=IKcos(j24);
IkReal x279=(sj22*sj23);
IkReal x280=(cj22*new_r10);
IkReal x281=((1.0)*sj22);
IkReal x282=(cj22*new_r11);
IkReal x283=((1.0)*sj23);
IkReal x284=((1.0)*cj23);
IkReal x285=((1.0)*x278);
IkReal x286=(cj22*x277);
evalcond[0]=((((-1.0)*x277*x284))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x278*x284)));
evalcond[2]=(((cj22*new_r01))+x277+((new_r11*sj22)));
evalcond[3]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x285)));
evalcond[4]=(x286+((x278*x279))+new_r01);
evalcond[5]=(((x277*x279))+(((-1.0)*cj22*x285))+new_r00);
evalcond[6]=(((sj22*x277))+(((-1.0)*cj22*x278*x283))+new_r11);
evalcond[7]=((((-1.0)*x277*x283))+(((-1.0)*new_r00*x281))+x280);
evalcond[8]=(x282+(((-1.0)*new_r01*x281))+(((-1.0)*x278*x283)));
evalcond[9]=(new_r10+(((-1.0)*x278*x281))+(((-1.0)*x283*x286)));
evalcond[10]=((((-1.0)*x280*x283))+x277+((new_r00*x279))+(((-1.0)*new_r20*x284)));
evalcond[11]=(x278+(((-1.0)*x282*x283))+((new_r01*x279))+(((-1.0)*new_r21*x284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x288=IKPowWithIntegerCheck(cj23,-1);
if(!x288.valid){
continue;
}
IkReal x287=x288.value;
CheckValue<IkReal> x289=IKPowWithIntegerCheck(cj22,-1);
if(!x289.valid){
continue;
}
if( IKabs((new_r20*x287)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x287*(x289.value)*((((new_r20*sj22*sj23))+((cj23*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x287))+IKsqr((x287*(x289.value)*((((new_r20*sj22*sj23))+((cj23*new_r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2((new_r20*x287), (x287*(x289.value)*((((new_r20*sj22*sj23))+((cj23*new_r00))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x290=IKsin(j24);
IkReal x291=IKcos(j24);
IkReal x292=(sj22*sj23);
IkReal x293=(cj22*new_r10);
IkReal x294=((1.0)*sj22);
IkReal x295=(cj22*new_r11);
IkReal x296=((1.0)*sj23);
IkReal x297=((1.0)*cj23);
IkReal x298=((1.0)*x291);
IkReal x299=(cj22*x290);
evalcond[0]=((((-1.0)*x290*x297))+new_r20);
evalcond[1]=((((-1.0)*x291*x297))+new_r21);
evalcond[2]=(((cj22*new_r01))+x290+((new_r11*sj22)));
evalcond[3]=(((cj22*new_r00))+(((-1.0)*x298))+((new_r10*sj22)));
evalcond[4]=(((x291*x292))+x299+new_r01);
evalcond[5]=(((x290*x292))+(((-1.0)*cj22*x298))+new_r00);
evalcond[6]=((((-1.0)*cj22*x291*x296))+((sj22*x290))+new_r11);
evalcond[7]=((((-1.0)*x290*x296))+x293+(((-1.0)*new_r00*x294)));
evalcond[8]=((((-1.0)*new_r01*x294))+(((-1.0)*x291*x296))+x295);
evalcond[9]=((((-1.0)*x291*x294))+(((-1.0)*x296*x299))+new_r10);
evalcond[10]=((((-1.0)*new_r20*x297))+(((-1.0)*x293*x296))+((new_r00*x292))+x290);
evalcond[11]=((((-1.0)*new_r21*x297))+x291+((new_r01*x292))+(((-1.0)*x295*x296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x300=IKPowWithIntegerCheck(IKsign(cj23),-1);
if(!x300.valid){
continue;
}
CheckValue<IkReal> x301 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x301.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(((1.5707963267949)*(x300.value)))+(x301.value));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x302=IKsin(j24);
IkReal x303=IKcos(j24);
IkReal x304=(sj22*sj23);
IkReal x305=(cj22*new_r10);
IkReal x306=((1.0)*sj22);
IkReal x307=(cj22*new_r11);
IkReal x308=((1.0)*sj23);
IkReal x309=((1.0)*cj23);
IkReal x310=((1.0)*x303);
IkReal x311=(cj22*x302);
evalcond[0]=((((-1.0)*x302*x309))+new_r20);
evalcond[1]=((((-1.0)*x303*x309))+new_r21);
evalcond[2]=(((cj22*new_r01))+x302+((new_r11*sj22)));
evalcond[3]=(((cj22*new_r00))+(((-1.0)*x310))+((new_r10*sj22)));
evalcond[4]=(((x303*x304))+x311+new_r01);
evalcond[5]=(((x302*x304))+new_r00+(((-1.0)*cj22*x310)));
evalcond[6]=((((-1.0)*cj22*x303*x308))+new_r11+((sj22*x302)));
evalcond[7]=((((-1.0)*x302*x308))+x305+(((-1.0)*new_r00*x306)));
evalcond[8]=((((-1.0)*x303*x308))+x307+(((-1.0)*new_r01*x306)));
evalcond[9]=((((-1.0)*x303*x306))+(((-1.0)*x308*x311))+new_r10);
evalcond[10]=(((new_r00*x304))+(((-1.0)*new_r20*x309))+x302+(((-1.0)*x305*x308)));
evalcond[11]=(((new_r01*x304))+(((-1.0)*new_r21*x309))+x303+(((-1.0)*x307*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x312=IKPowWithIntegerCheck(IKsign(cj23),-1);
if(!x312.valid){
continue;
}
CheckValue<IkReal> x313 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x313.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x312.value)))+(x313.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x314=IKsin(j22);
IkReal x315=IKcos(j22);
IkReal x316=((1.0)*new_r12);
IkReal x317=(new_r02*x314);
IkReal x318=(cj23*x315);
IkReal x319=(cj23*x314);
evalcond[0]=(x318+new_r12);
evalcond[1]=((((-1.0)*x319))+new_r02);
evalcond[2]=(((new_r02*x315))+((new_r12*x314)));
evalcond[3]=(cj23+((new_r12*x315))+(((-1.0)*x317)));
evalcond[4]=(((new_r00*x319))+(((-1.0)*new_r10*x318))+((new_r20*sj23)));
evalcond[5]=(((new_r21*sj23))+((new_r01*x319))+(((-1.0)*new_r11*x318)));
evalcond[6]=((((-1.0)*sj23*x315*x316))+((sj23*x317))+(((-1.0)*cj23*new_r22)));
evalcond[7]=((-1.0)+((new_r22*sj23))+((cj23*x317))+(((-1.0)*x316*x318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j24eval[3];
j24eval[0]=cj23;
j24eval[1]=IKsign(cj23);
j24eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal j24eval[2];
j24eval[0]=cj23;
j24eval[1]=cj22;
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  )
{
{
IkReal j24eval[3];
j24eval[0]=cj23;
j24eval[1]=sj22;
j24eval[2]=sj23;
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x320=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r00*sj22))+(((-1.0)*cj22*x320)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj22*new_r00))+(((-1.0)*sj22*x320)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*sj22))+(((-1.0)*cj22*x320))))+IKsqr((((cj22*new_r00))+(((-1.0)*sj22*x320))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*new_r00*sj22))+(((-1.0)*cj22*x320))), (((cj22*new_r00))+(((-1.0)*sj22*x320))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x321=IKsin(j24);
IkReal x322=IKcos(j24);
IkReal x323=((1.0)*sj22);
IkReal x324=(sj22*x321);
IkReal x325=((1.0)*x322);
IkReal x326=((1.0)*x321);
IkReal x327=(cj22*x325);
evalcond[0]=(((cj22*new_r01))+x321+((new_r11*sj22)));
evalcond[1]=(((cj22*new_r00))+(((-1.0)*x325))+((new_r10*sj22)));
evalcond[2]=(((sj22*x322))+new_r01+((cj22*x321)));
evalcond[3]=((((-1.0)*x327))+x324+new_r00);
evalcond[4]=((((-1.0)*x327))+x324+new_r11);
evalcond[5]=((((-1.0)*x326))+(((-1.0)*new_r00*x323))+((cj22*new_r10)));
evalcond[6]=((((-1.0)*x325))+(((-1.0)*new_r01*x323))+((cj22*new_r11)));
evalcond[7]=((((-1.0)*cj22*x326))+(((-1.0)*x322*x323))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x328=((1.0)*cj22);
if( IKabs(((((-1.0)*new_r11*sj22))+(((-1.0)*new_r01*x328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj22))+(((-1.0)*new_r11*x328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj22))+(((-1.0)*new_r01*x328))))+IKsqr((((new_r01*sj22))+(((-1.0)*new_r11*x328))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((((-1.0)*new_r11*sj22))+(((-1.0)*new_r01*x328))), (((new_r01*sj22))+(((-1.0)*new_r11*x328))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x329=IKsin(j24);
IkReal x330=IKcos(j24);
IkReal x331=((1.0)*sj22);
IkReal x332=(cj22*x329);
IkReal x333=((1.0)*x330);
IkReal x334=(x330*x331);
evalcond[0]=(((cj22*new_r01))+x329+((new_r11*sj22)));
evalcond[1]=(x329+(((-1.0)*new_r00*x331))+((cj22*new_r10)));
evalcond[2]=(x330+(((-1.0)*new_r01*x331))+((cj22*new_r11)));
evalcond[3]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x333)));
evalcond[4]=(((sj22*x329))+new_r11+((cj22*x330)));
evalcond[5]=(x332+(((-1.0)*x334))+new_r01);
evalcond[6]=(x332+(((-1.0)*x334))+new_r10);
evalcond[7]=((((-1.0)*x329*x331))+(((-1.0)*cj22*x333))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j22))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x335=IKsin(j24);
IkReal x336=IKcos(j24);
IkReal x337=((1.0)*sj23);
IkReal x338=((1.0)*cj23);
IkReal x339=((1.0)*x336);
evalcond[0]=(x335+new_r01);
evalcond[1]=((((-1.0)*x339))+new_r00);
evalcond[2]=(new_r20+(((-1.0)*x335*x338)));
evalcond[3]=(new_r21+(((-1.0)*x336*x338)));
evalcond[4]=(new_r11+(((-1.0)*x336*x337)));
evalcond[5]=(new_r10+(((-1.0)*x335*x337)));
evalcond[6]=((((-1.0)*new_r10*x337))+(((-1.0)*new_r20*x338))+x335);
evalcond[7]=((((-1.0)*new_r11*x337))+(((-1.0)*new_r21*x338))+x336);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j22)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x340=IKsin(j24);
IkReal x341=IKcos(j24);
IkReal x342=((1.0)*cj23);
IkReal x343=((1.0)*x341);
IkReal x344=((1.0)*x340);
evalcond[0]=(x340+(((-1.0)*new_r01)));
evalcond[1]=(((sj23*x341))+new_r11);
evalcond[2]=((((-1.0)*x340*x342))+new_r20);
evalcond[3]=((((-1.0)*x341*x342))+new_r21);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x343)));
evalcond[5]=((((-1.0)*sj23*x344))+(((-1.0)*new_r10)));
evalcond[6]=(x340+((new_r10*sj23))+(((-1.0)*new_r20*x342)));
evalcond[7]=(x341+((new_r11*sj23))+(((-1.0)*new_r21*x342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j23))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(new_r20, new_r21);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x345=IKsin(j24);
IkReal x346=IKcos(j24);
IkReal x347=((1.0)*x346);
evalcond[0]=(new_r20+(((-1.0)*x345)));
evalcond[1]=(new_r21+(((-1.0)*x347)));
evalcond[2]=(((cj22*x345))+new_r01);
evalcond[3]=(((sj22*x345))+new_r11);
evalcond[4]=((((-1.0)*cj22*x347))+new_r00);
evalcond[5]=((((-1.0)*sj22*x347))+new_r10);
evalcond[6]=(((cj22*new_r01))+x345+((new_r11*sj22)));
evalcond[7]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j23)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x348=IKsin(j24);
IkReal x349=IKcos(j24);
IkReal x350=((1.0)*x349);
evalcond[0]=(x348+new_r20);
evalcond[1]=(x349+new_r21);
evalcond[2]=(((cj22*x348))+new_r01);
evalcond[3]=(((sj22*x348))+new_r11);
evalcond[4]=((((-1.0)*cj22*x350))+new_r00);
evalcond[5]=((((-1.0)*sj22*x350))+new_r10);
evalcond[6]=(((cj22*new_r01))+x348+((new_r11*sj22)));
evalcond[7]=(((cj22*new_r00))+(((-1.0)*x350))+((new_r10*sj22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j22)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x351=IKcos(j24);
IkReal x352=IKsin(j24);
IkReal x353=((1.0)*cj23);
IkReal x354=((1.0)*x351);
evalcond[0]=(x352+new_r11);
evalcond[1]=((((-1.0)*x354))+new_r10);
evalcond[2]=(((sj23*x351))+new_r01);
evalcond[3]=(((sj23*x352))+new_r00);
evalcond[4]=(new_r20+(((-1.0)*x352*x353)));
evalcond[5]=((((-1.0)*x351*x353))+new_r21);
evalcond[6]=(((new_r00*sj23))+x352+(((-1.0)*new_r20*x353)));
evalcond[7]=(((new_r01*sj23))+x351+(((-1.0)*new_r21*x353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j22)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[8];
IkReal x355=IKsin(j24);
IkReal x356=IKcos(j24);
IkReal x357=((1.0)*cj23);
IkReal x358=((1.0)*sj23);
IkReal x359=((1.0)*x356);
evalcond[0]=(x355+(((-1.0)*new_r11)));
evalcond[1]=(new_r20+(((-1.0)*x355*x357)));
evalcond[2]=((((-1.0)*x356*x357))+new_r21);
evalcond[3]=((((-1.0)*x356*x358))+new_r01);
evalcond[4]=(new_r00+(((-1.0)*x355*x358)));
evalcond[5]=((((-1.0)*x359))+(((-1.0)*new_r10)));
evalcond[6]=(x355+(((-1.0)*new_r00*x358))+(((-1.0)*new_r20*x357)));
evalcond[7]=(x356+(((-1.0)*new_r01*x358))+(((-1.0)*new_r21*x357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j24eval[0]=IKabs(new_r22);
if( IKabs(j24eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j24]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
IkReal j24array[2], cj24array[2], sj24array[2], tempj24array[1];
int numsolutions = 0;
for(int ij24 = 0; ij24 < numroots; ++ij24)
{
IkReal htj24 = zeror[ij24];
tempj24array[0]=((2.0)*(atan(htj24)));
for(int kj24 = 0; kj24 < 1; ++kj24)
{
j24array[numsolutions] = tempj24array[kj24];
if( j24array[numsolutions] > IKPI )
{
    j24array[numsolutions]-=IK2PI;
}
else if( j24array[numsolutions] < -IKPI )
{
    j24array[numsolutions]+=IK2PI;
}
sj24array[numsolutions] = IKsin(j24array[numsolutions]);
cj24array[numsolutions] = IKcos(j24array[numsolutions]);
numsolutions++;
}
}
bool j24valid[2]={true,true};
_nj24 = 2;
for(int ij24 = 0; ij24 < numsolutions; ++ij24)
    {
if( !j24valid[ij24] )
{
    continue;
}
    j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
htj24 = IKtan(j24/2);

_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < numsolutions; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j24]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x361=IKPowWithIntegerCheck(cj23,-1);
if(!x361.valid){
continue;
}
IkReal x360=x361.value;
CheckValue<IkReal> x362=IKPowWithIntegerCheck(sj22,-1);
if(!x362.valid){
continue;
}
CheckValue<IkReal> x363=IKPowWithIntegerCheck(sj23,-1);
if(!x363.valid){
continue;
}
if( IKabs((new_r20*x360)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x360*(x362.value)*(x363.value)*(((((-1.0)*cj23*new_r01))+(((-1.0)*cj22*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x360))+IKsqr((x360*(x362.value)*(x363.value)*(((((-1.0)*cj23*new_r01))+(((-1.0)*cj22*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2((new_r20*x360), (x360*(x362.value)*(x363.value)*(((((-1.0)*cj23*new_r01))+(((-1.0)*cj22*new_r20))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x364=IKsin(j24);
IkReal x365=IKcos(j24);
IkReal x366=(sj22*sj23);
IkReal x367=(cj22*new_r10);
IkReal x368=((1.0)*sj22);
IkReal x369=(cj22*new_r11);
IkReal x370=((1.0)*sj23);
IkReal x371=((1.0)*cj23);
IkReal x372=((1.0)*x365);
IkReal x373=(cj22*x364);
evalcond[0]=(new_r20+(((-1.0)*x364*x371)));
evalcond[1]=(new_r21+(((-1.0)*x365*x371)));
evalcond[2]=(((cj22*new_r01))+x364+((new_r11*sj22)));
evalcond[3]=(((cj22*new_r00))+(((-1.0)*x372))+((new_r10*sj22)));
evalcond[4]=(((x365*x366))+x373+new_r01);
evalcond[5]=(((x364*x366))+new_r00+(((-1.0)*cj22*x372)));
evalcond[6]=(((sj22*x364))+(((-1.0)*cj22*x365*x370))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x368))+x367+(((-1.0)*x364*x370)));
evalcond[8]=(x369+(((-1.0)*new_r01*x368))+(((-1.0)*x365*x370)));
evalcond[9]=((((-1.0)*x370*x373))+new_r10+(((-1.0)*x365*x368)));
evalcond[10]=((((-1.0)*new_r20*x371))+((new_r00*x366))+(((-1.0)*x367*x370))+x364);
evalcond[11]=((((-1.0)*new_r21*x371))+x365+((new_r01*x366))+(((-1.0)*x369*x370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x375=IKPowWithIntegerCheck(cj23,-1);
if(!x375.valid){
continue;
}
IkReal x374=x375.value;
CheckValue<IkReal> x376=IKPowWithIntegerCheck(cj22,-1);
if(!x376.valid){
continue;
}
if( IKabs((new_r20*x374)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x374*(x376.value)*((((new_r20*sj22*sj23))+((cj23*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x374))+IKsqr((x374*(x376.value)*((((new_r20*sj22*sj23))+((cj23*new_r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j24array[0]=IKatan2((new_r20*x374), (x374*(x376.value)*((((new_r20*sj22*sj23))+((cj23*new_r00))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x377=IKsin(j24);
IkReal x378=IKcos(j24);
IkReal x379=(sj22*sj23);
IkReal x380=(cj22*new_r10);
IkReal x381=((1.0)*sj22);
IkReal x382=(cj22*new_r11);
IkReal x383=((1.0)*sj23);
IkReal x384=((1.0)*cj23);
IkReal x385=((1.0)*x378);
IkReal x386=(cj22*x377);
evalcond[0]=(new_r20+(((-1.0)*x377*x384)));
evalcond[1]=((((-1.0)*x378*x384))+new_r21);
evalcond[2]=(((cj22*new_r01))+x377+((new_r11*sj22)));
evalcond[3]=(((cj22*new_r00))+((new_r10*sj22))+(((-1.0)*x385)));
evalcond[4]=(x386+((x378*x379))+new_r01);
evalcond[5]=((((-1.0)*cj22*x385))+((x377*x379))+new_r00);
evalcond[6]=((((-1.0)*cj22*x378*x383))+((sj22*x377))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x381))+x380+(((-1.0)*x377*x383)));
evalcond[8]=((((-1.0)*new_r01*x381))+x382+(((-1.0)*x378*x383)));
evalcond[9]=((((-1.0)*x378*x381))+new_r10+(((-1.0)*x383*x386)));
evalcond[10]=((((-1.0)*x380*x383))+(((-1.0)*new_r20*x384))+x377+((new_r00*x379)));
evalcond[11]=(((new_r01*x379))+x378+(((-1.0)*new_r21*x384))+(((-1.0)*x382*x383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x387=IKPowWithIntegerCheck(IKsign(cj23),-1);
if(!x387.valid){
continue;
}
CheckValue<IkReal> x388 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x388.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(((1.5707963267949)*(x387.value)))+(x388.value));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x389=IKsin(j24);
IkReal x390=IKcos(j24);
IkReal x391=(sj22*sj23);
IkReal x392=(cj22*new_r10);
IkReal x393=((1.0)*sj22);
IkReal x394=(cj22*new_r11);
IkReal x395=((1.0)*sj23);
IkReal x396=((1.0)*cj23);
IkReal x397=((1.0)*x390);
IkReal x398=(cj22*x389);
evalcond[0]=((((-1.0)*x389*x396))+new_r20);
evalcond[1]=((((-1.0)*x390*x396))+new_r21);
evalcond[2]=(((cj22*new_r01))+x389+((new_r11*sj22)));
evalcond[3]=(((cj22*new_r00))+(((-1.0)*x397))+((new_r10*sj22)));
evalcond[4]=(x398+new_r01+((x390*x391)));
evalcond[5]=(new_r00+((x389*x391))+(((-1.0)*cj22*x397)));
evalcond[6]=(((sj22*x389))+new_r11+(((-1.0)*cj22*x390*x395)));
evalcond[7]=((((-1.0)*x389*x395))+x392+(((-1.0)*new_r00*x393)));
evalcond[8]=((((-1.0)*new_r01*x393))+x394+(((-1.0)*x390*x395)));
evalcond[9]=((((-1.0)*x395*x398))+(((-1.0)*x390*x393))+new_r10);
evalcond[10]=(x389+((new_r00*x391))+(((-1.0)*x392*x395))+(((-1.0)*new_r20*x396)));
evalcond[11]=((((-1.0)*new_r21*x396))+(((-1.0)*x394*x395))+x390+((new_r01*x391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
CheckValue<IkReal> x399=IKPowWithIntegerCheck(IKsign(cj23),-1);
if(!x399.valid){
continue;
}
CheckValue<IkReal> x400 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x400.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(((1.5707963267949)*(x399.value)))+(x400.value));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[2];
IkReal x401=((1.0)*cj23);
evalcond[0]=((((-1.0)*x401*(IKsin(j24))))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x401*(IKcos(j24)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j22eval[3];
j22eval[0]=cj23;
j22eval[1]=IKsign(cj23);
j22eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[2];
j22eval[0]=cj23;
j22eval[1]=new_r11;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x402=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r00*sj24))+(((-1.0)*cj24*x402)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj24*x402))+((cj24*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*sj24))+(((-1.0)*cj24*x402))))+IKsqr(((((-1.0)*sj24*x402))+((cj24*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((-1.0)*new_r00*sj24))+(((-1.0)*cj24*x402))), ((((-1.0)*sj24*x402))+((cj24*new_r00))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x403=IKsin(j22);
IkReal x404=IKcos(j22);
IkReal x405=((1.0)*cj24);
IkReal x406=(sj24*x403);
IkReal x407=((1.0)*x403);
IkReal x408=(sj24*x404);
IkReal x409=(x404*x405);
evalcond[0]=(sj24+((new_r11*x403))+((new_r01*x404)));
evalcond[1]=(((cj24*x403))+x408+new_r01);
evalcond[2]=(x406+new_r00+(((-1.0)*x409)));
evalcond[3]=(x406+new_r11+(((-1.0)*x409)));
evalcond[4]=(((new_r10*x403))+(((-1.0)*x405))+((new_r00*x404)));
evalcond[5]=((((-1.0)*x403*x405))+new_r10+(((-1.0)*x408)));
evalcond[6]=((((-1.0)*sj24))+((new_r10*x404))+(((-1.0)*new_r00*x407)));
evalcond[7]=(((new_r11*x404))+(((-1.0)*new_r01*x407))+(((-1.0)*x405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[3];
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
IkReal x410=(((new_r11*sj24))+((cj24*new_r01)));
j22eval[0]=x410;
j22eval[1]=((IKabs(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj24*sj24)))))+(IKabs(((-1.0)+(cj24*cj24)+(new_r01*new_r01)))));
j22eval[2]=IKsign(x410);
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
IkReal x411=((1.0)*sj24);
IkReal x412=(((new_r10*new_r11))+((new_r00*new_r01)));
j22eval[0]=x412;
j22eval[1]=((IKabs((((new_r01*sj24))+(((-1.0)*new_r10*x411)))))+(IKabs(((((-1.0)*new_r11*x411))+(((-1.0)*new_r00*x411))))));
j22eval[2]=IKsign(x412);
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
IkReal x413=((1.0)*sj24);
IkReal x414=((new_r01*new_r01)+(new_r11*new_r11));
j22eval[0]=x414;
j22eval[1]=((IKabs((((cj24*new_r01))+(((-1.0)*new_r11*x413)))))+(IKabs(((((-1.0)*cj24*new_r11))+(((-1.0)*new_r01*x413))))));
j22eval[2]=IKsign(x414);
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
new_r01=0;
new_r11=0;
j22eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x416 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x416.valid){
continue;
}
IkReal x415=x416.value;
j22array[0]=((-1.0)*x415);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=((3.14159265358979)+(((-1.0)*x415)));
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j22))))+((new_r10*(IKcos(j22)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j24))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x417=IKcos(j22);
IkReal x418=IKsin(j22);
IkReal x419=((1.0)*x418);
evalcond[0]=(x417+new_r11);
evalcond[1]=(new_r01+(((-1.0)*x419)));
evalcond[2]=(new_r00+(((-1.0)*x417)));
evalcond[3]=(new_r10+(((-1.0)*x419)));
evalcond[4]=(((new_r11*x418))+((new_r01*x417)));
evalcond[5]=((-1.0)+((new_r10*x418))+((new_r00*x417)));
evalcond[6]=(((new_r10*x417))+(((-1.0)*new_r00*x419)));
evalcond[7]=((1.0)+((new_r11*x417))+(((-1.0)*new_r01*x419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j24)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x420=IKsin(j22);
IkReal x421=IKcos(j22);
IkReal x422=((1.0)*x420);
evalcond[0]=(x420+new_r01);
evalcond[1]=(x421+new_r00);
evalcond[2]=(x420+new_r10);
evalcond[3]=((((-1.0)*x421))+new_r11);
evalcond[4]=(((new_r11*x420))+((new_r01*x421)));
evalcond[5]=((1.0)+((new_r10*x420))+((new_r00*x421)));
evalcond[6]=((((-1.0)*new_r00*x422))+((new_r10*x421)));
evalcond[7]=((-1.0)+((new_r11*x421))+(((-1.0)*new_r01*x422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x424 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x424)==0){
continue;
}
IkReal x423=pow(x424,-0.5);
CheckValue<IkReal> x425 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x425.valid){
continue;
}
IkReal gconst0=((-1.0)*(x425.value));
IkReal gconst1=((-1.0)*new_r01*x423);
IkReal gconst2=(new_r11*x423);
CheckValue<IkReal> x426 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x426.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j24+(x426.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[3];
CheckValue<IkReal> x429 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x429.valid){
continue;
}
IkReal x427=((-1.0)*(x429.value));
IkReal x428=x423;
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x427;
IkReal gconst0=x427;
IkReal gconst1=((-1.0)*new_r01*x428);
IkReal gconst2=(new_r11*x428);
IkReal x430=new_r01*new_r01;
IkReal x431=(new_r00*new_r01);
IkReal x432=(((new_r10*new_r11))+x431);
IkReal x433=x423;
IkReal x434=(new_r01*x433);
j22eval[0]=x432;
j22eval[1]=((IKabs((((new_r10*x434))+(((-1.0)*x430*x433)))))+(IKabs((((new_r11*x434))+((x431*x433))))));
j22eval[2]=IKsign(x432);
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[2];
CheckValue<IkReal> x437 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x437.valid){
continue;
}
IkReal x435=((-1.0)*(x437.value));
IkReal x436=x423;
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x435;
IkReal gconst0=x435;
IkReal gconst1=((-1.0)*new_r01*x436);
IkReal gconst2=(new_r11*x436);
IkReal x438=((new_r01*new_r01)+(new_r11*new_r11));
j22eval[0]=x438;
j22eval[1]=IKsign(x438);
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x441 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x441.valid){
continue;
}
IkReal x439=((-1.0)*(x441.value));
IkReal x440=x423;
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x439;
IkReal gconst0=x439;
IkReal gconst1=((-1.0)*new_r01*x440);
IkReal gconst2=(new_r11*x440);
j22eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst1*gconst1)+(gconst2*gconst2));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[4], cj22array[4], sj22array[4];
bool j22valid[4]={false};
_nj22 = 4;
j22array[0]=0;
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=1.5707963267949;
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
j22array[2]=3.14159265358979;
sj22array[2]=IKsin(j22array[2]);
cj22array[2]=IKcos(j22array[2]);
j22array[3]=-1.5707963267949;
sj22array[3]=IKsin(j22array[3]);
cj22array[3]=IKcos(j22array[3]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
if( j22array[2] > IKPI )
{
    j22array[2]-=IK2PI;
}
else if( j22array[2] < -IKPI )
{    j22array[2]+=IK2PI;
}
j22valid[2] = true;
if( j22array[3] > IKPI )
{
    j22array[3]-=IK2PI;
}
else if( j22array[3] < -IKPI )
{    j22array[3]+=IK2PI;
}
j22valid[3] = true;
for(int ij22 = 0; ij22 < 4; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 4; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
CheckValue<IkReal> x443 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x443.valid){
continue;
}
IkReal x442=((-1.0)*(x443.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x442;
new_r11=0;
new_r00=0;
IkReal gconst0=x442;
IkReal x444 = new_r01*new_r01;
if(IKabs(x444)==0){
continue;
}
IkReal gconst1=((-1.0)*new_r01*(pow(x444,-0.5)));
IkReal gconst2=0;
j22eval[0]=new_r01;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x445=IKPowWithIntegerCheck(gconst1,-1);
if(!x445.valid){
continue;
}
cj22array[0]=((-1.0)*new_r01*(x445.value));
if( cj22array[0] >= -1-IKFAST_SINCOS_THRESH && cj22array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j22valid[0] = j22valid[1] = true;
    j22array[0] = IKacos(cj22array[0]);
    sj22array[0] = IKsin(j22array[0]);
    cj22array[1] = cj22array[0];
    j22array[1] = -j22array[0];
    sj22array[1] = -sj22array[0];
}
else if( isnan(cj22array[0]) )
{
    // probably any value will work
    j22valid[0] = true;
    cj22array[0] = 1; sj22array[0] = 0; j22array[0] = 0;
}
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x446=IKsin(j22);
IkReal x447=IKcos(j22);
IkReal x448=((-1.0)*x446);
evalcond[0]=(new_r10*x446);
evalcond[1]=(gconst1*x448);
evalcond[2]=(new_r01*x448);
evalcond[3]=(((new_r01*x447))+gconst1);
evalcond[4]=(gconst1+((new_r10*x447)));
evalcond[5]=(((gconst1*x447))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x449=IKPowWithIntegerCheck(new_r01,-1);
if(!x449.valid){
continue;
}
cj22array[0]=((-1.0)*gconst1*(x449.value));
if( cj22array[0] >= -1-IKFAST_SINCOS_THRESH && cj22array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j22valid[0] = j22valid[1] = true;
    j22array[0] = IKacos(cj22array[0]);
    sj22array[0] = IKsin(j22array[0]);
    cj22array[1] = cj22array[0];
    j22array[1] = -j22array[0];
    sj22array[1] = -sj22array[0];
}
else if( isnan(cj22array[0]) )
{
    // probably any value will work
    j22valid[0] = true;
    cj22array[0] = 1; sj22array[0] = 0; j22array[0] = 0;
}
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x450=IKsin(j22);
IkReal x451=IKcos(j22);
IkReal x452=(gconst1*x451);
IkReal x453=((-1.0)*x450);
evalcond[0]=(new_r10*x450);
evalcond[1]=(gconst1*x453);
evalcond[2]=(new_r01*x453);
evalcond[3]=(x452+new_r01);
evalcond[4]=(((new_r10*x451))+gconst1);
evalcond[5]=(x452+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst2;
evalcond[2]=gconst1;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[3];
CheckValue<IkReal> x455 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x455.valid){
continue;
}
IkReal x454=((-1.0)*(x455.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x454;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x454;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j22eval[0]=-1.0;
j22eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j22eval[2]=-1.0;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
CheckValue<IkReal> x457 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x457.valid){
continue;
}
IkReal x456=((-1.0)*(x457.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x456;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x456;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j22eval[0]=-1.0;
j22eval[1]=-1.0;
j22eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
CheckValue<IkReal> x459 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x459.valid){
continue;
}
IkReal x458=((-1.0)*(x459.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x458;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x458;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j22eval[0]=1.0;
j22eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j22eval[2]=1.0;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x460=((1.0)*new_r11);
CheckValue<IkReal> x461 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x460)))),IkReal(((((-1.0)*gconst2*x460))+(((-1.0)*gconst1*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x461.valid){
continue;
}
CheckValue<IkReal> x462=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x462.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x461.value)+(((1.5707963267949)*(x462.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x463=IKsin(j22);
IkReal x464=IKcos(j22);
IkReal x465=((1.0)*gconst2);
IkReal x466=(gconst1*x464);
IkReal x467=(gconst1*x463);
IkReal x468=(x463*x465);
evalcond[0]=(((new_r11*x463))+((new_r01*x464))+gconst1);
evalcond[1]=(x467+((gconst2*x464))+new_r11);
evalcond[2]=((((-1.0)*x468))+x466);
evalcond[3]=((((-1.0)*x468))+x466+new_r01);
evalcond[4]=((((-1.0)*x467))+(((-1.0)*x464*x465)));
evalcond[5]=(((new_r11*x464))+gconst2+(((-1.0)*new_r01*x463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x469=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst2*gconst2)))+(((-1.0)*(gconst1*gconst1))))),-1);
if(!x469.valid){
continue;
}
CheckValue<IkReal> x470 = IKatan2WithCheck(IkReal((gconst1*new_r11)),IkReal((gconst2*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x470.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x469.value)))+(x470.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x471=IKsin(j22);
IkReal x472=IKcos(j22);
IkReal x473=((1.0)*gconst2);
IkReal x474=(gconst1*x472);
IkReal x475=(gconst1*x471);
IkReal x476=(x471*x473);
evalcond[0]=(((new_r01*x472))+gconst1+((new_r11*x471)));
evalcond[1]=(x475+((gconst2*x472))+new_r11);
evalcond[2]=((((-1.0)*x476))+x474);
evalcond[3]=((((-1.0)*x476))+x474+new_r01);
evalcond[4]=((((-1.0)*x472*x473))+(((-1.0)*x475)));
evalcond[5]=(gconst2+((new_r11*x472))+(((-1.0)*new_r01*x471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x477=IKPowWithIntegerCheck(IKsign((((gconst1*new_r01))+(((-1.0)*gconst2*new_r11)))),-1);
if(!x477.valid){
continue;
}
CheckValue<IkReal> x478 = IKatan2WithCheck(IkReal((gconst1*gconst2)),IkReal(((-1.0)*(gconst1*gconst1))),IKFAST_ATAN2_MAGTHRESH);
if(!x478.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x477.value)))+(x478.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x479=IKsin(j22);
IkReal x480=IKcos(j22);
IkReal x481=((1.0)*gconst2);
IkReal x482=(gconst1*x480);
IkReal x483=(gconst1*x479);
IkReal x484=(x479*x481);
evalcond[0]=(gconst1+((new_r11*x479))+((new_r01*x480)));
evalcond[1]=(x483+((gconst2*x480))+new_r11);
evalcond[2]=((((-1.0)*x484))+x482);
evalcond[3]=((((-1.0)*x484))+x482+new_r01);
evalcond[4]=((((-1.0)*x483))+(((-1.0)*x480*x481)));
evalcond[5]=(((new_r11*x480))+gconst2+(((-1.0)*new_r01*x479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x485=IKPowWithIntegerCheck(gconst2,-1);
if(!x485.valid){
continue;
}
cj22array[0]=(new_r00*(x485.value));
if( cj22array[0] >= -1-IKFAST_SINCOS_THRESH && cj22array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j22valid[0] = j22valid[1] = true;
    j22array[0] = IKacos(cj22array[0]);
    sj22array[0] = IKsin(j22array[0]);
    cj22array[1] = cj22array[0];
    j22array[1] = -j22array[0];
    sj22array[1] = -sj22array[0];
}
else if( isnan(cj22array[0]) )
{
    // probably any value will work
    j22valid[0] = true;
    cj22array[0] = 1; sj22array[0] = 0; j22array[0] = 0;
}
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x486=IKsin(j22);
IkReal x487=IKcos(j22);
IkReal x488=((-1.0)*x486);
evalcond[0]=(new_r11*x486);
evalcond[1]=(gconst2*x488);
evalcond[2]=(new_r00*x488);
evalcond[3]=(((gconst2*x487))+new_r11);
evalcond[4]=(((new_r11*x487))+gconst2);
evalcond[5]=((((-1.0)*gconst2))+((new_r00*x487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
CheckValue<IkReal> x490 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x490.valid){
continue;
}
IkReal x489=((-1.0)*(x490.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x489;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x489;
IkReal gconst1=0;
IkReal x491 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x491)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x491,-0.5)));
j22eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x493 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x493.valid){
continue;
}
IkReal x492=((-1.0)*(x493.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x492;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x492;
IkReal gconst1=0;
IkReal x494 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x494)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x494,-0.5)));
j22eval[0]=new_r11;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x496 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x496.valid){
continue;
}
IkReal x495=((-1.0)*(x496.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x495;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x495;
IkReal gconst1=0;
IkReal x497 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x497)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x497,-0.5)));
j22eval[0]=new_r10;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x498=IKPowWithIntegerCheck(new_r10,-1);
if(!x498.valid){
continue;
}
CheckValue<IkReal> x499=IKPowWithIntegerCheck(gconst2,-1);
if(!x499.valid){
continue;
}
if( IKabs((gconst2*(x498.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x499.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst2*(x498.value)))+IKsqr(((-1.0)*new_r11*(x499.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((gconst2*(x498.value)), ((-1.0)*new_r11*(x499.value)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x500=IKsin(j22);
IkReal x501=IKcos(j22);
IkReal x502=((1.0)*gconst2);
IkReal x503=((-1.0)*gconst2);
evalcond[0]=(new_r11*x500);
evalcond[1]=(new_r10*x501);
evalcond[2]=(x500*x503);
evalcond[3]=(x501*x503);
evalcond[4]=(((gconst2*x501))+new_r11);
evalcond[5]=(gconst2+((new_r11*x501)));
evalcond[6]=(new_r10+(((-1.0)*x500*x502)));
evalcond[7]=((((-1.0)*x502))+((new_r10*x500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x504=IKPowWithIntegerCheck(gconst2,-1);
if(!x504.valid){
continue;
}
CheckValue<IkReal> x505=IKPowWithIntegerCheck(new_r11,-1);
if(!x505.valid){
continue;
}
if( IKabs((new_r10*(x504.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x505.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x504.value)))+IKsqr(((-1.0)*gconst2*(x505.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((new_r10*(x504.value)), ((-1.0)*gconst2*(x505.value)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x506=IKsin(j22);
IkReal x507=IKcos(j22);
IkReal x508=((1.0)*gconst2);
IkReal x509=((-1.0)*gconst2);
evalcond[0]=(new_r11*x506);
evalcond[1]=(new_r10*x507);
evalcond[2]=(x506*x509);
evalcond[3]=(x507*x509);
evalcond[4]=(((gconst2*x507))+new_r11);
evalcond[5]=(gconst2+((new_r11*x507)));
evalcond[6]=((((-1.0)*x506*x508))+new_r10);
evalcond[7]=((((-1.0)*x508))+((new_r10*x506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x510 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x510.valid){
continue;
}
CheckValue<IkReal> x511=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x511.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x510.value)+(((1.5707963267949)*(x511.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x512=IKsin(j22);
IkReal x513=IKcos(j22);
IkReal x514=((1.0)*gconst2);
IkReal x515=((-1.0)*gconst2);
evalcond[0]=(new_r11*x512);
evalcond[1]=(new_r10*x513);
evalcond[2]=(x512*x515);
evalcond[3]=(x513*x515);
evalcond[4]=(((gconst2*x513))+new_r11);
evalcond[5]=(((new_r11*x513))+gconst2);
evalcond[6]=((((-1.0)*x512*x514))+new_r10);
evalcond[7]=(((new_r10*x512))+(((-1.0)*x514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
CheckValue<IkReal> x517 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x517.valid){
continue;
}
IkReal x516=((-1.0)*(x517.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x516;
new_r01=0;
IkReal gconst0=x516;
IkReal gconst1=0;
IkReal x518 = new_r11*new_r11;
if(IKabs(x518)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x518,-0.5)));
j22eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x520 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x520.valid){
continue;
}
IkReal x519=((-1.0)*(x520.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x519;
new_r01=0;
IkReal gconst0=x519;
IkReal gconst1=0;
IkReal x521 = new_r11*new_r11;
if(IKabs(x521)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x521,-0.5)));
j22eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x523 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x523.valid){
continue;
}
IkReal x522=((-1.0)*(x523.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst1;
cj24=gconst2;
j24=x522;
new_r01=0;
IkReal gconst0=x522;
IkReal gconst1=0;
IkReal x524 = new_r11*new_r11;
if(IKabs(x524)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x524,-0.5)));
j22eval[0]=new_r11;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x525=IKPowWithIntegerCheck(gconst2,-1);
if(!x525.valid){
continue;
}
CheckValue<IkReal> x526=IKPowWithIntegerCheck(new_r11,-1);
if(!x526.valid){
continue;
}
if( IKabs((new_r10*(x525.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x526.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x525.value)))+IKsqr(((-1.0)*gconst2*(x526.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((new_r10*(x525.value)), ((-1.0)*gconst2*(x526.value)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x527=IKsin(j22);
IkReal x528=IKcos(j22);
IkReal x529=(gconst2*x527);
IkReal x530=(gconst2*x528);
evalcond[0]=(new_r11*x527);
evalcond[1]=((-1.0)*x529);
evalcond[2]=(x530+new_r11);
evalcond[3]=(gconst2+((new_r11*x528)));
evalcond[4]=((((-1.0)*x530))+new_r00);
evalcond[5]=((((-1.0)*x529))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x527))+((new_r10*x528)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x527))+((new_r00*x528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x531 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x531.valid){
continue;
}
CheckValue<IkReal> x532=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x532.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x531.value)+(((1.5707963267949)*(x532.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x533=IKsin(j22);
IkReal x534=IKcos(j22);
IkReal x535=(gconst2*x533);
IkReal x536=(gconst2*x534);
evalcond[0]=(new_r11*x533);
evalcond[1]=((-1.0)*x535);
evalcond[2]=(x536+new_r11);
evalcond[3]=(gconst2+((new_r11*x534)));
evalcond[4]=((((-1.0)*x536))+new_r00);
evalcond[5]=((((-1.0)*x535))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x533))+((new_r10*x534)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x533))+((new_r00*x534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x537=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x537.valid){
continue;
}
CheckValue<IkReal> x538 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x538.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x537.value)))+(x538.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x539=IKsin(j22);
IkReal x540=IKcos(j22);
IkReal x541=(gconst2*x539);
IkReal x542=(gconst2*x540);
evalcond[0]=(new_r11*x539);
evalcond[1]=((-1.0)*x541);
evalcond[2]=(x542+new_r11);
evalcond[3]=(gconst2+((new_r11*x540)));
evalcond[4]=((((-1.0)*x542))+new_r00);
evalcond[5]=((((-1.0)*x541))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x539))+((new_r10*x540)));
evalcond[7]=(((new_r00*x540))+(((-1.0)*gconst2))+((new_r10*x539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j22]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x543=((1.0)*new_r11);
CheckValue<IkReal> x544=IKPowWithIntegerCheck(IKsign(((gconst1*gconst1)+(gconst2*gconst2))),-1);
if(!x544.valid){
continue;
}
CheckValue<IkReal> x545 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x543)))),IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x545.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x544.value)))+(x545.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x546=IKsin(j22);
IkReal x547=IKcos(j22);
IkReal x548=((1.0)*gconst2);
IkReal x549=(gconst1*x547);
IkReal x550=(gconst1*x546);
IkReal x551=((1.0)*x546);
IkReal x552=(x546*x548);
evalcond[0]=(gconst1+((new_r11*x546))+((new_r01*x547)));
evalcond[1]=(((gconst2*x547))+x550+new_r11);
evalcond[2]=((((-1.0)*x552))+x549+new_r01);
evalcond[3]=(gconst1+((new_r10*x547))+(((-1.0)*new_r00*x551)));
evalcond[4]=(gconst2+(((-1.0)*new_r01*x551))+((new_r11*x547)));
evalcond[5]=((((-1.0)*x552))+x549+new_r10);
evalcond[6]=(((new_r00*x547))+((new_r10*x546))+(((-1.0)*x548)));
evalcond[7]=((((-1.0)*x550))+(((-1.0)*x547*x548))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x553=((1.0)*new_r11);
CheckValue<IkReal> x554 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x553)))),IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x554.valid){
continue;
}
CheckValue<IkReal> x555=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x555.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x554.value)+(((1.5707963267949)*(x555.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x556=IKsin(j22);
IkReal x557=IKcos(j22);
IkReal x558=((1.0)*gconst2);
IkReal x559=(gconst1*x557);
IkReal x560=(gconst1*x556);
IkReal x561=((1.0)*x556);
IkReal x562=(x556*x558);
evalcond[0]=(((new_r11*x556))+gconst1+((new_r01*x557)));
evalcond[1]=(((gconst2*x557))+x560+new_r11);
evalcond[2]=(x559+new_r01+(((-1.0)*x562)));
evalcond[3]=((((-1.0)*new_r00*x561))+((new_r10*x557))+gconst1);
evalcond[4]=(((new_r11*x557))+gconst2+(((-1.0)*new_r01*x561)));
evalcond[5]=(x559+new_r10+(((-1.0)*x562)));
evalcond[6]=(((new_r10*x556))+(((-1.0)*x558))+((new_r00*x557)));
evalcond[7]=((((-1.0)*x560))+new_r00+(((-1.0)*x557*x558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x563=((1.0)*gconst1);
CheckValue<IkReal> x564 = IKatan2WithCheck(IkReal((((gconst1*new_r01))+(((-1.0)*new_r10*x563)))),IkReal(((((-1.0)*new_r00*x563))+(((-1.0)*new_r11*x563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x564.valid){
continue;
}
CheckValue<IkReal> x565=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x565.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x564.value)+(((1.5707963267949)*(x565.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x566=IKsin(j22);
IkReal x567=IKcos(j22);
IkReal x568=((1.0)*gconst2);
IkReal x569=(gconst1*x567);
IkReal x570=(gconst1*x566);
IkReal x571=((1.0)*x566);
IkReal x572=(x566*x568);
evalcond[0]=(gconst1+((new_r01*x567))+((new_r11*x566)));
evalcond[1]=(x570+new_r11+((gconst2*x567)));
evalcond[2]=((((-1.0)*x572))+x569+new_r01);
evalcond[3]=(gconst1+(((-1.0)*new_r00*x571))+((new_r10*x567)));
evalcond[4]=(gconst2+((new_r11*x567))+(((-1.0)*new_r01*x571)));
evalcond[5]=((((-1.0)*x572))+x569+new_r10);
evalcond[6]=(((new_r00*x567))+((new_r10*x566))+(((-1.0)*x568)));
evalcond[7]=((((-1.0)*x570))+(((-1.0)*x567*x568))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x574 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x574)==0){
continue;
}
IkReal x573=pow(x574,-0.5);
CheckValue<IkReal> x575 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x575.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x575.value))));
IkReal gconst4=((1.0)*new_r01*x573);
IkReal gconst5=((-1.0)*new_r11*x573);
CheckValue<IkReal> x576 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x576.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j24+(x576.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[3];
CheckValue<IkReal> x579 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x579.valid){
continue;
}
IkReal x577=((1.0)*(x579.value));
IkReal x578=x573;
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x577)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x577)));
IkReal gconst4=((1.0)*new_r01*x578);
IkReal gconst5=((-1.0)*new_r11*x578);
IkReal x580=new_r01*new_r01;
IkReal x581=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x582=x573;
IkReal x583=((1.0)*new_r01*x582);
j22eval[0]=x581;
j22eval[1]=IKsign(x581);
j22eval[2]=((IKabs((((x580*x582))+(((-1.0)*new_r10*x583)))))+(IKabs(((((-1.0)*new_r11*x583))+(((-1.0)*new_r00*x583))))));
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[2];
CheckValue<IkReal> x586 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x586.valid){
continue;
}
IkReal x584=((1.0)*(x586.value));
IkReal x585=x573;
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x584)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x584)));
IkReal gconst4=((1.0)*new_r01*x585);
IkReal gconst5=((-1.0)*new_r11*x585);
IkReal x587=((new_r01*new_r01)+(new_r11*new_r11));
j22eval[0]=x587;
j22eval[1]=IKsign(x587);
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x590 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x590.valid){
continue;
}
IkReal x588=((1.0)*(x590.value));
IkReal x589=x573;
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x588)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x588)));
IkReal gconst4=((1.0)*new_r01*x589);
IkReal gconst5=((-1.0)*new_r11*x589);
j22eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst4*gconst4)+(gconst5*gconst5));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[4], cj22array[4], sj22array[4];
bool j22valid[4]={false};
_nj22 = 4;
j22array[0]=0;
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=1.5707963267949;
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
j22array[2]=3.14159265358979;
sj22array[2]=IKsin(j22array[2]);
cj22array[2]=IKcos(j22array[2]);
j22array[3]=-1.5707963267949;
sj22array[3]=IKsin(j22array[3]);
cj22array[3]=IKcos(j22array[3]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
if( j22array[2] > IKPI )
{
    j22array[2]-=IK2PI;
}
else if( j22array[2] < -IKPI )
{    j22array[2]+=IK2PI;
}
j22valid[2] = true;
if( j22array[3] > IKPI )
{
    j22array[3]-=IK2PI;
}
else if( j22array[3] < -IKPI )
{    j22array[3]+=IK2PI;
}
j22valid[3] = true;
for(int ij22 = 0; ij22 < 4; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 4; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
CheckValue<IkReal> x592 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x592.valid){
continue;
}
IkReal x591=((1.0)*(x592.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x591)));
new_r11=0;
new_r00=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x591)));
IkReal x593 = new_r01*new_r01;
if(IKabs(x593)==0){
continue;
}
IkReal gconst4=((1.0)*new_r01*(pow(x593,-0.5)));
IkReal gconst5=0;
j22eval[0]=new_r01;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x594=IKPowWithIntegerCheck(gconst4,-1);
if(!x594.valid){
continue;
}
cj22array[0]=((-1.0)*new_r01*(x594.value));
if( cj22array[0] >= -1-IKFAST_SINCOS_THRESH && cj22array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j22valid[0] = j22valid[1] = true;
    j22array[0] = IKacos(cj22array[0]);
    sj22array[0] = IKsin(j22array[0]);
    cj22array[1] = cj22array[0];
    j22array[1] = -j22array[0];
    sj22array[1] = -sj22array[0];
}
else if( isnan(cj22array[0]) )
{
    // probably any value will work
    j22valid[0] = true;
    cj22array[0] = 1; sj22array[0] = 0; j22array[0] = 0;
}
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x595=IKsin(j22);
IkReal x596=IKcos(j22);
IkReal x597=((-1.0)*x595);
evalcond[0]=(new_r10*x595);
evalcond[1]=(gconst4*x597);
evalcond[2]=(new_r01*x597);
evalcond[3]=(gconst4+((new_r01*x596)));
evalcond[4]=(((new_r10*x596))+gconst4);
evalcond[5]=(((gconst4*x596))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x598=IKPowWithIntegerCheck(new_r01,-1);
if(!x598.valid){
continue;
}
cj22array[0]=((-1.0)*gconst4*(x598.value));
if( cj22array[0] >= -1-IKFAST_SINCOS_THRESH && cj22array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j22valid[0] = j22valid[1] = true;
    j22array[0] = IKacos(cj22array[0]);
    sj22array[0] = IKsin(j22array[0]);
    cj22array[1] = cj22array[0];
    j22array[1] = -j22array[0];
    sj22array[1] = -sj22array[0];
}
else if( isnan(cj22array[0]) )
{
    // probably any value will work
    j22valid[0] = true;
    cj22array[0] = 1; sj22array[0] = 0; j22array[0] = 0;
}
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x599=IKsin(j22);
IkReal x600=IKcos(j22);
IkReal x601=(gconst4*x600);
IkReal x602=((-1.0)*x599);
evalcond[0]=(new_r10*x599);
evalcond[1]=(gconst4*x602);
evalcond[2]=(new_r01*x602);
evalcond[3]=(x601+new_r01);
evalcond[4]=(gconst4+((new_r10*x600)));
evalcond[5]=(x601+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst5;
evalcond[2]=gconst4;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[4];
CheckValue<IkReal> x604 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x604.valid){
continue;
}
IkReal x603=((1.0)*(x604.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x603)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x603)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j22eval[0]=1.0;
j22eval[1]=1.0;
j22eval[2]=new_r01;
j22eval[3]=1.0;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  || IKabs(j22eval[3]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
CheckValue<IkReal> x606 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x606.valid){
continue;
}
IkReal x605=((1.0)*(x606.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x605)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x605)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j22eval[0]=-1.0;
j22eval[1]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
j22eval[2]=-1.0;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
CheckValue<IkReal> x608 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x608.valid){
continue;
}
IkReal x607=((1.0)*(x608.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x607)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x607)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j22eval[0]=1.0;
j22eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j22eval[2]=1.0;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x609=((1.0)*new_r11);
CheckValue<IkReal> x610=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x610.valid){
continue;
}
CheckValue<IkReal> x611 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x609)))),IkReal(((((-1.0)*gconst4*new_r01))+(((-1.0)*gconst5*x609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x611.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x610.value)))+(x611.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x612=IKsin(j22);
IkReal x613=IKcos(j22);
IkReal x614=(gconst4*x613);
IkReal x615=((1.0)*x612);
IkReal x616=(gconst5*x613);
IkReal x617=(gconst5*x615);
evalcond[0]=(gconst4+((new_r11*x612))+((new_r01*x613)));
evalcond[1]=(((gconst4*x612))+x616+new_r11);
evalcond[2]=((((-1.0)*x617))+x614);
evalcond[3]=((((-1.0)*x617))+x614+new_r01);
evalcond[4]=((((-1.0)*x616))+(((-1.0)*gconst4*x615)));
evalcond[5]=(gconst5+((new_r11*x613))+(((-1.0)*new_r01*x615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x618 = IKatan2WithCheck(IkReal((gconst4*new_r11)),IkReal((gconst5*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x618.valid){
continue;
}
CheckValue<IkReal> x619=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst4*gconst4)))+(((-1.0)*(gconst5*gconst5))))),-1);
if(!x619.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x618.value)+(((1.5707963267949)*(x619.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x620=IKsin(j22);
IkReal x621=IKcos(j22);
IkReal x622=(gconst4*x621);
IkReal x623=((1.0)*x620);
IkReal x624=(gconst5*x621);
IkReal x625=(gconst5*x623);
evalcond[0]=(gconst4+((new_r01*x621))+((new_r11*x620)));
evalcond[1]=(((gconst4*x620))+x624+new_r11);
evalcond[2]=((((-1.0)*x625))+x622);
evalcond[3]=((((-1.0)*x625))+x622+new_r01);
evalcond[4]=((((-1.0)*gconst4*x623))+(((-1.0)*x624)));
evalcond[5]=((((-1.0)*new_r01*x623))+gconst5+((new_r11*x621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x626 = IKatan2WithCheck(IkReal((gconst4*gconst5)),IkReal(((-1.0)*(gconst4*gconst4))),IKFAST_ATAN2_MAGTHRESH);
if(!x626.valid){
continue;
}
CheckValue<IkReal> x627=IKPowWithIntegerCheck(IKsign((((gconst4*new_r01))+(((-1.0)*gconst5*new_r11)))),-1);
if(!x627.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x626.value)+(((1.5707963267949)*(x627.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x628=IKsin(j22);
IkReal x629=IKcos(j22);
IkReal x630=(gconst4*x629);
IkReal x631=((1.0)*x628);
IkReal x632=(gconst5*x629);
IkReal x633=(gconst5*x631);
evalcond[0]=(gconst4+((new_r01*x629))+((new_r11*x628)));
evalcond[1]=(((gconst4*x628))+x632+new_r11);
evalcond[2]=((((-1.0)*x633))+x630);
evalcond[3]=((((-1.0)*x633))+x630+new_r01);
evalcond[4]=((((-1.0)*gconst4*x631))+(((-1.0)*x632)));
evalcond[5]=((((-1.0)*new_r01*x631))+gconst5+((new_r11*x629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x634=IKPowWithIntegerCheck(gconst5,-1);
if(!x634.valid){
continue;
}
cj22array[0]=(new_r00*(x634.value));
if( cj22array[0] >= -1-IKFAST_SINCOS_THRESH && cj22array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j22valid[0] = j22valid[1] = true;
    j22array[0] = IKacos(cj22array[0]);
    sj22array[0] = IKsin(j22array[0]);
    cj22array[1] = cj22array[0];
    j22array[1] = -j22array[0];
    sj22array[1] = -sj22array[0];
}
else if( isnan(cj22array[0]) )
{
    // probably any value will work
    j22valid[0] = true;
    cj22array[0] = 1; sj22array[0] = 0; j22array[0] = 0;
}
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[6];
IkReal x635=IKsin(j22);
IkReal x636=IKcos(j22);
IkReal x637=((-1.0)*x635);
evalcond[0]=(new_r11*x635);
evalcond[1]=(gconst5*x637);
evalcond[2]=(new_r00*x637);
evalcond[3]=(((gconst5*x636))+new_r11);
evalcond[4]=(gconst5+((new_r11*x636)));
evalcond[5]=((((-1.0)*gconst5))+((new_r00*x636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
CheckValue<IkReal> x639 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x639.valid){
continue;
}
IkReal x638=((1.0)*(x639.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x638)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x638)));
IkReal gconst4=0;
IkReal x640 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x640)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x640,-0.5)));
j22eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x642 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x642.valid){
continue;
}
IkReal x641=((1.0)*(x642.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x641)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x641)));
IkReal gconst4=0;
IkReal x643 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x643)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x643,-0.5)));
j22eval[0]=new_r11;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x645 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x645.valid){
continue;
}
IkReal x644=((1.0)*(x645.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x644)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x644)));
IkReal gconst4=0;
IkReal x646 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x646)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x646,-0.5)));
j22eval[0]=new_r10;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x647=IKPowWithIntegerCheck(new_r10,-1);
if(!x647.valid){
continue;
}
CheckValue<IkReal> x648=IKPowWithIntegerCheck(gconst5,-1);
if(!x648.valid){
continue;
}
if( IKabs((gconst5*(x647.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x648.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst5*(x647.value)))+IKsqr(((-1.0)*new_r11*(x648.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((gconst5*(x647.value)), ((-1.0)*new_r11*(x648.value)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x649=IKsin(j22);
IkReal x650=IKcos(j22);
IkReal x651=((1.0)*gconst5);
IkReal x652=(gconst5*x650);
evalcond[0]=(new_r11*x649);
evalcond[1]=(new_r10*x650);
evalcond[2]=((-1.0)*gconst5*x649);
evalcond[3]=((-1.0)*x652);
evalcond[4]=(x652+new_r11);
evalcond[5]=(gconst5+((new_r11*x650)));
evalcond[6]=((((-1.0)*x649*x651))+new_r10);
evalcond[7]=((((-1.0)*x651))+((new_r10*x649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x653=IKPowWithIntegerCheck(gconst5,-1);
if(!x653.valid){
continue;
}
CheckValue<IkReal> x654=IKPowWithIntegerCheck(new_r11,-1);
if(!x654.valid){
continue;
}
if( IKabs((new_r10*(x653.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x654.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x653.value)))+IKsqr(((-1.0)*gconst5*(x654.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((new_r10*(x653.value)), ((-1.0)*gconst5*(x654.value)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x655=IKsin(j22);
IkReal x656=IKcos(j22);
IkReal x657=((1.0)*gconst5);
IkReal x658=(gconst5*x656);
evalcond[0]=(new_r11*x655);
evalcond[1]=(new_r10*x656);
evalcond[2]=((-1.0)*gconst5*x655);
evalcond[3]=((-1.0)*x658);
evalcond[4]=(x658+new_r11);
evalcond[5]=(gconst5+((new_r11*x656)));
evalcond[6]=((((-1.0)*x655*x657))+new_r10);
evalcond[7]=((((-1.0)*x657))+((new_r10*x655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x659 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x659.valid){
continue;
}
CheckValue<IkReal> x660=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x660.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x659.value)+(((1.5707963267949)*(x660.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x661=IKsin(j22);
IkReal x662=IKcos(j22);
IkReal x663=((1.0)*gconst5);
IkReal x664=(gconst5*x662);
evalcond[0]=(new_r11*x661);
evalcond[1]=(new_r10*x662);
evalcond[2]=((-1.0)*gconst5*x661);
evalcond[3]=((-1.0)*x664);
evalcond[4]=(x664+new_r11);
evalcond[5]=(gconst5+((new_r11*x662)));
evalcond[6]=((((-1.0)*x661*x663))+new_r10);
evalcond[7]=(((new_r10*x661))+(((-1.0)*x663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
CheckValue<IkReal> x666 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x666.valid){
continue;
}
IkReal x665=((1.0)*(x666.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x665)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x665)));
IkReal gconst4=0;
IkReal x667 = new_r11*new_r11;
if(IKabs(x667)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x667,-0.5)));
j22eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x669 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x669.valid){
continue;
}
IkReal x668=((1.0)*(x669.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x668)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x668)));
IkReal gconst4=0;
IkReal x670 = new_r11*new_r11;
if(IKabs(x670)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x670,-0.5)));
j22eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
CheckValue<IkReal> x672 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x672.valid){
continue;
}
IkReal x671=((1.0)*(x672.value));
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
sj24=gconst4;
cj24=gconst5;
j24=((3.14159265)+(((-1.0)*x671)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x671)));
IkReal gconst4=0;
IkReal x673 = new_r11*new_r11;
if(IKabs(x673)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x673,-0.5)));
j22eval[0]=new_r11;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x674=IKPowWithIntegerCheck(gconst5,-1);
if(!x674.valid){
continue;
}
CheckValue<IkReal> x675=IKPowWithIntegerCheck(new_r11,-1);
if(!x675.valid){
continue;
}
if( IKabs((new_r10*(x674.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x675.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x674.value)))+IKsqr(((-1.0)*gconst5*(x675.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((new_r10*(x674.value)), ((-1.0)*gconst5*(x675.value)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x676=IKsin(j22);
IkReal x677=IKcos(j22);
IkReal x678=((1.0)*gconst5);
evalcond[0]=(new_r11*x676);
evalcond[1]=((-1.0)*gconst5*x676);
evalcond[2]=(((gconst5*x677))+new_r11);
evalcond[3]=(((new_r11*x677))+gconst5);
evalcond[4]=(new_r00+(((-1.0)*x677*x678)));
evalcond[5]=((((-1.0)*x676*x678))+new_r10);
evalcond[6]=(((new_r10*x677))+(((-1.0)*new_r00*x676)));
evalcond[7]=(((new_r00*x677))+((new_r10*x676))+(((-1.0)*x678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x679 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x679.valid){
continue;
}
CheckValue<IkReal> x680=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x680.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x679.value)+(((1.5707963267949)*(x680.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x681=IKsin(j22);
IkReal x682=IKcos(j22);
IkReal x683=((1.0)*gconst5);
evalcond[0]=(new_r11*x681);
evalcond[1]=((-1.0)*gconst5*x681);
evalcond[2]=(((gconst5*x682))+new_r11);
evalcond[3]=(gconst5+((new_r11*x682)));
evalcond[4]=((((-1.0)*x682*x683))+new_r00);
evalcond[5]=((((-1.0)*x681*x683))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x681))+((new_r10*x682)));
evalcond[7]=((((-1.0)*x683))+((new_r00*x682))+((new_r10*x681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x684 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x684.valid){
continue;
}
CheckValue<IkReal> x685=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x685.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x684.value)+(((1.5707963267949)*(x685.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x686=IKsin(j22);
IkReal x687=IKcos(j22);
IkReal x688=((1.0)*gconst5);
evalcond[0]=(new_r11*x686);
evalcond[1]=((-1.0)*gconst5*x686);
evalcond[2]=(((gconst5*x687))+new_r11);
evalcond[3]=(gconst5+((new_r11*x687)));
evalcond[4]=((((-1.0)*x687*x688))+new_r00);
evalcond[5]=((((-1.0)*x686*x688))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x686))+((new_r10*x687)));
evalcond[7]=((((-1.0)*x688))+((new_r00*x687))+((new_r10*x686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j22]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x689=((1.0)*new_r11);
CheckValue<IkReal> x690 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x689)))),IkReal(((((-1.0)*gconst4*new_r01))+(((-1.0)*gconst5*x689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x690.valid){
continue;
}
CheckValue<IkReal> x691=IKPowWithIntegerCheck(IKsign(((gconst4*gconst4)+(gconst5*gconst5))),-1);
if(!x691.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x690.value)+(((1.5707963267949)*(x691.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x692=IKsin(j22);
IkReal x693=IKcos(j22);
IkReal x694=((1.0)*gconst5);
IkReal x695=(gconst4*x693);
IkReal x696=((1.0)*x692);
IkReal x697=(x692*x694);
evalcond[0]=(gconst4+((new_r11*x692))+((new_r01*x693)));
evalcond[1]=(((gconst4*x692))+new_r11+((gconst5*x693)));
evalcond[2]=(x695+(((-1.0)*x697))+new_r01);
evalcond[3]=(gconst4+((new_r10*x693))+(((-1.0)*new_r00*x696)));
evalcond[4]=((((-1.0)*new_r01*x696))+gconst5+((new_r11*x693)));
evalcond[5]=(x695+(((-1.0)*x697))+new_r10);
evalcond[6]=(((new_r10*x692))+(((-1.0)*x694))+((new_r00*x693)));
evalcond[7]=((((-1.0)*x693*x694))+(((-1.0)*gconst4*x696))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x698=((1.0)*new_r11);
CheckValue<IkReal> x699 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x698)))),IkReal(((((-1.0)*gconst4*new_r01))+(((-1.0)*gconst5*x698)))),IKFAST_ATAN2_MAGTHRESH);
if(!x699.valid){
continue;
}
CheckValue<IkReal> x700=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x700.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x699.value)+(((1.5707963267949)*(x700.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x701=IKsin(j22);
IkReal x702=IKcos(j22);
IkReal x703=((1.0)*gconst5);
IkReal x704=(gconst4*x702);
IkReal x705=((1.0)*x701);
IkReal x706=(x701*x703);
evalcond[0]=(((new_r01*x702))+gconst4+((new_r11*x701)));
evalcond[1]=(((gconst5*x702))+((gconst4*x701))+new_r11);
evalcond[2]=((((-1.0)*x706))+x704+new_r01);
evalcond[3]=(gconst4+((new_r10*x702))+(((-1.0)*new_r00*x705)));
evalcond[4]=(gconst5+((new_r11*x702))+(((-1.0)*new_r01*x705)));
evalcond[5]=((((-1.0)*x706))+x704+new_r10);
evalcond[6]=(((new_r00*x702))+(((-1.0)*x703))+((new_r10*x701)));
evalcond[7]=((((-1.0)*gconst4*x705))+(((-1.0)*x702*x703))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x707=((1.0)*gconst4);
CheckValue<IkReal> x708=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x708.valid){
continue;
}
CheckValue<IkReal> x709 = IKatan2WithCheck(IkReal((((gconst4*new_r01))+(((-1.0)*new_r10*x707)))),IkReal(((((-1.0)*new_r11*x707))+(((-1.0)*new_r00*x707)))),IKFAST_ATAN2_MAGTHRESH);
if(!x709.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x708.value)))+(x709.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x710=IKsin(j22);
IkReal x711=IKcos(j22);
IkReal x712=((1.0)*gconst5);
IkReal x713=(gconst4*x711);
IkReal x714=((1.0)*x710);
IkReal x715=(x710*x712);
evalcond[0]=(((new_r01*x711))+gconst4+((new_r11*x710)));
evalcond[1]=(((gconst5*x711))+((gconst4*x710))+new_r11);
evalcond[2]=((((-1.0)*x715))+x713+new_r01);
evalcond[3]=(gconst4+((new_r10*x711))+(((-1.0)*new_r00*x714)));
evalcond[4]=(gconst5+((new_r11*x711))+(((-1.0)*new_r01*x714)));
evalcond[5]=((((-1.0)*x715))+x713+new_r10);
evalcond[6]=(((new_r00*x711))+(((-1.0)*x712))+((new_r10*x710)));
evalcond[7]=((((-1.0)*x711*x712))+(((-1.0)*gconst4*x714))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
sj23=-1.0;
cj23=0;
j23=-1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j22eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j22]

} else
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x717 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x717.valid){
continue;
}
IkReal x716=x717.value;
j22array[0]=((-1.0)*x716);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=((3.14159265358979)+(((-1.0)*x716)));
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j22))))+((new_r10*(IKcos(j22)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j22]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x718=((1.0)*new_r11);
CheckValue<IkReal> x719 = IKatan2WithCheck(IkReal(((((-1.0)*sj24*x718))+((cj24*new_r01)))),IkReal(((((-1.0)*cj24*x718))+(((-1.0)*new_r01*sj24)))),IKFAST_ATAN2_MAGTHRESH);
if(!x719.valid){
continue;
}
CheckValue<IkReal> x720=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x720.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x719.value)+(((1.5707963267949)*(x720.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x721=IKcos(j22);
IkReal x722=IKsin(j22);
IkReal x723=((1.0)*cj24);
IkReal x724=(sj24*x721);
IkReal x725=(sj24*x722);
IkReal x726=((1.0)*x722);
IkReal x727=(x722*x723);
evalcond[0]=(((new_r01*x721))+sj24+((new_r11*x722)));
evalcond[1]=(x725+new_r11+((cj24*x721)));
evalcond[2]=((((-1.0)*x727))+x724+new_r01);
evalcond[3]=(sj24+(((-1.0)*new_r00*x726))+((new_r10*x721)));
evalcond[4]=(cj24+((new_r11*x721))+(((-1.0)*new_r01*x726)));
evalcond[5]=((((-1.0)*x727))+x724+new_r10);
evalcond[6]=(((new_r00*x721))+(((-1.0)*x723))+((new_r10*x722)));
evalcond[7]=((((-1.0)*x725))+(((-1.0)*x721*x723))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x728=((1.0)*sj24);
CheckValue<IkReal> x729 = IKatan2WithCheck(IkReal((((new_r01*sj24))+(((-1.0)*new_r10*x728)))),IkReal(((((-1.0)*new_r00*x728))+(((-1.0)*new_r11*x728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x729.valid){
continue;
}
CheckValue<IkReal> x730=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x730.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x729.value)+(((1.5707963267949)*(x730.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x731=IKcos(j22);
IkReal x732=IKsin(j22);
IkReal x733=((1.0)*cj24);
IkReal x734=(sj24*x731);
IkReal x735=(sj24*x732);
IkReal x736=((1.0)*x732);
IkReal x737=(x732*x733);
evalcond[0]=(((new_r01*x731))+sj24+((new_r11*x732)));
evalcond[1]=(x735+new_r11+((cj24*x731)));
evalcond[2]=((((-1.0)*x737))+x734+new_r01);
evalcond[3]=(sj24+(((-1.0)*new_r00*x736))+((new_r10*x731)));
evalcond[4]=(cj24+(((-1.0)*new_r01*x736))+((new_r11*x731)));
evalcond[5]=((((-1.0)*x737))+x734+new_r10);
evalcond[6]=(((new_r00*x731))+(((-1.0)*x733))+((new_r10*x732)));
evalcond[7]=((((-1.0)*x731*x733))+(((-1.0)*x735))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x738=IKPowWithIntegerCheck(IKsign((((new_r11*sj24))+((cj24*new_r01)))),-1);
if(!x738.valid){
continue;
}
CheckValue<IkReal> x739 = IKatan2WithCheck(IkReal(((-1.0)+(cj24*cj24)+(new_r01*new_r01))),IkReal(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj24*sj24)))),IKFAST_ATAN2_MAGTHRESH);
if(!x739.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x738.value)))+(x739.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x740=IKcos(j22);
IkReal x741=IKsin(j22);
IkReal x742=((1.0)*cj24);
IkReal x743=(sj24*x740);
IkReal x744=(sj24*x741);
IkReal x745=((1.0)*x741);
IkReal x746=(x741*x742);
evalcond[0]=(sj24+((new_r01*x740))+((new_r11*x741)));
evalcond[1]=(((cj24*x740))+x744+new_r11);
evalcond[2]=(x743+new_r01+(((-1.0)*x746)));
evalcond[3]=((((-1.0)*new_r00*x745))+sj24+((new_r10*x740)));
evalcond[4]=((((-1.0)*new_r01*x745))+cj24+((new_r11*x740)));
evalcond[5]=(x743+new_r10+(((-1.0)*x746)));
evalcond[6]=(((new_r10*x741))+((new_r00*x740))+(((-1.0)*x742)));
evalcond[7]=((((-1.0)*x740*x742))+(((-1.0)*x744))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j22eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j22eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j22eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j22]

} else
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x748 = IKatan2WithCheck(IkReal(((-1.0)*new_r10*new_r22)),IkReal((new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x748.valid){
continue;
}
IkReal x747=x748.value;
j22array[0]=((-1.0)*x747);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=((3.14159265358979)+(((-1.0)*x747)));
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[5];
IkReal x749=IKsin(j22);
IkReal x750=IKcos(j22);
IkReal x751=(new_r11*x750);
IkReal x752=(new_r01*x749);
evalcond[0]=(((new_r01*x750))+((new_r11*x749)));
evalcond[1]=(((new_r00*x750))+((new_r10*x749)));
evalcond[2]=((((-1.0)*new_r00*x749))+((new_r10*x750)));
evalcond[3]=((((-1.0)*x752))+x751);
evalcond[4]=((((-1.0)*new_r22*x751))+((new_r22*x752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x754 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x754.valid){
continue;
}
IkReal x753=x754.value;
j22array[0]=((-1.0)*x753);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=((3.14159265358979)+(((-1.0)*x753)));
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[5];
IkReal x755=IKcos(j22);
IkReal x756=IKsin(j22);
IkReal x757=((1.0)*new_r22);
IkReal x758=(new_r11*x755);
IkReal x759=(new_r10*x755);
IkReal x760=(new_r01*x756);
IkReal x761=(new_r00*x756);
evalcond[0]=(((new_r11*x756))+((new_r01*x755)));
evalcond[1]=((((-1.0)*x761))+x759);
evalcond[2]=((((-1.0)*x760))+x758);
evalcond[3]=(((new_r22*x761))+(((-1.0)*x757*x759)));
evalcond[4]=(((new_r22*x760))+(((-1.0)*x757*x758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
CheckValue<IkReal> x763 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x763.valid){
continue;
}
IkReal x762=x763.value;
j22array[0]=((-1.0)*x762);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=((3.14159265358979)+(((-1.0)*x762)));
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[5];
IkReal x764=IKcos(j22);
IkReal x765=IKsin(j22);
IkReal x766=((1.0)*new_r22);
IkReal x767=(new_r11*x764);
IkReal x768=(new_r10*x764);
IkReal x769=(new_r01*x765);
IkReal x770=(new_r00*x765);
evalcond[0]=(((new_r10*x765))+((new_r00*x764)));
evalcond[1]=(x768+(((-1.0)*x770)));
evalcond[2]=((((-1.0)*x769))+x767);
evalcond[3]=((((-1.0)*x766*x768))+((new_r22*x770)));
evalcond[4]=(((new_r22*x769))+(((-1.0)*x766*x767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j22]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x772=IKPowWithIntegerCheck(cj23,-1);
if(!x772.valid){
continue;
}
IkReal x771=x772.value;
CheckValue<IkReal> x773=IKPowWithIntegerCheck(new_r11,-1);
if(!x773.valid){
continue;
}
if( IKabs((x771*(x773.value)*((((new_r01*new_r12))+(((-1.0)*cj23*sj24)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x771)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x771*(x773.value)*((((new_r01*new_r12))+(((-1.0)*cj23*sj24))))))+IKsqr(((-1.0)*new_r12*x771))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((x771*(x773.value)*((((new_r01*new_r12))+(((-1.0)*cj23*sj24))))), ((-1.0)*new_r12*x771));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[18];
IkReal x774=IKsin(j22);
IkReal x775=IKcos(j22);
IkReal x776=((1.0)*cj24);
IkReal x777=((1.0)*sj23);
IkReal x778=((1.0)*cj23);
IkReal x779=(sj23*x774);
IkReal x780=(new_r10*x775);
IkReal x781=((1.0)*x775);
IkReal x782=((1.0)*x774);
IkReal x783=(cj23*x774);
evalcond[0]=(((cj23*x775))+new_r12);
evalcond[1]=((((-1.0)*x774*x778))+new_r02);
evalcond[2]=(((new_r12*x774))+((new_r02*x775)));
evalcond[3]=(sj24+((new_r11*x774))+((new_r01*x775)));
evalcond[4]=(((new_r12*x775))+cj23+(((-1.0)*new_r02*x782)));
evalcond[5]=(((sj24*x775))+((cj24*x779))+new_r01);
evalcond[6]=(((new_r00*x775))+((new_r10*x774))+(((-1.0)*x776)));
evalcond[7]=(((sj24*x779))+(((-1.0)*x775*x776))+new_r00);
evalcond[8]=(((sj24*x774))+(((-1.0)*sj23*x775*x776))+new_r11);
evalcond[9]=((((-1.0)*x774*x776))+(((-1.0)*sj24*x775*x777))+new_r10);
evalcond[10]=((((-1.0)*sj24*x777))+x780+(((-1.0)*new_r00*x782)));
evalcond[11]=((((-1.0)*new_r01*x782))+((new_r11*x775))+(((-1.0)*sj23*x776)));
evalcond[12]=(((new_r20*sj23))+((new_r00*x783))+(((-1.0)*x778*x780)));
evalcond[13]=(((new_r21*sj23))+(((-1.0)*new_r11*x775*x778))+((new_r01*x783)));
evalcond[14]=((((-1.0)*new_r12*x775*x777))+(((-1.0)*new_r22*x778))+((new_r02*x779)));
evalcond[15]=((-1.0)+(((-1.0)*new_r12*x775*x778))+((new_r02*x783))+((new_r22*sj23)));
evalcond[16]=((((-1.0)*new_r20*x778))+(((-1.0)*x777*x780))+sj24+((new_r00*x779)));
evalcond[17]=((((-1.0)*new_r11*x775*x777))+cj24+(((-1.0)*new_r21*x778))+((new_r01*x779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x784=IKPowWithIntegerCheck(IKsign(cj23),-1);
if(!x784.valid){
continue;
}
CheckValue<IkReal> x785 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x785.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x784.value)))+(x785.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[18];
IkReal x786=IKsin(j22);
IkReal x787=IKcos(j22);
IkReal x788=((1.0)*cj24);
IkReal x789=((1.0)*sj23);
IkReal x790=((1.0)*cj23);
IkReal x791=(sj23*x786);
IkReal x792=(new_r10*x787);
IkReal x793=((1.0)*x787);
IkReal x794=((1.0)*x786);
IkReal x795=(cj23*x786);
evalcond[0]=(new_r12+((cj23*x787)));
evalcond[1]=((((-1.0)*x786*x790))+new_r02);
evalcond[2]=(((new_r12*x786))+((new_r02*x787)));
evalcond[3]=(((new_r11*x786))+sj24+((new_r01*x787)));
evalcond[4]=(((new_r12*x787))+cj23+(((-1.0)*new_r02*x794)));
evalcond[5]=(((sj24*x787))+new_r01+((cj24*x791)));
evalcond[6]=(((new_r10*x786))+(((-1.0)*x788))+((new_r00*x787)));
evalcond[7]=(((sj24*x791))+(((-1.0)*x787*x788))+new_r00);
evalcond[8]=((((-1.0)*sj23*x787*x788))+((sj24*x786))+new_r11);
evalcond[9]=((((-1.0)*x786*x788))+new_r10+(((-1.0)*sj24*x787*x789)));
evalcond[10]=(x792+(((-1.0)*sj24*x789))+(((-1.0)*new_r00*x794)));
evalcond[11]=((((-1.0)*new_r01*x794))+((new_r11*x787))+(((-1.0)*sj23*x788)));
evalcond[12]=(((new_r20*sj23))+(((-1.0)*x790*x792))+((new_r00*x795)));
evalcond[13]=(((new_r21*sj23))+(((-1.0)*new_r11*x787*x790))+((new_r01*x795)));
evalcond[14]=((((-1.0)*new_r22*x790))+((new_r02*x791))+(((-1.0)*new_r12*x787*x789)));
evalcond[15]=((-1.0)+((new_r02*x795))+((new_r22*sj23))+(((-1.0)*new_r12*x787*x790)));
evalcond[16]=(sj24+((new_r00*x791))+(((-1.0)*x789*x792))+(((-1.0)*new_r20*x790)));
evalcond[17]=((((-1.0)*new_r21*x790))+(((-1.0)*new_r11*x787*x789))+cj24+((new_r01*x791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - teoSim (fdf8260357721dc324e75e8bfc9da158)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
