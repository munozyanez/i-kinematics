/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-05-09 17:51:09.294294
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfastRightLeg.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast_rl;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42;
x0=IKcos(j[2]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[4]);
x9=IKcos(j[5]);
x10=IKcos(j[1]);
x11=IKsin(j[5]);
x12=((1.0)*x5);
x13=((0.3)*x3);
x14=((1.0)*x8);
x15=((1.0)*x7);
x16=((0.3)*x1);
x17=((1.0)*x1);
x18=((1.0)*x6);
x19=((0.33)*x3);
x20=((1.0)*x3);
x21=((0.33)*x1);
x22=(x10*x3);
x23=(x0*x2);
x24=((-1.0)*x6);
x25=(x10*x4);
x26=(x0*x10);
x27=((-1.0)*x5);
x28=(x2*x4);
x29=(x0*x3);
x30=(x17*x28);
x31=(x12*x26);
x32=(((x23*x3))+(((-1.0)*x17*x4)));
x33=((((-1.0)*x0*x20))+x30);
x34=((((-1.0)*x17*x23))+(((-1.0)*x20*x4)));
x35=((((-1.0)*x0*x17))+(((-1.0)*x20*x28)));
x36=(x32*x5);
x37=((((-1.0)*x18*x25))+x31);
x38=(x33*x6);
x39=((((-1.0)*x12*x25))+(((-1.0)*x18*x26)));
x40=(((x32*x6))+((x5*((((x0*x1))+((x28*x3)))))));
x41=(((x34*x6))+((x5*(((((-1.0)*x30))+x29)))));
x42=(((x27*x32))+((x24*x35)));
eerot[0]=(((x41*x8))+((x7*((((x34*x5))+x38)))));
eerot[1]=((((-1.0)*x11*((((x15*x41))+((x14*(((((-1.0)*x18*x33))+(((-1.0)*x12*x34))))))))))+(((-1.0)*x10*x17*x9)));
eerot[2]=(((x9*((((x41*x7))+((x8*((((x27*x34))+((x24*x33))))))))))+(((-1.0)*x10*x11*x17)));
IkReal x43=((1.0)*x23);
IkReal x44=((1.0)*x13);
eetrans[0]=((((-1.0)*x21*x43))+(((-1.0)*x19*x4))+(((-0.0175)*x1*x10))+((x6*(((((-1.0)*x0*x44))+((x16*x28))))))+((x5*(((((-1.0)*x4*x44))+(((-1.0)*x16*x43)))))));
eerot[3]=(((x7*((((x35*x6))+x36))))+((x40*x8)));
eerot[4]=(((x11*(((((-1.0)*x15*x40))+(((-1.0)*x14*x42))))))+((x22*x9)));
eerot[5]=(((x11*x22))+((x9*((((x42*x8))+((x40*x7)))))));
IkReal x45=((1.0)*x16);
eetrans[1]=((-0.146)+(((-1.0)*x21*x4))+(((0.0175)*x22))+((x19*x23))+((x6*(((((-1.0)*x13*x28))+(((-1.0)*x0*x45))))))+((x5*(((((-1.0)*x4*x45))+((x13*x23)))))));
eerot[6]=(((x7*(((((-1.0)*x31))+((x25*x6))))))+((x39*x8)));
eerot[7]=(((x11*(((((-1.0)*x14*x37))+(((-1.0)*x15*x39))))))+((x2*x9)));
eerot[8]=(((x9*((((x39*x7))+((x37*x8))))))+((x11*x2)));
eetrans[2]=((-0.092)+(((0.0175)*x2))+(((-0.3)*x26*x5))+(((-0.33)*x26))+(((0.3)*x25*x6)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j16,cj16,sj16,htj16,j16mul,j17,cj17,sj17,htj17,j17mul,j18,cj18,sj18,htj18,j18mul,j19,cj19,sj19,htj19,j19mul,j20,cj20,sj20,htj20,j20mul,j21,cj21,sj21,htj21,j21mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij16[2], _nj16,_ij17[2], _nj17,_ij18[2], _nj18,_ij19[2], _nj19,_ij20[2], _nj20,_ij21[2], _nj21;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1; j18=numeric_limits<IkReal>::quiet_NaN(); _ij18[0] = -1; _ij18[1] = -1; _nj18 = -1; j19=numeric_limits<IkReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; j20=numeric_limits<IkReal>::quiet_NaN(); _ij20[0] = -1; _ij20[1] = -1; _nj20 = -1; j21=numeric_limits<IkReal>::quiet_NaN(); _ij21[0] = -1; _ij21[1] = -1; _nj21 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r01;
new_r02=((-1.0)*r00);
new_px=px;
new_r10=r12;
new_r11=r11;
new_r12=((-1.0)*r10);
new_py=((0.146)+py);
new_r20=r22;
new_r21=r21;
new_r22=((-1.0)*r20);
new_pz=((0.092)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x46=((1.0)*px);
IkReal x47=((1.0)*pz);
IkReal x48=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x48))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x47)));
rxp0_2=((((-1.0)*r10*x46))+((py*r00)));
rxp1_0=((((-1.0)*r21*x48))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x47)));
rxp1_2=((((-1.0)*r11*x46))+((py*r01)));
rxp2_0=((((-1.0)*r22*x48))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x47))+((px*r22)));
rxp2_2=((((-1.0)*r12*x46))+((py*r02)));
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
cj19array[0]=((-1.00609217171717)+(((5.05050505050505)*pp)));
if( cj19array[0] >= -1-IKFAST_SINCOS_THRESH && cj19array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j19valid[0] = j19valid[1] = true;
    j19array[0] = IKacos(cj19array[0]);
    sj19array[0] = IKsin(j19array[0]);
    cj19array[1] = cj19array[0];
    j19array[1] = -j19array[0];
    sj19array[1] = -sj19array[0];
}
else if( isnan(cj19array[0]) )
{
    // probably any value will work
    j19valid[0] = true;
    cj19array[0] = 1; sj19array[0] = 0; j19array[0] = 0;
}
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IkReal j21eval[2];
j21eval[0]=((IKabs(npy))+(IKabs(npx)));
j21eval[1]=((npx*npx)+(npy*npy));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  )
{
{
IkReal j20eval[2];
j20eval[0]=((1.0)+(((1.21)*(sj19*sj19)))+(((1.21)*(cj19*cj19)))+(((2.2)*cj19)));
j20eval[1]=((IKabs(sj19))+(((3.03030303030303)*(IKabs(((-0.3)+(((-0.33)*cj19))))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j20, j21]

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
IkReal x49=((-0.3)+(((-0.33)*cj19)));
CheckValue<IkReal> x52 = IKatan2WithCheck(IkReal(((-0.33)*sj19)),IkReal(x49),IKFAST_ATAN2_MAGTHRESH);
if(!x52.valid){
continue;
}
IkReal x50=((1.0)*(x52.value));
if((((((0.1089)*(sj19*sj19)))+(x49*x49))) < -0.00001)
continue;
CheckValue<IkReal> x53=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.1089)*(sj19*sj19)))+(x49*x49)))),-1);
if(!x53.valid){
continue;
}
if( ((npz*(x53.value))) < -1-IKFAST_SINCOS_THRESH || ((npz*(x53.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x51=IKasin((npz*(x53.value)));
j20array[0]=(x51+(((-1.0)*x50)));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
j20array[1]=((3.14159265358979)+(((-1.0)*x50))+(((-1.0)*x51)));
sj20array[1]=IKsin(j20array[1]);
cj20array[1]=IKcos(j20array[1]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
if( j20array[1] > IKPI )
{
    j20array[1]-=IK2PI;
}
else if( j20array[1] < -IKPI )
{    j20array[1]+=IK2PI;
}
j20valid[1] = true;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IkReal j21eval[3];
IkReal x54=npy*npy;
IkReal x55=npx*npx;
IkReal x56=((132.0)*sj19);
IkReal x57=((7.0)*sj20);
IkReal x58=((400.0)*cj20*npz);
IkReal x59=(sj20*x54);
IkReal x60=(sj20*x55);
j21eval[0]=(x59+x60);
j21eval[1]=IKsign(((((400.0)*x60))+(((400.0)*x59))));
j21eval[2]=((IKabs((((npx*x58))+((npx*x56))+((npy*x57)))))+(IKabs((((npx*x57))+(((-1.0)*npy*x58))+(((-1.0)*npy*x56))))));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
{
IkReal j21eval[3];
IkReal x61=npy*npy;
IkReal x62=npx*npx;
IkReal x63=((7.0)*cj20);
IkReal x64=((400.0)*cj20);
IkReal x65=((132.0)*cj19);
IkReal x66=((400.0)*npz*sj20);
j21eval[0]=(((cj20*x62))+((cj20*x61)));
j21eval[1]=((IKabs((((npy*x63))+(((-120.0)*npx))+(((-1.0)*npx*x65))+(((-1.0)*npx*x66)))))+(IKabs(((((120.0)*npy))+((npx*x63))+((npy*x65))+((npy*x66))))));
j21eval[2]=IKsign((((x62*x64))+((x61*x64))));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
{
IkReal j21eval[3];
IkReal x67=npy*npy;
IkReal x68=npx*npx;
IkReal x69=(cj20*npy);
IkReal x70=((132.0)*cj19);
IkReal x71=(cj20*npx);
IkReal x72=((132.0)*sj19*sj20);
j21eval[0]=(x67+x68);
j21eval[1]=IKsign(((((400.0)*x68))+(((400.0)*x67))));
j21eval[2]=((IKabs((((npx*x72))+(((-1.0)*x70*x71))+(((-120.0)*x71))+(((7.0)*npy)))))+(IKabs(((((120.0)*x69))+(((-1.0)*npy*x72))+((x69*x70))+(((7.0)*npx))))));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j20)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j21eval[3];
sj20=1.0;
cj20=0;
j20=1.5707963267949;
IkReal x73=npy*npy;
IkReal x74=npx*npx;
IkReal x75=((132.0)*sj19);
j21eval[0]=(x74+x73);
j21eval[1]=((IKabs((((npx*x75))+(((7.0)*npy)))))+(IKabs(((((-1.0)*npy*x75))+(((7.0)*npx))))));
j21eval[2]=IKsign(((((400.0)*x73))+(((400.0)*x74))));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j21]

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x76=((132.0)*sj19);
CheckValue<IkReal> x77 = IKatan2WithCheck(IkReal(((((-1.0)*npy*x76))+(((7.0)*npx)))),IkReal((((npx*x76))+(((7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x77.valid){
continue;
}
CheckValue<IkReal> x78=IKPowWithIntegerCheck(IKsign(((((400.0)*(npy*npy)))+(((400.0)*(npx*npx))))),-1);
if(!x78.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(x77.value)+(((1.5707963267949)*(x78.value))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[2];
IkReal x79=IKsin(j21);
IkReal x80=IKcos(j21);
IkReal x81=((1.0)*x80);
evalcond[0]=((0.0175)+(((-1.0)*npy*x81))+(((-1.0)*npx*x79)));
evalcond[1]=(((npy*x79))+(((-1.0)*npx*x81))+(((0.33)*sj19)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j20)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j21eval[3];
sj20=-1.0;
cj20=0;
j20=-1.5707963267949;
IkReal x914=npy*npy;
IkReal x915=npx*npx;
IkReal x916=((132.0)*sj19);
j21eval[0]=(x915+x914);
j21eval[1]=((IKabs((((npy*x916))+(((7.0)*npx)))))+(IKabs(((((-1.0)*npx*x916))+(((7.0)*npy))))));
j21eval[2]=IKsign(((((400.0)*x915))+(((400.0)*x914))));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j21]

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x917=((132.0)*sj19);
CheckValue<IkReal> x918 = IKatan2WithCheck(IkReal((((npy*x917))+(((7.0)*npx)))),IkReal(((((-1.0)*npx*x917))+(((7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x918.valid){
continue;
}
CheckValue<IkReal> x919=IKPowWithIntegerCheck(IKsign(((((400.0)*(npy*npy)))+(((400.0)*(npx*npx))))),-1);
if(!x919.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(x918.value)+(((1.5707963267949)*(x919.value))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[2];
IkReal x920=IKcos(j21);
IkReal x921=IKsin(j21);
IkReal x922=((1.0)*npy);
evalcond[0]=((0.0175)+(((-1.0)*x920*x922))+(((-1.0)*npx*x921)));
evalcond[1]=(((npx*x920))+(((-1.0)*x921*x922))+(((0.33)*sj19)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j20))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j21eval[3];
sj20=0;
cj20=1.0;
j20=0;
IkReal x923=npy*npy;
IkReal x924=npx*npx;
IkReal x925=((132.0)*cj19);
j21eval[0]=(x924+x923);
j21eval[1]=((IKabs(((((120.0)*npy))+((npy*x925))+(((7.0)*npx)))))+(IKabs(((((-1.0)*npx*x925))+(((-120.0)*npx))+(((7.0)*npy))))));
j21eval[2]=IKsign(((((400.0)*x923))+(((400.0)*x924))));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j21]

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x926=((132.0)*cj19);
CheckValue<IkReal> x927=IKPowWithIntegerCheck(IKsign(((((400.0)*(npy*npy)))+(((400.0)*(npx*npx))))),-1);
if(!x927.valid){
continue;
}
CheckValue<IkReal> x928 = IKatan2WithCheck(IkReal(((((120.0)*npy))+((npy*x926))+(((7.0)*npx)))),IkReal(((((-1.0)*npx*x926))+(((-120.0)*npx))+(((7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x928.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(((1.5707963267949)*(x927.value)))+(x928.value));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[2];
IkReal x929=IKcos(j21);
IkReal x930=IKsin(j21);
IkReal x931=((1.0)*npy);
evalcond[0]=((0.0175)+(((-1.0)*x929*x931))+(((-1.0)*npx*x930)));
evalcond[1]=((0.3)+(((0.33)*cj19))+(((-1.0)*x930*x931))+((npx*x929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j20)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j21eval[3];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
IkReal x932=npy*npy;
IkReal x933=npx*npx;
IkReal x934=((132.0)*cj19);
j21eval[0]=(x933+x932);
j21eval[1]=((IKabs(((((-1.0)*npy*x934))+(((-120.0)*npy))+(((7.0)*npx)))))+(IKabs(((((120.0)*npx))+((npx*x934))+(((7.0)*npy))))));
j21eval[2]=IKsign(((((400.0)*x932))+(((400.0)*x933))));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j21]

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x935=((132.0)*cj19);
CheckValue<IkReal> x936=IKPowWithIntegerCheck(IKsign(((((400.0)*(npy*npy)))+(((400.0)*(npx*npx))))),-1);
if(!x936.valid){
continue;
}
CheckValue<IkReal> x937 = IKatan2WithCheck(IkReal(((((-1.0)*npy*x935))+(((-120.0)*npy))+(((7.0)*npx)))),IkReal(((((120.0)*npx))+((npx*x935))+(((7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x937.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(((1.5707963267949)*(x936.value)))+(x937.value));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[2];
IkReal x938=IKsin(j21);
IkReal x939=IKcos(j21);
IkReal x940=((1.0)*x939);
evalcond[0]=((0.0175)+(((-1.0)*npy*x940))+(((-1.0)*npx*x938)));
evalcond[1]=((0.3)+(((0.33)*cj19))+((npy*x938))+(((-1.0)*npx*x940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j21]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x941=((120.0)*cj20);
IkReal x942=((132.0)*npx);
IkReal x943=(cj19*cj20);
IkReal x944=(sj19*sj20);
IkReal x945=((132.0)*npy);
CheckValue<IkReal> x946=IKPowWithIntegerCheck(IKsign(((((400.0)*(npy*npy)))+(((400.0)*(npx*npx))))),-1);
if(!x946.valid){
continue;
}
CheckValue<IkReal> x947 = IKatan2WithCheck(IkReal((((x943*x945))+(((-1.0)*x944*x945))+(((7.0)*npx))+((npy*x941)))),IkReal(((((-1.0)*npx*x941))+(((-1.0)*x942*x943))+((x942*x944))+(((7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x947.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(((1.5707963267949)*(x946.value)))+(x947.value));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x948=IKsin(j21);
IkReal x949=IKcos(j21);
IkReal x950=((1.0)*npy);
IkReal x951=((0.33)*sj19);
IkReal x952=((0.33)*cj19);
IkReal x953=(npy*x948);
IkReal x954=((1.0)*npx*x949);
evalcond[0]=((0.0175)+(((-1.0)*x949*x950))+(((-1.0)*npx*x948)));
evalcond[1]=((((-1.0)*sj20*x954))+((sj20*x953))+((cj20*npz))+x951);
evalcond[2]=((0.3)+((cj20*npx*x949))+((npz*sj20))+(((-1.0)*cj20*x948*x950))+x952);
evalcond[3]=(((sj20*x951))+(((-0.3)*cj20))+(((-1.0)*cj20*x952))+(((-1.0)*x954))+x953);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x955=((7.0)*cj20);
IkReal x956=((400.0)*cj20);
IkReal x957=((132.0)*cj19);
IkReal x958=((400.0)*npz*sj20);
CheckValue<IkReal> x959=IKPowWithIntegerCheck(IKsign((((x956*(npx*npx)))+((x956*(npy*npy))))),-1);
if(!x959.valid){
continue;
}
CheckValue<IkReal> x960 = IKatan2WithCheck(IkReal(((((120.0)*npy))+((npy*x957))+((npy*x958))+((npx*x955)))),IkReal((((npy*x955))+(((-120.0)*npx))+(((-1.0)*npx*x957))+(((-1.0)*npx*x958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x960.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(((1.5707963267949)*(x959.value)))+(x960.value));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x961=IKsin(j21);
IkReal x962=IKcos(j21);
IkReal x963=((1.0)*npy);
IkReal x964=((0.33)*sj19);
IkReal x965=((0.33)*cj19);
IkReal x966=(npy*x961);
IkReal x967=((1.0)*npx*x962);
evalcond[0]=((0.0175)+(((-1.0)*x962*x963))+(((-1.0)*npx*x961)));
evalcond[1]=((((-1.0)*sj20*x967))+((sj20*x966))+((cj20*npz))+x964);
evalcond[2]=((0.3)+((cj20*npx*x962))+((npz*sj20))+(((-1.0)*cj20*x961*x963))+x965);
evalcond[3]=(((sj20*x964))+(((-0.3)*cj20))+(((-1.0)*cj20*x965))+x966+(((-1.0)*x967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x968=((400.0)*sj20);
IkReal x969=((132.0)*sj19);
IkReal x970=((7.0)*sj20);
IkReal x971=((400.0)*cj20*npz);
CheckValue<IkReal> x972 = IKatan2WithCheck(IkReal(((((-1.0)*npy*x971))+((npx*x970))+(((-1.0)*npy*x969)))),IkReal((((npy*x970))+((npx*x969))+((npx*x971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x972.valid){
continue;
}
CheckValue<IkReal> x973=IKPowWithIntegerCheck(IKsign((((x968*(npy*npy)))+((x968*(npx*npx))))),-1);
if(!x973.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(x972.value)+(((1.5707963267949)*(x973.value))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x974=IKsin(j21);
IkReal x975=IKcos(j21);
IkReal x976=((1.0)*npy);
IkReal x977=((0.33)*sj19);
IkReal x978=((0.33)*cj19);
IkReal x979=(npy*x974);
IkReal x980=((1.0)*npx*x975);
evalcond[0]=((0.0175)+(((-1.0)*npx*x974))+(((-1.0)*x975*x976)));
evalcond[1]=((((-1.0)*sj20*x980))+((sj20*x979))+((cj20*npz))+x977);
evalcond[2]=((0.3)+((cj20*npx*x975))+(((-1.0)*cj20*x974*x976))+((npz*sj20))+x978);
evalcond[3]=((((-1.0)*x980))+((sj20*x977))+(((-0.3)*cj20))+x979+(((-1.0)*cj20*x978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j21array[2], cj21array[2], sj21array[2];
bool j21valid[2]={false};
_nj21 = 2;
CheckValue<IkReal> x983 = IKatan2WithCheck(IkReal(((-1.0)*npy)),IkReal(((-1.0)*npx)),IKFAST_ATAN2_MAGTHRESH);
if(!x983.valid){
continue;
}
IkReal x981=((1.0)*(x983.value));
if((((npx*npx)+(npy*npy))) < -0.00001)
continue;
CheckValue<IkReal> x984=IKPowWithIntegerCheck(IKabs(IKsqrt(((npx*npx)+(npy*npy)))),-1);
if(!x984.valid){
continue;
}
if( (((0.0175)*(x984.value))) < -1-IKFAST_SINCOS_THRESH || (((0.0175)*(x984.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x982=IKasin(((0.0175)*(x984.value)));
j21array[0]=((((-1.0)*x981))+(((-1.0)*x982)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
j21array[1]=((3.14159265358979)+(((-1.0)*x981))+x982);
sj21array[1]=IKsin(j21array[1]);
cj21array[1]=IKcos(j21array[1]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
if( j21array[1] > IKPI )
{
    j21array[1]-=IK2PI;
}
else if( j21array[1] < -IKPI )
{    j21array[1]+=IK2PI;
}
j21valid[1] = true;
for(int ij21 = 0; ij21 < 2; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 2; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
IkReal j20eval[3];
IkReal x985=((3300.0)*cj19);
IkReal x986=(cj21*npx);
IkReal x987=((3300.0)*sj19);
IkReal x988=(npy*sj21);
j20eval[0]=((1.00454545454545)+cj19);
j20eval[1]=((IKabs((((x986*x987))+(((-1.0)*npz*x985))+(((-3000.0)*npz))+(((-1.0)*x987*x988)))))+(IKabs(((((-3000.0)*x986))+(((-1.0)*npz*x987))+(((3000.0)*x988))+((x985*x988))+(((-1.0)*x985*x986))))));
j20eval[2]=IKsign(((1989.0)+(((1980.0)*cj19))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
IkReal x989=(npy*sj21);
IkReal x990=((100.0)*npz);
IkReal x991=(npz*sj19);
IkReal x992=(cj21*npx);
IkReal x993=(cj19*x992);
j20eval[0]=((((1.1)*x991))+(((-1.0)*x992))+(((-1.1)*x993))+(((1.1)*cj19*x989))+x989);
j20eval[1]=((IKabs(((9.0)+(((19.8)*cj19))+(((10.89)*(cj19*cj19)))+(((-1.0)*npz*x990)))))+(IKabs(((((-10.89)*cj19*sj19))+((x990*x992))+(((-9.9)*sj19))+(((-1.0)*x989*x990))))));
j20eval[2]=IKsign(((((33.0)*cj19*x989))+(((30.0)*x989))+(((-33.0)*x993))+(((33.0)*x991))+(((-30.0)*x992))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
IkReal x994=cj21*cj21;
IkReal x995=npy*npy;
IkReal x996=npz*npz;
IkReal x997=npx*npx;
IkReal x998=((33.0)*sj19);
IkReal x999=(npy*sj21);
IkReal x1000=(cj21*npx);
IkReal x1001=((33.0)*cj19);
IkReal x1002=((100.0)*x995);
IkReal x1003=(x994*x997);
j20eval[0]=((((-1.0)*x996))+(((-1.0)*x995))+(((-1.0)*x1003))+((x994*x995))+(((2.0)*x1000*x999)));
j20eval[1]=((IKabs((((x1000*x1001))+((npz*x998))+(((-1.0)*x1001*x999))+(((30.0)*x1000))+(((-30.0)*x999)))))+(IKabs((((x998*x999))+(((30.0)*npz))+((npz*x1001))+(((-1.0)*x1000*x998))))));
j20eval[2]=IKsign(((((-1.0)*x1002))+(((-100.0)*x1003))+(((-100.0)*x996))+((x1002*x994))+(((200.0)*x1000*x999))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j20]

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1004=npy*npy;
IkReal x1005=cj21*cj21;
IkReal x1006=((33.0)*sj19);
IkReal x1007=(npy*sj21);
IkReal x1008=(cj21*npx);
IkReal x1009=((33.0)*cj19);
IkReal x1010=((100.0)*x1005);
CheckValue<IkReal> x1011=IKPowWithIntegerCheck(IKsign(((((-100.0)*x1004))+(((-100.0)*(npz*npz)))+(((200.0)*x1007*x1008))+((x1004*x1010))+(((-1.0)*x1010*(npx*npx))))),-1);
if(!x1011.valid){
continue;
}
CheckValue<IkReal> x1012 = IKatan2WithCheck(IkReal(((((30.0)*npz))+(((-1.0)*x1006*x1008))+((npz*x1009))+((x1006*x1007)))),IkReal((((x1008*x1009))+(((-30.0)*x1007))+((npz*x1006))+(((-1.0)*x1007*x1009))+(((30.0)*x1008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1012.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1011.value)))+(x1012.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[4];
IkReal x1013=IKsin(j20);
IkReal x1014=IKcos(j20);
IkReal x1015=((0.33)*sj19);
IkReal x1016=(npy*sj21);
IkReal x1017=(cj21*npx);
IkReal x1018=((0.33)*cj19);
evalcond[0]=((((-1.0)*x1014*x1015))+(((-1.0)*npz))+(((-1.0)*x1013*x1018))+(((-0.3)*x1013)));
evalcond[1]=(x1015+(((-1.0)*x1013*x1017))+((x1013*x1016))+((npz*x1014)));
evalcond[2]=((0.3)+((x1014*x1017))+x1018+(((-1.0)*x1014*x1016))+((npz*x1013)));
evalcond[3]=(x1016+(((-1.0)*x1014*x1018))+((x1013*x1015))+(((-0.3)*x1014))+(((-1.0)*x1017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1019=((100.0)*npz);
IkReal x1020=(npy*sj21);
IkReal x1021=(cj21*npx);
IkReal x1022=((33.0)*cj19);
CheckValue<IkReal> x1023=IKPowWithIntegerCheck(IKsign(((((-30.0)*x1021))+(((-1.0)*x1021*x1022))+(((30.0)*x1020))+((x1020*x1022))+(((33.0)*npz*sj19)))),-1);
if(!x1023.valid){
continue;
}
CheckValue<IkReal> x1024 = IKatan2WithCheck(IkReal(((((-10.89)*cj19*sj19))+(((-9.9)*sj19))+(((-1.0)*x1019*x1020))+((x1019*x1021)))),IkReal(((9.0)+(((19.8)*cj19))+(((10.89)*(cj19*cj19)))+(((-1.0)*npz*x1019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1024.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1023.value)))+(x1024.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[4];
IkReal x1025=IKsin(j20);
IkReal x1026=IKcos(j20);
IkReal x1027=((0.33)*sj19);
IkReal x1028=(npy*sj21);
IkReal x1029=(cj21*npx);
IkReal x1030=((0.33)*cj19);
evalcond[0]=((((-1.0)*x1025*x1030))+(((-1.0)*x1026*x1027))+(((-1.0)*npz))+(((-0.3)*x1025)));
evalcond[1]=(x1027+((npz*x1026))+((x1025*x1028))+(((-1.0)*x1025*x1029)));
evalcond[2]=((0.3)+(((-1.0)*x1026*x1028))+x1030+((npz*x1025))+((x1026*x1029)));
evalcond[3]=(x1028+(((-1.0)*x1029))+(((-1.0)*x1026*x1030))+(((-0.3)*x1026))+((x1025*x1027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1031=((3300.0)*cj19);
IkReal x1032=(cj21*npx);
IkReal x1033=((3300.0)*sj19);
IkReal x1034=(npy*sj21);
CheckValue<IkReal> x1035=IKPowWithIntegerCheck(IKsign(((1989.0)+(((1980.0)*cj19)))),-1);
if(!x1035.valid){
continue;
}
CheckValue<IkReal> x1036 = IKatan2WithCheck(IkReal(((((-1.0)*x1033*x1034))+(((-3000.0)*npz))+(((-1.0)*npz*x1031))+((x1032*x1033)))),IkReal((((x1031*x1034))+(((3000.0)*x1034))+(((-3000.0)*x1032))+(((-1.0)*x1031*x1032))+(((-1.0)*npz*x1033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1036.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1035.value)))+(x1036.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[4];
IkReal x1037=IKsin(j20);
IkReal x1038=IKcos(j20);
IkReal x1039=((0.33)*sj19);
IkReal x1040=(npy*sj21);
IkReal x1041=(cj21*npx);
IkReal x1042=((0.33)*cj19);
evalcond[0]=((((-1.0)*x1038*x1039))+(((-1.0)*npz))+(((-1.0)*x1037*x1042))+(((-0.3)*x1037)));
evalcond[1]=(x1039+((x1037*x1040))+(((-1.0)*x1037*x1041))+((npz*x1038)));
evalcond[2]=((0.3)+((x1038*x1041))+x1042+(((-1.0)*x1038*x1040))+((npz*x1037)));
evalcond[3]=(x1040+(((-1.0)*x1038*x1042))+(((-1.0)*x1041))+((x1037*x1039))+(((-0.3)*x1038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x82=((1.0)*cj21);
IkReal x83=((1.0)*sj19);
IkReal x84=((1.0)*sj20);
IkReal x85=((-1.0)*sj20);
IkReal x86=((-1.0)*cj20);
IkReal x87=(((r01*sj21))+(((-1.0)*r00*x82)));
IkReal x88=((((-1.0)*r10*x82))+((r11*sj21)));
IkReal x89=((((-1.0)*r20*x82))+((r21*sj21)));
IkReal x90=((((-1.0)*r02*x84))+((cj20*x87)));
IkReal x91=((((-1.0)*r12*x84))+((cj20*x88)));
IkReal x92=((((-1.0)*r22*x84))+((cj20*x89)));
IkReal x93=(((x85*x87))+((r02*x86)));
IkReal x94=(((r12*x86))+((x85*x88)));
IkReal x95=(((x85*x89))+((r22*x86)));
new_r00=((((-1.0)*x83*x90))+((cj19*x93)));
new_r01=(((sj19*x93))+((cj19*x90)));
new_r02=(((r00*sj21))+((cj21*r01)));
new_r10=((((-1.0)*x83*x91))+((cj19*x94)));
new_r11=(((sj19*x94))+((cj19*x91)));
new_r12=(((r10*sj21))+((cj21*r11)));
new_r20=((((-1.0)*x83*x92))+((cj19*x95)));
new_r21=(((sj19*x95))+((cj19*x92)));
new_r22=(((r20*sj21))+((cj21*r21)));
{
IkReal j17array[2], cj17array[2], sj17array[2];
bool j17valid[2]={false};
_nj17 = 2;
sj17array[0]=new_r22;
if( sj17array[0] >= -1-IKFAST_SINCOS_THRESH && sj17array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j17valid[0] = j17valid[1] = true;
    j17array[0] = IKasin(sj17array[0]);
    cj17array[0] = IKcos(j17array[0]);
    sj17array[1] = sj17array[0];
    j17array[1] = j17array[0] > 0 ? (IKPI-j17array[0]) : (-IKPI-j17array[0]);
    cj17array[1] = -cj17array[0];
}
else if( isnan(sj17array[0]) )
{
    // probably any value will work
    j17valid[0] = true;
    cj17array[0] = 1; sj17array[0] = 0; j17array[0] = 0;
}
for(int ij17 = 0; ij17 < 2; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 2; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];

{
IkReal j16eval[3];
j16eval[0]=cj17;
j16eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j16eval[2]=IKsign(cj17);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[3];
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
j16eval[0]=cj17;
j16eval[1]=new_r12;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j18mul = 1;
j18=0;
j16mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].fmul = j16mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].fmul = j18mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j18mul = 1;
j18=0;
j16mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].fmul = j16mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].fmul = j18mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x96=new_r22*new_r22;
IkReal x97=((16.0)*new_r10);
IkReal x98=((16.0)*new_r01);
IkReal x99=((16.0)*new_r00);
IkReal x100=(new_r11*new_r22);
IkReal x101=((8.0)*new_r00);
IkReal x102=(x96*x97);
IkReal x103=(x96*x98);
j16eval[0]=((IKabs(((((-1.0)*x102))+x97)))+(IKabs((((new_r22*x101))+(((-8.0)*new_r11)))))+(IKabs((((x101*x96))+(((-8.0)*x100)))))+(IKabs(((((-32.0)*new_r11*x96))+((new_r22*x99))+(((16.0)*new_r11)))))+(IKabs(((((32.0)*new_r00))+(((-16.0)*x100))+(((-1.0)*x96*x99)))))+(IKabs((x102+(((-1.0)*x97)))))+(IKabs(((((-1.0)*x103))+x98)))+(IKabs((x103+(((-1.0)*x98))))));
if( IKabs(j16eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j16, j18]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j16evalpoly[1];
IkReal x104=new_r22*new_r22;
IkReal x105=((16.0)*new_r01);
IkReal x106=(new_r00*new_r22);
IkReal x107=(x104*x105);
IkReal x108=((((8.0)*x106))+(((-8.0)*new_r11)));
op[0]=x108;
op[1]=((((-1.0)*x105))+x107);
op[2]=((((-32.0)*new_r11*x104))+(((16.0)*x106))+(((16.0)*new_r11)));
op[3]=((((-1.0)*x107))+x105);
op[4]=x108;
polyroots4(op,zeror,numroots);
IkReal j16array[4], cj16array[4], sj16array[4], tempj16array[1];
int numsolutions = 0;
for(int ij16 = 0; ij16 < numroots; ++ij16)
{
IkReal htj16 = zeror[ij16];
tempj16array[0]=((2.0)*(atan(htj16)));
for(int kj16 = 0; kj16 < 1; ++kj16)
{
j16array[numsolutions] = tempj16array[kj16];
if( j16array[numsolutions] > IKPI )
{
    j16array[numsolutions]-=IK2PI;
}
else if( j16array[numsolutions] < -IKPI )
{
    j16array[numsolutions]+=IK2PI;
}
sj16array[numsolutions] = IKsin(j16array[numsolutions]);
cj16array[numsolutions] = IKcos(j16array[numsolutions]);
numsolutions++;
}
}
bool j16valid[4]={true,true,true,true};
_nj16 = 4;
for(int ij16 = 0; ij16 < numsolutions; ++ij16)
    {
if( !j16valid[ij16] )
{
    continue;
}
    j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
htj16 = IKtan(j16/2);

IkReal x109=new_r22*new_r22;
IkReal x110=((16.0)*new_r10);
IkReal x111=(new_r11*new_r22);
IkReal x112=((8.0)*x111);
IkReal x113=(new_r00*x109);
IkReal x114=(x109*x110);
IkReal x115=((8.0)*x113);
j16evalpoly[0]=(((htj16*(((((-1.0)*x110))+x114))))+(((htj16*htj16*htj16*htj16)*(((((-1.0)*x112))+x115))))+(((-1.0)*x112))+x115+(((htj16*htj16)*(((((32.0)*new_r00))+(((-16.0)*x113))+(((-16.0)*x111))))))+(((htj16*htj16*htj16)*(((((-1.0)*x114))+x110)))));
if( IKabs(j16evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < numsolutions; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
{
IkReal j18eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x116=new_r22*new_r22;
IkReal x117=cj16*cj16;
IkReal x118=(new_r22*sj16);
IkReal x119=(((x116*x117))+(((-1.0)*x117))+(((-1.0)*x116)));
j18eval[0]=x119;
j18eval[1]=((IKabs((((new_r01*x118))+(((-1.0)*cj16*new_r00)))))+(IKabs((((new_r00*x118))+((cj16*new_r01))))));
j18eval[2]=IKsign(x119);
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j18eval[0]=new_r22;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j18eval[0]=cj16;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x120=IKsin(j18);
IkReal x121=IKcos(j18);
evalcond[0]=(x120+new_r11);
evalcond[1]=((-1.0)*x120);
evalcond[2]=((-1.0)*x121);
evalcond[3]=((((-1.0)*x121))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x122=IKsin(j18);
IkReal x123=IKcos(j18);
evalcond[0]=((-1.0)*x122);
evalcond[1]=((-1.0)*x123);
evalcond[2]=(x122+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x124=new_r22*new_r22;
CheckValue<IkReal> x125=IKPowWithIntegerCheck(((-1.0)+x124),-1);
if(!x125.valid){
continue;
}
if(((x124*(x125.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x124*(x125.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj16)))))+(IKabs(((((-1.0)*gconst6))+cj16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
IkReal x126=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
sj16=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
cj16=gconst6;
if( (gconst6) < -1-IKFAST_SINCOS_THRESH || (gconst6) > 1+IKFAST_SINCOS_THRESH )
    continue;
j16=IKacos(gconst6);
CheckValue<IkReal> x127=IKPowWithIntegerCheck(((-1.0)+x126),-1);
if(!x127.valid){
continue;
}
if(((x126*(x127.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x126*(x127.value)));
j18eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
CheckValue<IkReal> x128=IKPowWithIntegerCheck(gconst6,-1);
if(!x128.valid){
continue;
}
if( IKabs(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x128.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))))+IKsqr((new_r00*(x128.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))), (new_r00*(x128.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x129=IKsin(j18);
IkReal x130=IKcos(j18);
IkReal x131=((1.0)*x130);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x132=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
evalcond[0]=((-1.0)*x129);
evalcond[1]=((-1.0)*x130);
evalcond[2]=(((gconst6*x129))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x131))+new_r00);
evalcond[4]=(((x129*x132))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x131*x132)));
evalcond[6]=(((gconst6*new_r01))+x129+((new_r11*x132)));
evalcond[7]=(((gconst6*new_r00))+(((-1.0)*x131))+((new_r10*x132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x133 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x133.valid){
continue;
}
CheckValue<IkReal> x134=IKPowWithIntegerCheck(IKsign(gconst6),-1);
if(!x134.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x133.value)+(((1.5707963267949)*(x134.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x135=IKsin(j18);
IkReal x136=IKcos(j18);
IkReal x137=((1.0)*x136);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x138=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
evalcond[0]=((-1.0)*x135);
evalcond[1]=((-1.0)*x136);
evalcond[2]=(((gconst6*x135))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x137))+new_r00);
evalcond[4]=(((x135*x138))+new_r11);
evalcond[5]=((((-1.0)*x137*x138))+new_r10);
evalcond[6]=(((gconst6*new_r01))+x135+((new_r11*x138)));
evalcond[7]=(((gconst6*new_r00))+(((-1.0)*x137))+((new_r10*x138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x139=new_r22*new_r22;
CheckValue<IkReal> x140=IKPowWithIntegerCheck(((-1.0)+x139),-1);
if(!x140.valid){
continue;
}
if(((x139*(x140.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x139*(x140.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj16)))))+(IKabs(((((-1.0)*gconst6))+cj16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
IkReal x141=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
sj16=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))));
cj16=gconst6;
if( (gconst6) < -1-IKFAST_SINCOS_THRESH || (gconst6) > 1+IKFAST_SINCOS_THRESH )
    continue;
j16=((-1.0)*(IKacos(gconst6)));
CheckValue<IkReal> x142=IKPowWithIntegerCheck(((-1.0)+x141),-1);
if(!x142.valid){
continue;
}
if(((x141*(x142.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x141*(x142.value)));
j18eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
CheckValue<IkReal> x143=IKPowWithIntegerCheck(gconst6,-1);
if(!x143.valid){
continue;
}
if( IKabs(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x143.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))))+IKsqr((new_r00*(x143.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))), (new_r00*(x143.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x144=IKsin(j18);
IkReal x145=IKcos(j18);
IkReal x146=((1.0)*x145);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x147=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
IkReal x148=((1.0)*x147);
evalcond[0]=((-1.0)*x144);
evalcond[1]=((-1.0)*x145);
evalcond[2]=(((gconst6*x144))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x146))+new_r00);
evalcond[4]=(((x145*x147))+new_r10);
evalcond[5]=((((-1.0)*x144*x148))+new_r11);
evalcond[6]=(((gconst6*new_r01))+(((-1.0)*new_r11*x148))+x144);
evalcond[7]=((((-1.0)*x146))+((gconst6*new_r00))+(((-1.0)*new_r10*x148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x149 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x149.valid){
continue;
}
CheckValue<IkReal> x150=IKPowWithIntegerCheck(IKsign(gconst6),-1);
if(!x150.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x149.value)+(((1.5707963267949)*(x150.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x151=IKsin(j18);
IkReal x152=IKcos(j18);
IkReal x153=((1.0)*x152);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x154=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
IkReal x155=((1.0)*x154);
evalcond[0]=((-1.0)*x151);
evalcond[1]=((-1.0)*x152);
evalcond[2]=(((gconst6*x151))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x153))+new_r00);
evalcond[4]=(((x152*x154))+new_r10);
evalcond[5]=((((-1.0)*x151*x155))+new_r11);
evalcond[6]=(((gconst6*new_r01))+x151+(((-1.0)*new_r11*x155)));
evalcond[7]=((((-1.0)*x153))+((gconst6*new_r00))+(((-1.0)*new_r10*x155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x156=new_r22*new_r22;
CheckValue<IkReal> x157=IKPowWithIntegerCheck(((-1.0)+x156),-1);
if(!x157.valid){
continue;
}
if(((x156*(x157.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x156*(x157.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj16)))))+(IKabs(((((-1.0)*gconst7))+cj16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
IkReal x158=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
sj16=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
cj16=gconst7;
if( (gconst7) < -1-IKFAST_SINCOS_THRESH || (gconst7) > 1+IKFAST_SINCOS_THRESH )
    continue;
j16=IKacos(gconst7);
CheckValue<IkReal> x159=IKPowWithIntegerCheck(((-1.0)+x158),-1);
if(!x159.valid){
continue;
}
if(((x158*(x159.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x158*(x159.value)))));
j18eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
CheckValue<IkReal> x160=IKPowWithIntegerCheck(gconst7,-1);
if(!x160.valid){
continue;
}
if( IKabs(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x160.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))))+IKsqr((new_r00*(x160.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))), (new_r00*(x160.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x161=IKsin(j18);
IkReal x162=IKcos(j18);
IkReal x163=((1.0)*x162);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x164=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
evalcond[0]=((-1.0)*x161);
evalcond[1]=((-1.0)*x162);
evalcond[2]=(((gconst7*x161))+new_r01);
evalcond[3]=((((-1.0)*gconst7*x163))+new_r00);
evalcond[4]=(((x161*x164))+new_r11);
evalcond[5]=((((-1.0)*x163*x164))+new_r10);
evalcond[6]=(((new_r11*x164))+x161+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x163))+((new_r10*x164))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x165 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x165.valid){
continue;
}
CheckValue<IkReal> x166=IKPowWithIntegerCheck(IKsign(gconst7),-1);
if(!x166.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x165.value)+(((1.5707963267949)*(x166.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x167=IKsin(j18);
IkReal x168=IKcos(j18);
IkReal x169=((1.0)*x168);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x170=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
evalcond[0]=((-1.0)*x167);
evalcond[1]=((-1.0)*x168);
evalcond[2]=(((gconst7*x167))+new_r01);
evalcond[3]=((((-1.0)*gconst7*x169))+new_r00);
evalcond[4]=(((x167*x170))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x169*x170)));
evalcond[6]=(((new_r11*x170))+x167+((gconst7*new_r01)));
evalcond[7]=(((new_r10*x170))+(((-1.0)*x169))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x171=new_r22*new_r22;
CheckValue<IkReal> x172=IKPowWithIntegerCheck(((-1.0)+x171),-1);
if(!x172.valid){
continue;
}
if(((x171*(x172.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x171*(x172.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst7))+cj16)))+(IKabs(((1.0)+(IKsign(sj16)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
IkReal x173=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
sj16=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))))));
cj16=gconst7;
if( (gconst7) < -1-IKFAST_SINCOS_THRESH || (gconst7) > 1+IKFAST_SINCOS_THRESH )
    continue;
j16=((-1.0)*(IKacos(gconst7)));
CheckValue<IkReal> x174=IKPowWithIntegerCheck(((-1.0)+x173),-1);
if(!x174.valid){
continue;
}
if(((x173*(x174.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x173*(x174.value)))));
j18eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
CheckValue<IkReal> x175=IKPowWithIntegerCheck(gconst7,-1);
if(!x175.valid){
continue;
}
if( IKabs((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x175.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01))))+IKsqr((new_r00*(x175.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01))), (new_r00*(x175.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x176=IKsin(j18);
IkReal x177=IKcos(j18);
IkReal x178=((1.0)*x177);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x179=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
IkReal x180=((1.0)*x179);
evalcond[0]=((-1.0)*x176);
evalcond[1]=((-1.0)*x177);
evalcond[2]=(((gconst7*x176))+new_r01);
evalcond[3]=((((-1.0)*gconst7*x178))+new_r00);
evalcond[4]=(new_r10+((x177*x179)));
evalcond[5]=((((-1.0)*x176*x180))+new_r11);
evalcond[6]=(x176+(((-1.0)*new_r11*x180))+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x178))+(((-1.0)*new_r10*x180))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x181 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x181.valid){
continue;
}
CheckValue<IkReal> x182=IKPowWithIntegerCheck(IKsign(gconst7),-1);
if(!x182.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x181.value)+(((1.5707963267949)*(x182.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x183=IKsin(j18);
IkReal x184=IKcos(j18);
IkReal x185=((1.0)*x184);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x186=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
IkReal x187=((1.0)*x186);
evalcond[0]=((-1.0)*x183);
evalcond[1]=((-1.0)*x184);
evalcond[2]=(new_r01+((gconst7*x183)));
evalcond[3]=(new_r00+(((-1.0)*gconst7*x185)));
evalcond[4]=(((x184*x186))+new_r10);
evalcond[5]=(new_r11+(((-1.0)*x183*x187)));
evalcond[6]=(x183+(((-1.0)*new_r11*x187))+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x185))+(((-1.0)*new_r10*x187))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x188=((1.0)*new_r22);
IkReal x189=(cj16*new_r01);
CheckValue<IkReal> x190=IKPowWithIntegerCheck(cj16,-1);
if(!x190.valid){
continue;
}
if( IKabs(((((-1.0)*x189))+(((-1.0)*new_r11*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x190.value)*((((new_r11*new_r22*(cj16*cj16)))+(((-1.0)*new_r11*x188))+(((-1.0)*sj16*x188*x189))+new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x189))+(((-1.0)*new_r11*sj16))))+IKsqr(((x190.value)*((((new_r11*new_r22*(cj16*cj16)))+(((-1.0)*new_r11*x188))+(((-1.0)*sj16*x188*x189))+new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*x189))+(((-1.0)*new_r11*sj16))), ((x190.value)*((((new_r11*new_r22*(cj16*cj16)))+(((-1.0)*new_r11*x188))+(((-1.0)*sj16*x188*x189))+new_r00))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[10];
IkReal x191=IKsin(j18);
IkReal x192=IKcos(j18);
IkReal x193=((1.0)*sj16);
IkReal x194=(cj16*new_r10);
IkReal x195=(cj16*new_r11);
IkReal x196=((1.0)*x192);
IkReal x197=(new_r22*x192);
IkReal x198=(sj16*x191);
IkReal x199=(cj16*x191);
IkReal x200=((1.0)*x191);
evalcond[0]=(x191+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=((((-1.0)*x196))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[2]=(x199+((sj16*x197))+new_r01);
evalcond[3]=(((new_r22*x198))+new_r00+(((-1.0)*cj16*x196)));
evalcond[4]=((((-1.0)*cj16*new_r22*x196))+x198+new_r11);
evalcond[5]=((((-1.0)*new_r22*x200))+x194+(((-1.0)*new_r00*x193)));
evalcond[6]=((((-1.0)*new_r22*x196))+x195+(((-1.0)*new_r01*x193)));
evalcond[7]=((((-1.0)*x192*x193))+(((-1.0)*new_r22*x199))+new_r10);
evalcond[8]=((((-1.0)*new_r00*new_r22*x193))+(((-1.0)*x200))+((new_r22*x194)));
evalcond[9]=((((-1.0)*x196))+((new_r22*x195))+(((-1.0)*new_r01*new_r22*x193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x201=((1.0)*new_r01);
CheckValue<IkReal> x202=IKPowWithIntegerCheck(new_r22,-1);
if(!x202.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*sj16))+(((-1.0)*cj16*x201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x202.value)*(((((-1.0)*sj16*x201))+((cj16*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj16))+(((-1.0)*cj16*x201))))+IKsqr(((x202.value)*(((((-1.0)*sj16*x201))+((cj16*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*new_r11*sj16))+(((-1.0)*cj16*x201))), ((x202.value)*(((((-1.0)*sj16*x201))+((cj16*new_r11))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[10];
IkReal x203=IKsin(j18);
IkReal x204=IKcos(j18);
IkReal x205=((1.0)*sj16);
IkReal x206=(cj16*new_r10);
IkReal x207=(cj16*new_r11);
IkReal x208=((1.0)*x204);
IkReal x209=(new_r22*x204);
IkReal x210=(sj16*x203);
IkReal x211=(cj16*x203);
IkReal x212=((1.0)*x203);
evalcond[0]=(x203+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=((((-1.0)*x208))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[2]=(x211+((sj16*x209))+new_r01);
evalcond[3]=(((new_r22*x210))+(((-1.0)*cj16*x208))+new_r00);
evalcond[4]=(x210+new_r11+(((-1.0)*cj16*new_r22*x208)));
evalcond[5]=((((-1.0)*new_r00*x205))+x206+(((-1.0)*new_r22*x212)));
evalcond[6]=((((-1.0)*new_r22*x208))+x207+(((-1.0)*new_r01*x205)));
evalcond[7]=((((-1.0)*x204*x205))+(((-1.0)*new_r22*x211))+new_r10);
evalcond[8]=(((new_r22*x206))+(((-1.0)*new_r00*new_r22*x205))+(((-1.0)*x212)));
evalcond[9]=((((-1.0)*x208))+(((-1.0)*new_r01*new_r22*x205))+((new_r22*x207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x213=new_r22*new_r22;
IkReal x214=cj16*cj16;
IkReal x215=(new_r22*sj16);
CheckValue<IkReal> x216 = IKatan2WithCheck(IkReal((((new_r00*x215))+((cj16*new_r01)))),IkReal(((((-1.0)*cj16*new_r00))+((new_r01*x215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x216.valid){
continue;
}
CheckValue<IkReal> x217=IKPowWithIntegerCheck(IKsign((((x213*x214))+(((-1.0)*x213))+(((-1.0)*x214)))),-1);
if(!x217.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x216.value)+(((1.5707963267949)*(x217.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[10];
IkReal x218=IKsin(j18);
IkReal x219=IKcos(j18);
IkReal x220=((1.0)*sj16);
IkReal x221=(cj16*new_r10);
IkReal x222=(cj16*new_r11);
IkReal x223=((1.0)*x219);
IkReal x224=(new_r22*x219);
IkReal x225=(sj16*x218);
IkReal x226=(cj16*x218);
IkReal x227=((1.0)*x218);
evalcond[0]=(x218+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=(((cj16*new_r00))+((new_r10*sj16))+(((-1.0)*x223)));
evalcond[2]=(x226+new_r01+((sj16*x224)));
evalcond[3]=((((-1.0)*cj16*x223))+((new_r22*x225))+new_r00);
evalcond[4]=(x225+new_r11+(((-1.0)*cj16*new_r22*x223)));
evalcond[5]=(x221+(((-1.0)*new_r22*x227))+(((-1.0)*new_r00*x220)));
evalcond[6]=((((-1.0)*new_r01*x220))+x222+(((-1.0)*new_r22*x223)));
evalcond[7]=((((-1.0)*new_r22*x226))+(((-1.0)*x219*x220))+new_r10);
evalcond[8]=((((-1.0)*new_r00*new_r22*x220))+((new_r22*x221))+(((-1.0)*x227)));
evalcond[9]=((((-1.0)*new_r01*new_r22*x220))+((new_r22*x222))+(((-1.0)*x223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16, j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x229=IKPowWithIntegerCheck(cj17,-1);
if(!x229.valid){
continue;
}
IkReal x228=x229.value;
CheckValue<IkReal> x230=IKPowWithIntegerCheck(new_r12,-1);
if(!x230.valid){
continue;
}
CheckValue<IkReal> x231=IKPowWithIntegerCheck(x228,-2);
if(!x231.valid){
continue;
}
if( IKabs(((-1.0)*new_r02*x228)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x228*(x230.value)*(((((-1.0)*(new_r02*new_r02)))+(x231.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02*x228))+IKsqr((x228*(x230.value)*(((((-1.0)*(new_r02*new_r02)))+(x231.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r02*x228), (x228*(x230.value)*(((((-1.0)*(new_r02*new_r02)))+(x231.value)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x232=IKcos(j16);
IkReal x233=IKsin(j16);
IkReal x234=((1.0)*cj17);
IkReal x235=((1.0)*x233);
IkReal x236=(cj17*x232);
IkReal x237=(new_r12*x232);
evalcond[0]=(((cj17*x233))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x232*x234)));
evalcond[2]=(((new_r02*x232))+((new_r12*x233)));
evalcond[3]=((((-1.0)*new_r02*x235))+(((-1.0)*x234))+x237);
evalcond[4]=(((new_r10*x236))+(((-1.0)*new_r00*x233*x234))+((new_r20*sj17)));
evalcond[5]=(((new_r11*x236))+(((-1.0)*new_r01*x233*x234))+((new_r21*sj17)));
evalcond[6]=((((-1.0)*new_r22*x234))+(((-1.0)*new_r02*sj17*x235))+((sj17*x237)));
evalcond[7]=((-1.0)+(((-1.0)*new_r02*x233*x234))+((new_r12*x236))+((new_r22*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j18eval[3];
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
j18eval[0]=cj16;
j18eval[1]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal j18eval[3];
j18eval[0]=cj17;
j18eval[1]=sj16;
j18eval[2]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x238=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj16*x238))+(((-1.0)*new_r00*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj16*x238))+((cj16*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj16*x238))+(((-1.0)*new_r00*sj16))))+IKsqr(((((-1.0)*sj16*x238))+((cj16*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*cj16*x238))+(((-1.0)*new_r00*sj16))), ((((-1.0)*sj16*x238))+((cj16*new_r00))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x239=IKcos(j18);
IkReal x240=IKsin(j18);
IkReal x241=((1.0)*sj16);
IkReal x242=(sj16*x240);
IkReal x243=((1.0)*x239);
IkReal x244=(cj16*x240);
IkReal x245=(sj16*x239);
IkReal x246=(cj16*x243);
evalcond[0]=(x240+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=((((-1.0)*x243))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[2]=(x245+x244+new_r01);
evalcond[3]=(x242+(((-1.0)*x246))+new_r00);
evalcond[4]=(x242+(((-1.0)*x246))+new_r11);
evalcond[5]=((((-1.0)*x240))+(((-1.0)*new_r00*x241))+((cj16*new_r10)));
evalcond[6]=((((-1.0)*new_r01*x241))+(((-1.0)*x243))+((cj16*new_r11)));
evalcond[7]=((((-1.0)*x244))+new_r10+(((-1.0)*x239*x241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x247=((1.0)*cj16);
if( IKabs(((((-1.0)*new_r01*x247))+(((-1.0)*new_r11*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x247))+((new_r01*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x247))+(((-1.0)*new_r11*sj16))))+IKsqr(((((-1.0)*new_r11*x247))+((new_r01*sj16))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*new_r01*x247))+(((-1.0)*new_r11*sj16))), ((((-1.0)*new_r11*x247))+((new_r01*sj16))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x248=IKsin(j18);
IkReal x249=IKcos(j18);
IkReal x250=((1.0)*sj16);
IkReal x251=(cj16*x248);
IkReal x252=(cj16*x249);
IkReal x253=(x249*x250);
evalcond[0]=(x248+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=(x248+(((-1.0)*new_r00*x250))+((cj16*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x250))+x249+((cj16*new_r11)));
evalcond[3]=((((-1.0)*x249))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[4]=(((sj16*x248))+x252+new_r11);
evalcond[5]=(x251+new_r01+(((-1.0)*x253)));
evalcond[6]=(x251+new_r10+(((-1.0)*x253)));
evalcond[7]=((((-1.0)*x248*x250))+new_r00+(((-1.0)*x252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x254=IKsin(j18);
IkReal x255=IKcos(j18);
IkReal x256=((1.0)*cj17);
IkReal x257=((1.0)*x255);
IkReal x258=((1.0)*x254);
evalcond[0]=(x254+new_r01);
evalcond[1]=(((cj17*x254))+new_r20);
evalcond[2]=(((cj17*x255))+new_r21);
evalcond[3]=(new_r00+(((-1.0)*x257)));
evalcond[4]=((((-1.0)*sj17*x257))+new_r11);
evalcond[5]=((((-1.0)*sj17*x258))+new_r10);
evalcond[6]=((((-1.0)*new_r20*x256))+((new_r10*sj17))+(((-1.0)*x258)));
evalcond[7]=((((-1.0)*new_r21*x256))+((new_r11*sj17))+(((-1.0)*x257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[3];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r21));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x259=IKsin(j18);
IkReal x260=IKcos(j18);
evalcond[0]=(x259+new_r20);
evalcond[1]=(x260+new_r21);
evalcond[2]=(x259+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*x260))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r20, new_r21);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x261=IKsin(j18);
IkReal x262=((1.0)*(IKcos(j18)));
evalcond[0]=((((-1.0)*x261))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x262)));
evalcond[2]=(x261+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x263=IKcos(j18);
IkReal x264=IKsin(j18);
evalcond[0]=(x263+new_r11);
evalcond[1]=(x264+(((-1.0)*new_r01)));
evalcond[2]=((((-1.0)*x263))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x264))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, new_r11);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x265=IKsin(j18);
IkReal x266=((1.0)*(IKcos(j18)));
evalcond[0]=(x265+(((-1.0)*new_r01)));
evalcond[1]=(new_r11+(((-1.0)*x266)));
evalcond[2]=(x265+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x267=IKcos(j18);
IkReal x268=IKsin(j18);
IkReal x269=((-1.0)*x268);
evalcond[0]=(new_r22*x267);
evalcond[1]=x269;
evalcond[2]=((-1.0)*x267);
evalcond[3]=(new_r22*x269);
evalcond[4]=(x268+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*x267))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x270=IKPowWithIntegerCheck(sj17,-1);
if(!x270.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x270.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11*(x270.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r11*(x270.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x271=IKsin(j18);
IkReal x272=IKcos(j18);
IkReal x273=((1.0)*cj17);
IkReal x274=((1.0)*new_r10);
IkReal x275=((1.0)*x272);
IkReal x276=((1.0)*x271);
evalcond[0]=(((cj17*x271))+new_r20);
evalcond[1]=(((cj17*x272))+new_r21);
evalcond[2]=(x271+(((-1.0)*new_r01)));
evalcond[3]=(((sj17*x272))+new_r11);
evalcond[4]=((((-1.0)*x275))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x274))+(((-1.0)*sj17*x276)));
evalcond[6]=((((-1.0)*new_r20*x273))+(((-1.0)*x276))+(((-1.0)*sj17*x274)));
evalcond[7]=((((-1.0)*new_r21*x273))+(((-1.0)*new_r11*sj17))+(((-1.0)*x275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x277=IKPowWithIntegerCheck(cj17,-1);
if(!x277.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x277.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21*(x277.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r21*(x277.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x278=IKsin(j18);
IkReal x279=IKcos(j18);
IkReal x280=((1.0)*cj17);
IkReal x281=((1.0)*new_r10);
IkReal x282=((1.0)*x279);
IkReal x283=((1.0)*x278);
evalcond[0]=(((cj17*x278))+new_r20);
evalcond[1]=(((cj17*x279))+new_r21);
evalcond[2]=(x278+(((-1.0)*new_r01)));
evalcond[3]=(((sj17*x279))+new_r11);
evalcond[4]=((((-1.0)*x282))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x281))+(((-1.0)*sj17*x283)));
evalcond[6]=((((-1.0)*x283))+(((-1.0)*sj17*x281))+(((-1.0)*new_r20*x280)));
evalcond[7]=((((-1.0)*new_r11*sj17))+(((-1.0)*x282))+(((-1.0)*new_r21*x280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x284 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x284.valid){
continue;
}
CheckValue<IkReal> x285=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x285.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x284.value)+(((1.5707963267949)*(x285.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x286=IKsin(j18);
IkReal x287=IKcos(j18);
IkReal x288=((1.0)*cj17);
IkReal x289=((1.0)*new_r10);
IkReal x290=((1.0)*x287);
IkReal x291=((1.0)*x286);
evalcond[0]=(((cj17*x286))+new_r20);
evalcond[1]=(((cj17*x287))+new_r21);
evalcond[2]=(x286+(((-1.0)*new_r01)));
evalcond[3]=(((sj17*x287))+new_r11);
evalcond[4]=((((-1.0)*x290))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*sj17*x291))+(((-1.0)*x289)));
evalcond[6]=((((-1.0)*x291))+(((-1.0)*sj17*x289))+(((-1.0)*new_r20*x288)));
evalcond[7]=((((-1.0)*x290))+(((-1.0)*new_r11*sj17))+(((-1.0)*new_r21*x288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x292=IKsin(j18);
IkReal x293=IKcos(j18);
IkReal x294=((1.0)*x293);
evalcond[0]=(x292+new_r20);
evalcond[1]=(x293+new_r21);
evalcond[2]=(new_r01+((cj16*x292)));
evalcond[3]=(((sj16*x292))+new_r11);
evalcond[4]=(((new_r02*x293))+new_r10);
evalcond[5]=(new_r00+(((-1.0)*cj16*x294)));
evalcond[6]=(x292+((cj16*new_r01))+((new_r11*sj16)));
evalcond[7]=((((-1.0)*x294))+((cj16*new_r00))+((new_r10*sj16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r20, new_r21);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x295=IKsin(j18);
IkReal x296=IKcos(j18);
IkReal x297=((1.0)*x296);
evalcond[0]=((((-1.0)*x295))+new_r20);
evalcond[1]=((((-1.0)*x297))+new_r21);
evalcond[2]=(new_r01+((cj16*x295)));
evalcond[3]=(((sj16*x295))+new_r11);
evalcond[4]=(new_r00+(((-1.0)*cj16*x297)));
evalcond[5]=(new_r10+(((-1.0)*new_r02*x297)));
evalcond[6]=(x295+((cj16*new_r01))+((new_r11*sj16)));
evalcond[7]=((((-1.0)*x297))+((cj16*new_r00))+((new_r10*sj16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x298=IKsin(j18);
IkReal x299=IKcos(j18);
IkReal x300=((1.0)*cj17);
IkReal x301=((1.0)*sj17);
IkReal x302=((1.0)*x299);
evalcond[0]=(x298+new_r11);
evalcond[1]=(new_r20+((cj17*x298)));
evalcond[2]=(new_r21+((cj17*x299)));
evalcond[3]=(new_r10+(((-1.0)*x302)));
evalcond[4]=(((sj17*x299))+new_r01);
evalcond[5]=(((sj17*x298))+new_r00);
evalcond[6]=((((-1.0)*x298))+(((-1.0)*new_r20*x300))+(((-1.0)*new_r00*x301)));
evalcond[7]=((((-1.0)*new_r21*x300))+(((-1.0)*new_r01*x301))+(((-1.0)*x302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[3];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j18eval[0]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j18eval[0]=cj17;
j18eval[1]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, new_r01);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x303=IKsin(j18);
IkReal x304=((1.0)*(IKcos(j18)));
evalcond[0]=(x303+(((-1.0)*new_r11)));
evalcond[1]=(new_r01+(((-1.0)*x304)));
evalcond[2]=((((-1.0)*x303))+new_r00);
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r01));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x305=IKsin(j18);
IkReal x306=IKcos(j18);
evalcond[0]=(x306+new_r01);
evalcond[1]=(x305+new_r00);
evalcond[2]=(x305+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x306))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r21));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x307=IKsin(j18);
IkReal x308=IKcos(j18);
evalcond[0]=(x307+new_r20);
evalcond[1]=(x308+new_r21);
evalcond[2]=(x307+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x308))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r20, new_r21);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x309=IKsin(j18);
IkReal x310=((1.0)*(IKcos(j18)));
evalcond[0]=((((-1.0)*x309))+new_r20);
evalcond[1]=((((-1.0)*x310))+new_r21);
evalcond[2]=(x309+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x310))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x311=IKcos(j18);
IkReal x312=IKsin(j18);
IkReal x313=((-1.0)*x312);
IkReal x314=((-1.0)*x311);
evalcond[0]=x313;
evalcond[1]=x314;
evalcond[2]=(new_r22*x314);
evalcond[3]=(new_r22*x313);
evalcond[4]=(x312+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x315=IKPowWithIntegerCheck(cj17,-1);
if(!x315.valid){
continue;
}
CheckValue<IkReal> x316=IKPowWithIntegerCheck(sj17,-1);
if(!x316.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x315.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x316.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x315.value)))+IKsqr((new_r01*(x316.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r20*(x315.value)), (new_r01*(x316.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x317=IKsin(j18);
IkReal x318=IKcos(j18);
IkReal x319=((1.0)*cj17);
IkReal x320=((1.0)*x318);
IkReal x321=((1.0)*x317);
evalcond[0]=(((cj17*x317))+new_r20);
evalcond[1]=(((cj17*x318))+new_r21);
evalcond[2]=(x317+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj17*x320))+new_r01);
evalcond[4]=((((-1.0)*sj17*x321))+new_r00);
evalcond[5]=((((-1.0)*x320))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r20*x319))+(((-1.0)*x321))+((new_r00*sj17)));
evalcond[7]=((((-1.0)*new_r21*x319))+(((-1.0)*x320))+((new_r01*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x322=IKPowWithIntegerCheck(cj17,-1);
if(!x322.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x322.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x322.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x322.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x323=IKsin(j18);
IkReal x324=IKcos(j18);
IkReal x325=((1.0)*cj17);
IkReal x326=((1.0)*x324);
IkReal x327=((1.0)*x323);
evalcond[0]=(((cj17*x323))+new_r20);
evalcond[1]=(((cj17*x324))+new_r21);
evalcond[2]=(x323+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj17*x326))+new_r01);
evalcond[4]=((((-1.0)*sj17*x327))+new_r00);
evalcond[5]=((((-1.0)*x326))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x327))+((new_r00*sj17))+(((-1.0)*new_r20*x325)));
evalcond[7]=((((-1.0)*x326))+((new_r01*sj17))+(((-1.0)*new_r21*x325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x328 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x328.valid){
continue;
}
CheckValue<IkReal> x329=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x329.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x328.value)+(((1.5707963267949)*(x329.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x330=IKsin(j18);
IkReal x331=IKcos(j18);
IkReal x332=((1.0)*cj17);
IkReal x333=((1.0)*x331);
IkReal x334=((1.0)*x330);
evalcond[0]=(new_r20+((cj17*x330)));
evalcond[1]=(new_r21+((cj17*x331)));
evalcond[2]=(x330+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj17*x333))+new_r01);
evalcond[4]=((((-1.0)*sj17*x334))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x333)));
evalcond[6]=((((-1.0)*new_r20*x332))+(((-1.0)*x334))+((new_r00*sj17)));
evalcond[7]=((((-1.0)*new_r21*x332))+(((-1.0)*x333))+((new_r01*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j18eval[0]=IKabs(new_r22);
if( IKabs(j18eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j18]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
IkReal j18array[2], cj18array[2], sj18array[2], tempj18array[1];
int numsolutions = 0;
for(int ij18 = 0; ij18 < numroots; ++ij18)
{
IkReal htj18 = zeror[ij18];
tempj18array[0]=((2.0)*(atan(htj18)));
for(int kj18 = 0; kj18 < 1; ++kj18)
{
j18array[numsolutions] = tempj18array[kj18];
if( j18array[numsolutions] > IKPI )
{
    j18array[numsolutions]-=IK2PI;
}
else if( j18array[numsolutions] < -IKPI )
{
    j18array[numsolutions]+=IK2PI;
}
sj18array[numsolutions] = IKsin(j18array[numsolutions]);
cj18array[numsolutions] = IKcos(j18array[numsolutions]);
numsolutions++;
}
}
bool j18valid[2]={true,true};
_nj18 = 2;
for(int ij18 = 0; ij18 < numsolutions; ++ij18)
    {
if( !j18valid[ij18] )
{
    continue;
}
    j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
htj18 = IKtan(j18/2);

_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < numsolutions; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x336=IKPowWithIntegerCheck(cj17,-1);
if(!x336.valid){
continue;
}
IkReal x335=x336.value;
CheckValue<IkReal> x337=IKPowWithIntegerCheck(sj16,-1);
if(!x337.valid){
continue;
}
CheckValue<IkReal> x338=IKPowWithIntegerCheck(sj17,-1);
if(!x338.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x335)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x335*(x337.value)*(x338.value)*((((cj16*new_r20))+(((-1.0)*cj17*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x335))+IKsqr((x335*(x337.value)*(x338.value)*((((cj16*new_r20))+(((-1.0)*cj17*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r20*x335), (x335*(x337.value)*(x338.value)*((((cj16*new_r20))+(((-1.0)*cj17*new_r01))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x339=IKsin(j18);
IkReal x340=IKcos(j18);
IkReal x341=((1.0)*cj17);
IkReal x342=((1.0)*sj16);
IkReal x343=(cj16*new_r10);
IkReal x344=(cj16*sj17);
IkReal x345=((1.0)*x340);
IkReal x346=(sj16*x339);
IkReal x347=((1.0)*x339);
evalcond[0]=(new_r20+((cj17*x339)));
evalcond[1]=(((cj17*x340))+new_r21);
evalcond[2]=(x339+((cj16*new_r01))+((new_r11*sj16)));
evalcond[3]=(((cj16*new_r00))+(((-1.0)*x345))+((new_r10*sj16)));
evalcond[4]=(((cj16*x339))+new_r01+((sj16*sj17*x340)));
evalcond[5]=((((-1.0)*cj16*x345))+((sj17*x346))+new_r00);
evalcond[6]=(x346+(((-1.0)*x344*x345))+new_r11);
evalcond[7]=((((-1.0)*sj17*x347))+x343+(((-1.0)*new_r00*x342)));
evalcond[8]=((((-1.0)*sj17*x345))+(((-1.0)*new_r01*x342))+((cj16*new_r11)));
evalcond[9]=((((-1.0)*x344*x347))+(((-1.0)*x340*x342))+new_r10);
evalcond[10]=(((sj17*x343))+(((-1.0)*new_r20*x341))+(((-1.0)*x347))+(((-1.0)*new_r00*sj17*x342)));
evalcond[11]=((((-1.0)*new_r01*sj17*x342))+((new_r11*x344))+(((-1.0)*x345))+(((-1.0)*new_r21*x341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x349=IKPowWithIntegerCheck(cj17,-1);
if(!x349.valid){
continue;
}
IkReal x348=x349.value;
CheckValue<IkReal> x350=IKPowWithIntegerCheck(cj16,-1);
if(!x350.valid){
continue;
}
if( IKabs((x348*(x350.value)*(((((-1.0)*cj17*new_r01))+((new_r21*sj16*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x348)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x348*(x350.value)*(((((-1.0)*cj17*new_r01))+((new_r21*sj16*sj17))))))+IKsqr(((-1.0)*new_r21*x348))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((x348*(x350.value)*(((((-1.0)*cj17*new_r01))+((new_r21*sj16*sj17))))), ((-1.0)*new_r21*x348));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x351=IKsin(j18);
IkReal x352=IKcos(j18);
IkReal x353=((1.0)*cj17);
IkReal x354=((1.0)*sj16);
IkReal x355=(cj16*new_r10);
IkReal x356=(cj16*sj17);
IkReal x357=((1.0)*x352);
IkReal x358=(sj16*x351);
IkReal x359=((1.0)*x351);
evalcond[0]=(((cj17*x351))+new_r20);
evalcond[1]=(((cj17*x352))+new_r21);
evalcond[2]=(x351+((cj16*new_r01))+((new_r11*sj16)));
evalcond[3]=((((-1.0)*x357))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[4]=(((cj16*x351))+new_r01+((sj16*sj17*x352)));
evalcond[5]=((((-1.0)*cj16*x357))+((sj17*x358))+new_r00);
evalcond[6]=((((-1.0)*x356*x357))+x358+new_r11);
evalcond[7]=((((-1.0)*sj17*x359))+x355+(((-1.0)*new_r00*x354)));
evalcond[8]=((((-1.0)*sj17*x357))+(((-1.0)*new_r01*x354))+((cj16*new_r11)));
evalcond[9]=((((-1.0)*x356*x359))+new_r10+(((-1.0)*x352*x354)));
evalcond[10]=((((-1.0)*x359))+(((-1.0)*new_r00*sj17*x354))+((sj17*x355))+(((-1.0)*new_r20*x353)));
evalcond[11]=((((-1.0)*x357))+(((-1.0)*new_r21*x353))+(((-1.0)*new_r01*sj17*x354))+((new_r11*x356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x360 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x360.valid){
continue;
}
CheckValue<IkReal> x361=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x361.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x360.value)+(((1.5707963267949)*(x361.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x362=IKsin(j18);
IkReal x363=IKcos(j18);
IkReal x364=((1.0)*cj17);
IkReal x365=((1.0)*sj16);
IkReal x366=(cj16*new_r10);
IkReal x367=(cj16*sj17);
IkReal x368=((1.0)*x363);
IkReal x369=(sj16*x362);
IkReal x370=((1.0)*x362);
evalcond[0]=(((cj17*x362))+new_r20);
evalcond[1]=(((cj17*x363))+new_r21);
evalcond[2]=(x362+((cj16*new_r01))+((new_r11*sj16)));
evalcond[3]=((((-1.0)*x368))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[4]=(((cj16*x362))+((sj16*sj17*x363))+new_r01);
evalcond[5]=(((sj17*x369))+new_r00+(((-1.0)*cj16*x368)));
evalcond[6]=((((-1.0)*x367*x368))+x369+new_r11);
evalcond[7]=((((-1.0)*sj17*x370))+(((-1.0)*new_r00*x365))+x366);
evalcond[8]=((((-1.0)*sj17*x368))+((cj16*new_r11))+(((-1.0)*new_r01*x365)));
evalcond[9]=((((-1.0)*x363*x365))+(((-1.0)*x367*x370))+new_r10);
evalcond[10]=(((sj17*x366))+(((-1.0)*new_r20*x364))+(((-1.0)*x370))+(((-1.0)*new_r00*sj17*x365)));
evalcond[11]=((((-1.0)*x368))+(((-1.0)*new_r01*sj17*x365))+((new_r11*x367))+(((-1.0)*new_r21*x364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x371 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x371.valid){
continue;
}
CheckValue<IkReal> x372=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x372.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x371.value)+(((1.5707963267949)*(x372.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[2];
evalcond[0]=(((cj17*(IKsin(j18))))+new_r20);
evalcond[1]=(((cj17*(IKcos(j18))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
j16eval[0]=cj17;
j16eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j16eval[2]=IKsign(cj17);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
j16eval[0]=cj17;
j16eval[1]=new_r01;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x373=((1.0)*sj18);
if( IKabs(((((-1.0)*new_r00*x373))+(((-1.0)*cj18*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj18*new_r00))+(((-1.0)*new_r01*x373)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x373))+(((-1.0)*cj18*new_r01))))+IKsqr((((cj18*new_r00))+(((-1.0)*new_r01*x373))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((-1.0)*new_r00*x373))+(((-1.0)*cj18*new_r01))), (((cj18*new_r00))+(((-1.0)*new_r01*x373))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x374=IKsin(j16);
IkReal x375=IKcos(j16);
IkReal x376=((1.0)*cj18);
IkReal x377=((1.0)*sj18);
IkReal x378=(sj18*x374);
IkReal x379=((1.0)*x374);
IkReal x380=(x375*x376);
evalcond[0]=(((new_r01*x375))+sj18+((new_r11*x374)));
evalcond[1]=(((sj18*x375))+new_r01+((cj18*x374)));
evalcond[2]=(x378+(((-1.0)*x380))+new_r00);
evalcond[3]=(x378+(((-1.0)*x380))+new_r11);
evalcond[4]=((((-1.0)*x376))+((new_r00*x375))+((new_r10*x374)));
evalcond[5]=((((-1.0)*x374*x376))+new_r10+(((-1.0)*x375*x377)));
evalcond[6]=((((-1.0)*new_r00*x379))+(((-1.0)*x377))+((new_r10*x375)));
evalcond[7]=((((-1.0)*x376))+(((-1.0)*new_r01*x379))+((new_r11*x375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
IkReal x381=(((cj18*new_r01))+((new_r11*sj18)));
j16eval[0]=x381;
j16eval[1]=((IKabs(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj18*sj18)))))+(IKabs(((-1.0)+(new_r01*new_r01)+(cj18*cj18)))));
j16eval[2]=IKsign(x381);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
IkReal x382=((1.0)*sj18);
IkReal x383=(((new_r10*new_r11))+((new_r00*new_r01)));
j16eval[0]=x383;
j16eval[1]=((IKabs(((((-1.0)*new_r11*x382))+(((-1.0)*new_r00*x382)))))+(IKabs(((((-1.0)*new_r10*x382))+((new_r01*sj18))))));
j16eval[2]=IKsign(x383);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
IkReal x384=((1.0)*sj18);
IkReal x385=((new_r01*new_r01)+(new_r11*new_r11));
j16eval[0]=x385;
j16eval[1]=((IKabs(((((-1.0)*new_r11*x384))+((cj18*new_r01)))))+(IKabs(((((-1.0)*cj18*new_r11))+(((-1.0)*new_r01*x384))))));
j16eval[2]=IKsign(x385);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
new_r01=0;
new_r11=0;
j16eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x387 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x387.valid){
continue;
}
IkReal x386=x387.value;
j16array[0]=((-1.0)*x386);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((3.14159265358979)+(((-1.0)*x386)));
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j16))))+(((-1.0)*new_r00*(IKsin(j16)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j18))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x388=IKcos(j16);
IkReal x389=IKsin(j16);
IkReal x390=((1.0)*x389);
evalcond[0]=(x388+new_r11);
evalcond[1]=((((-1.0)*x390))+new_r01);
evalcond[2]=((((-1.0)*x388))+new_r00);
evalcond[3]=((((-1.0)*x390))+new_r10);
evalcond[4]=(((new_r01*x388))+((new_r11*x389)));
evalcond[5]=((-1.0)+((new_r00*x388))+((new_r10*x389)));
evalcond[6]=(((new_r10*x388))+(((-1.0)*new_r00*x390)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x390))+((new_r11*x388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j18)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x391=IKsin(j16);
IkReal x392=IKcos(j16);
IkReal x393=((1.0)*x391);
evalcond[0]=(x391+new_r01);
evalcond[1]=(x392+new_r00);
evalcond[2]=(x391+new_r10);
evalcond[3]=((((-1.0)*x392))+new_r11);
evalcond[4]=(((new_r11*x391))+((new_r01*x392)));
evalcond[5]=((1.0)+((new_r00*x392))+((new_r10*x391)));
evalcond[6]=((((-1.0)*new_r00*x393))+((new_r10*x392)));
evalcond[7]=((-1.0)+(((-1.0)*new_r01*x393))+((new_r11*x392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x395 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x395)==0){
continue;
}
IkReal x394=pow(x395,-0.5);
CheckValue<IkReal> x396 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x396.valid){
continue;
}
IkReal gconst0=((-1.0)*(x396.value));
IkReal gconst1=((-1.0)*new_r01*x394);
IkReal gconst2=(new_r11*x394);
CheckValue<IkReal> x397 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x397.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j18+(x397.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x400 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x400.valid){
continue;
}
IkReal x398=((-1.0)*(x400.value));
IkReal x399=x394;
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x398;
IkReal gconst0=x398;
IkReal gconst1=((-1.0)*new_r01*x399);
IkReal gconst2=(new_r11*x399);
IkReal x401=new_r01*new_r01;
IkReal x402=(new_r00*new_r01);
IkReal x403=(((new_r10*new_r11))+x402);
IkReal x404=x394;
IkReal x405=(new_r01*x404);
j16eval[0]=x403;
j16eval[1]=((IKabs((((new_r11*x405))+((x402*x404)))))+(IKabs((((new_r10*x405))+(((-1.0)*x401*x404))))));
j16eval[2]=IKsign(x403);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x408 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x408.valid){
continue;
}
IkReal x406=((-1.0)*(x408.value));
IkReal x407=x394;
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x406;
IkReal gconst0=x406;
IkReal gconst1=((-1.0)*new_r01*x407);
IkReal gconst2=(new_r11*x407);
IkReal x409=((new_r01*new_r01)+(new_r11*new_r11));
j16eval[0]=x409;
j16eval[1]=IKsign(x409);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x412 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x412.valid){
continue;
}
IkReal x410=((-1.0)*(x412.value));
IkReal x411=x394;
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x410;
IkReal gconst0=x410;
IkReal gconst1=((-1.0)*new_r01*x411);
IkReal gconst2=(new_r11*x411);
j16eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst1*gconst1)+(gconst2*gconst2));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[4], cj16array[4], sj16array[4];
bool j16valid[4]={false};
_nj16 = 4;
j16array[0]=0;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=1.5707963267949;
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
j16array[2]=3.14159265358979;
sj16array[2]=IKsin(j16array[2]);
cj16array[2]=IKcos(j16array[2]);
j16array[3]=-1.5707963267949;
sj16array[3]=IKsin(j16array[3]);
cj16array[3]=IKcos(j16array[3]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
if( j16array[2] > IKPI )
{
    j16array[2]-=IK2PI;
}
else if( j16array[2] < -IKPI )
{    j16array[2]+=IK2PI;
}
j16valid[2] = true;
if( j16array[3] > IKPI )
{
    j16array[3]-=IK2PI;
}
else if( j16array[3] < -IKPI )
{    j16array[3]+=IK2PI;
}
j16valid[3] = true;
for(int ij16 = 0; ij16 < 4; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 4; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x414 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x414.valid){
continue;
}
IkReal x413=((-1.0)*(x414.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x413;
new_r11=0;
new_r00=0;
IkReal gconst0=x413;
IkReal x415 = new_r01*new_r01;
if(IKabs(x415)==0){
continue;
}
IkReal gconst1=((-1.0)*new_r01*(pow(x415,-0.5)));
IkReal gconst2=0;
j16eval[0]=new_r01;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x416=IKPowWithIntegerCheck(gconst1,-1);
if(!x416.valid){
continue;
}
cj16array[0]=((-1.0)*new_r01*(x416.value));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x417=IKsin(j16);
IkReal x418=IKcos(j16);
IkReal x419=((-1.0)*x417);
evalcond[0]=(new_r10*x417);
evalcond[1]=(gconst1*x419);
evalcond[2]=(new_r01*x419);
evalcond[3]=(gconst1+((new_r01*x418)));
evalcond[4]=(gconst1+((new_r10*x418)));
evalcond[5]=(((gconst1*x418))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x420=IKPowWithIntegerCheck(new_r01,-1);
if(!x420.valid){
continue;
}
cj16array[0]=((-1.0)*gconst1*(x420.value));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x421=IKsin(j16);
IkReal x422=IKcos(j16);
IkReal x423=(gconst1*x422);
IkReal x424=((-1.0)*x421);
evalcond[0]=(new_r10*x421);
evalcond[1]=(gconst1*x424);
evalcond[2]=(new_r01*x424);
evalcond[3]=(x423+new_r01);
evalcond[4]=(gconst1+((new_r10*x422)));
evalcond[5]=(x423+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst1;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x426 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x426.valid){
continue;
}
IkReal x425=((-1.0)*(x426.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x425;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x425;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j16eval[0]=-1.0;
j16eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j16eval[2]=-1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x428 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x428.valid){
continue;
}
IkReal x427=((-1.0)*(x428.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x427;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x427;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j16eval[0]=-1.0;
j16eval[1]=-1.0;
j16eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x430 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x430.valid){
continue;
}
IkReal x429=((-1.0)*(x430.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x429;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x429;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j16eval[0]=1.0;
j16eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j16eval[2]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x431=((1.0)*new_r11);
CheckValue<IkReal> x432 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x431)))),IkReal(((((-1.0)*gconst2*x431))+(((-1.0)*gconst1*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x432.valid){
continue;
}
CheckValue<IkReal> x433=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x433.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x432.value)+(((1.5707963267949)*(x433.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x434=IKsin(j16);
IkReal x435=IKcos(j16);
IkReal x436=(gconst1*x435);
IkReal x437=(gconst2*x435);
IkReal x438=(gconst1*x434);
IkReal x439=((1.0)*x434);
IkReal x440=(gconst2*x439);
evalcond[0]=(((new_r01*x435))+gconst1+((new_r11*x434)));
evalcond[1]=(x438+x437+new_r11);
evalcond[2]=((((-1.0)*x440))+x436);
evalcond[3]=((((-1.0)*x440))+x436+new_r01);
evalcond[4]=((((-1.0)*x438))+(((-1.0)*x437)));
evalcond[5]=((((-1.0)*new_r01*x439))+gconst2+((new_r11*x435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x441=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst2*gconst2)))+(((-1.0)*(gconst1*gconst1))))),-1);
if(!x441.valid){
continue;
}
CheckValue<IkReal> x442 = IKatan2WithCheck(IkReal((gconst1*new_r11)),IkReal((gconst2*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x442.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x441.value)))+(x442.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x443=IKsin(j16);
IkReal x444=IKcos(j16);
IkReal x445=(gconst1*x444);
IkReal x446=(gconst2*x444);
IkReal x447=(gconst1*x443);
IkReal x448=((1.0)*x443);
IkReal x449=(gconst2*x448);
evalcond[0]=(((new_r01*x444))+gconst1+((new_r11*x443)));
evalcond[1]=(x447+x446+new_r11);
evalcond[2]=((((-1.0)*x449))+x445);
evalcond[3]=((((-1.0)*x449))+x445+new_r01);
evalcond[4]=((((-1.0)*x447))+(((-1.0)*x446)));
evalcond[5]=((((-1.0)*new_r01*x448))+gconst2+((new_r11*x444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x450=IKPowWithIntegerCheck(IKsign((((gconst1*new_r01))+(((-1.0)*gconst2*new_r11)))),-1);
if(!x450.valid){
continue;
}
CheckValue<IkReal> x451 = IKatan2WithCheck(IkReal((gconst1*gconst2)),IkReal(((-1.0)*(gconst1*gconst1))),IKFAST_ATAN2_MAGTHRESH);
if(!x451.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x450.value)))+(x451.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x452=IKsin(j16);
IkReal x453=IKcos(j16);
IkReal x454=(gconst1*x453);
IkReal x455=(gconst2*x453);
IkReal x456=(gconst1*x452);
IkReal x457=((1.0)*x452);
IkReal x458=(gconst2*x457);
evalcond[0]=(((new_r11*x452))+((new_r01*x453))+gconst1);
evalcond[1]=(x456+x455+new_r11);
evalcond[2]=((((-1.0)*x458))+x454);
evalcond[3]=((((-1.0)*x458))+x454+new_r01);
evalcond[4]=((((-1.0)*x455))+(((-1.0)*x456)));
evalcond[5]=(((new_r11*x453))+gconst2+(((-1.0)*new_r01*x457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x459=IKPowWithIntegerCheck(gconst2,-1);
if(!x459.valid){
continue;
}
cj16array[0]=(new_r00*(x459.value));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x460=IKsin(j16);
IkReal x461=IKcos(j16);
IkReal x462=((-1.0)*x460);
evalcond[0]=(new_r11*x460);
evalcond[1]=(gconst2*x462);
evalcond[2]=(new_r00*x462);
evalcond[3]=(((gconst2*x461))+new_r11);
evalcond[4]=(((new_r11*x461))+gconst2);
evalcond[5]=(((new_r00*x461))+(((-1.0)*gconst2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x464 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x464.valid){
continue;
}
IkReal x463=((-1.0)*(x464.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x463;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x463;
IkReal gconst1=0;
IkReal x465 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x465)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x465,-0.5)));
j16eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x467 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x467.valid){
continue;
}
IkReal x466=((-1.0)*(x467.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x466;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x466;
IkReal gconst1=0;
IkReal x468 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x468)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x468,-0.5)));
j16eval[0]=new_r11;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x470 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x470.valid){
continue;
}
IkReal x469=((-1.0)*(x470.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x469;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x469;
IkReal gconst1=0;
IkReal x471 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x471)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x471,-0.5)));
j16eval[0]=new_r10;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x472=IKPowWithIntegerCheck(new_r10,-1);
if(!x472.valid){
continue;
}
CheckValue<IkReal> x473=IKPowWithIntegerCheck(gconst2,-1);
if(!x473.valid){
continue;
}
if( IKabs((gconst2*(x472.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x473.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst2*(x472.value)))+IKsqr(((-1.0)*new_r11*(x473.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((gconst2*(x472.value)), ((-1.0)*new_r11*(x473.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x474=IKsin(j16);
IkReal x475=IKcos(j16);
IkReal x476=((1.0)*gconst2);
IkReal x477=((-1.0)*gconst2);
evalcond[0]=(new_r11*x474);
evalcond[1]=(new_r10*x475);
evalcond[2]=(x474*x477);
evalcond[3]=(x475*x477);
evalcond[4]=(((gconst2*x475))+new_r11);
evalcond[5]=(gconst2+((new_r11*x475)));
evalcond[6]=(new_r10+(((-1.0)*x474*x476)));
evalcond[7]=(((new_r10*x474))+(((-1.0)*x476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x478=IKPowWithIntegerCheck(gconst2,-1);
if(!x478.valid){
continue;
}
CheckValue<IkReal> x479=IKPowWithIntegerCheck(new_r11,-1);
if(!x479.valid){
continue;
}
if( IKabs((new_r10*(x478.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x479.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x478.value)))+IKsqr(((-1.0)*gconst2*(x479.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((new_r10*(x478.value)), ((-1.0)*gconst2*(x479.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x480=IKsin(j16);
IkReal x481=IKcos(j16);
IkReal x482=((1.0)*gconst2);
IkReal x483=((-1.0)*gconst2);
evalcond[0]=(new_r11*x480);
evalcond[1]=(new_r10*x481);
evalcond[2]=(x480*x483);
evalcond[3]=(x481*x483);
evalcond[4]=(((gconst2*x481))+new_r11);
evalcond[5]=(((new_r11*x481))+gconst2);
evalcond[6]=((((-1.0)*x480*x482))+new_r10);
evalcond[7]=((((-1.0)*x482))+((new_r10*x480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x484 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x484.valid){
continue;
}
CheckValue<IkReal> x485=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x485.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x484.value)+(((1.5707963267949)*(x485.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x486=IKsin(j16);
IkReal x487=IKcos(j16);
IkReal x488=((1.0)*gconst2);
IkReal x489=((-1.0)*gconst2);
evalcond[0]=(new_r11*x486);
evalcond[1]=(new_r10*x487);
evalcond[2]=(x486*x489);
evalcond[3]=(x487*x489);
evalcond[4]=(((gconst2*x487))+new_r11);
evalcond[5]=(((new_r11*x487))+gconst2);
evalcond[6]=((((-1.0)*x486*x488))+new_r10);
evalcond[7]=((((-1.0)*x488))+((new_r10*x486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x491 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x491.valid){
continue;
}
IkReal x490=((-1.0)*(x491.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x490;
new_r01=0;
IkReal gconst0=x490;
IkReal gconst1=0;
IkReal x492 = new_r11*new_r11;
if(IKabs(x492)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x492,-0.5)));
j16eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x494 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x494.valid){
continue;
}
IkReal x493=((-1.0)*(x494.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x493;
new_r01=0;
IkReal gconst0=x493;
IkReal gconst1=0;
IkReal x495 = new_r11*new_r11;
if(IKabs(x495)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x495,-0.5)));
j16eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x497 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x497.valid){
continue;
}
IkReal x496=((-1.0)*(x497.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x496;
new_r01=0;
IkReal gconst0=x496;
IkReal gconst1=0;
IkReal x498 = new_r11*new_r11;
if(IKabs(x498)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x498,-0.5)));
j16eval[0]=new_r11;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x499=IKPowWithIntegerCheck(gconst2,-1);
if(!x499.valid){
continue;
}
CheckValue<IkReal> x500=IKPowWithIntegerCheck(new_r11,-1);
if(!x500.valid){
continue;
}
if( IKabs((new_r10*(x499.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x500.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x499.value)))+IKsqr(((-1.0)*gconst2*(x500.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((new_r10*(x499.value)), ((-1.0)*gconst2*(x500.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x501=IKsin(j16);
IkReal x502=IKcos(j16);
IkReal x503=(gconst2*x501);
IkReal x504=(gconst2*x502);
evalcond[0]=(new_r11*x501);
evalcond[1]=((-1.0)*x503);
evalcond[2]=(x504+new_r11);
evalcond[3]=(gconst2+((new_r11*x502)));
evalcond[4]=(new_r00+(((-1.0)*x504)));
evalcond[5]=(new_r10+(((-1.0)*x503)));
evalcond[6]=((((-1.0)*new_r00*x501))+((new_r10*x502)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x501))+((new_r00*x502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x505 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x505.valid){
continue;
}
CheckValue<IkReal> x506=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x506.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x505.value)+(((1.5707963267949)*(x506.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x507=IKsin(j16);
IkReal x508=IKcos(j16);
IkReal x509=(gconst2*x507);
IkReal x510=(gconst2*x508);
evalcond[0]=(new_r11*x507);
evalcond[1]=((-1.0)*x509);
evalcond[2]=(x510+new_r11);
evalcond[3]=(gconst2+((new_r11*x508)));
evalcond[4]=((((-1.0)*x510))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*x509)));
evalcond[6]=((((-1.0)*new_r00*x507))+((new_r10*x508)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x507))+((new_r00*x508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x511=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x511.valid){
continue;
}
CheckValue<IkReal> x512 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x512.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x511.value)))+(x512.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x513=IKsin(j16);
IkReal x514=IKcos(j16);
IkReal x515=(gconst2*x513);
IkReal x516=(gconst2*x514);
evalcond[0]=(new_r11*x513);
evalcond[1]=((-1.0)*x515);
evalcond[2]=(x516+new_r11);
evalcond[3]=(((new_r11*x514))+gconst2);
evalcond[4]=((((-1.0)*x516))+new_r00);
evalcond[5]=((((-1.0)*x515))+new_r10);
evalcond[6]=(((new_r10*x514))+(((-1.0)*new_r00*x513)));
evalcond[7]=(((new_r00*x514))+((new_r10*x513))+(((-1.0)*gconst2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x517=((1.0)*new_r11);
CheckValue<IkReal> x518 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x517)))),IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x518.valid){
continue;
}
CheckValue<IkReal> x519=IKPowWithIntegerCheck(IKsign(((gconst1*gconst1)+(gconst2*gconst2))),-1);
if(!x519.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x518.value)+(((1.5707963267949)*(x519.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x520=IKsin(j16);
IkReal x521=IKcos(j16);
IkReal x522=(gconst1*x521);
IkReal x523=(gconst2*x521);
IkReal x524=((1.0)*x520);
IkReal x525=(gconst2*x524);
evalcond[0]=(((new_r01*x521))+gconst1+((new_r11*x520)));
evalcond[1]=(x523+((gconst1*x520))+new_r11);
evalcond[2]=((((-1.0)*x525))+x522+new_r01);
evalcond[3]=(gconst1+(((-1.0)*new_r00*x524))+((new_r10*x521)));
evalcond[4]=(gconst2+((new_r11*x521))+(((-1.0)*new_r01*x524)));
evalcond[5]=((((-1.0)*x525))+x522+new_r10);
evalcond[6]=((((-1.0)*gconst2))+((new_r10*x520))+((new_r00*x521)));
evalcond[7]=((((-1.0)*x523))+new_r00+(((-1.0)*gconst1*x524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x526=((1.0)*new_r11);
CheckValue<IkReal> x527=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x527.valid){
continue;
}
CheckValue<IkReal> x528 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x526)))),IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x528.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x527.value)))+(x528.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x529=IKsin(j16);
IkReal x530=IKcos(j16);
IkReal x531=(gconst1*x530);
IkReal x532=(gconst2*x530);
IkReal x533=((1.0)*x529);
IkReal x534=(gconst2*x533);
evalcond[0]=(((new_r01*x530))+gconst1+((new_r11*x529)));
evalcond[1]=(x532+((gconst1*x529))+new_r11);
evalcond[2]=((((-1.0)*x534))+x531+new_r01);
evalcond[3]=(gconst1+(((-1.0)*new_r00*x533))+((new_r10*x530)));
evalcond[4]=(gconst2+((new_r11*x530))+(((-1.0)*new_r01*x533)));
evalcond[5]=((((-1.0)*x534))+x531+new_r10);
evalcond[6]=((((-1.0)*gconst2))+((new_r10*x529))+((new_r00*x530)));
evalcond[7]=((((-1.0)*x532))+new_r00+(((-1.0)*gconst1*x533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x535=((1.0)*gconst1);
CheckValue<IkReal> x536 = IKatan2WithCheck(IkReal((((gconst1*new_r01))+(((-1.0)*new_r10*x535)))),IkReal(((((-1.0)*new_r00*x535))+(((-1.0)*new_r11*x535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x536.valid){
continue;
}
CheckValue<IkReal> x537=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x537.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x536.value)+(((1.5707963267949)*(x537.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x538=IKsin(j16);
IkReal x539=IKcos(j16);
IkReal x540=(gconst1*x539);
IkReal x541=(gconst2*x539);
IkReal x542=((1.0)*x538);
IkReal x543=(gconst2*x542);
evalcond[0]=(((new_r01*x539))+gconst1+((new_r11*x538)));
evalcond[1]=(((gconst1*x538))+x541+new_r11);
evalcond[2]=((((-1.0)*x543))+x540+new_r01);
evalcond[3]=((((-1.0)*new_r00*x542))+gconst1+((new_r10*x539)));
evalcond[4]=(gconst2+((new_r11*x539))+(((-1.0)*new_r01*x542)));
evalcond[5]=((((-1.0)*x543))+x540+new_r10);
evalcond[6]=((((-1.0)*gconst2))+((new_r10*x538))+((new_r00*x539)));
evalcond[7]=((((-1.0)*x541))+new_r00+(((-1.0)*gconst1*x542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x545 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x545)==0){
continue;
}
IkReal x544=pow(x545,-0.5);
CheckValue<IkReal> x546 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x546.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x546.value))));
IkReal gconst4=((1.0)*new_r01*x544);
IkReal gconst5=((-1.0)*new_r11*x544);
CheckValue<IkReal> x547 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x547.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j18+(x547.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x550 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x550.valid){
continue;
}
IkReal x548=((1.0)*(x550.value));
IkReal x549=x544;
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x548)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x548)));
IkReal gconst4=((1.0)*new_r01*x549);
IkReal gconst5=((-1.0)*new_r11*x549);
IkReal x551=new_r01*new_r01;
IkReal x552=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x553=x544;
IkReal x554=((1.0)*new_r01*x553);
j16eval[0]=x552;
j16eval[1]=IKsign(x552);
j16eval[2]=((IKabs(((((-1.0)*new_r10*x554))+((x551*x553)))))+(IKabs(((((-1.0)*new_r11*x554))+(((-1.0)*new_r00*x554))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x557 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x557.valid){
continue;
}
IkReal x555=((1.0)*(x557.value));
IkReal x556=x544;
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x555)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x555)));
IkReal gconst4=((1.0)*new_r01*x556);
IkReal gconst5=((-1.0)*new_r11*x556);
IkReal x558=((new_r01*new_r01)+(new_r11*new_r11));
j16eval[0]=x558;
j16eval[1]=IKsign(x558);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x561 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x561.valid){
continue;
}
IkReal x559=((1.0)*(x561.value));
IkReal x560=x544;
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x559)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x559)));
IkReal gconst4=((1.0)*new_r01*x560);
IkReal gconst5=((-1.0)*new_r11*x560);
j16eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst4*gconst4)+(gconst5*gconst5));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[4], cj16array[4], sj16array[4];
bool j16valid[4]={false};
_nj16 = 4;
j16array[0]=0;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=1.5707963267949;
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
j16array[2]=3.14159265358979;
sj16array[2]=IKsin(j16array[2]);
cj16array[2]=IKcos(j16array[2]);
j16array[3]=-1.5707963267949;
sj16array[3]=IKsin(j16array[3]);
cj16array[3]=IKcos(j16array[3]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
if( j16array[2] > IKPI )
{
    j16array[2]-=IK2PI;
}
else if( j16array[2] < -IKPI )
{    j16array[2]+=IK2PI;
}
j16valid[2] = true;
if( j16array[3] > IKPI )
{
    j16array[3]-=IK2PI;
}
else if( j16array[3] < -IKPI )
{    j16array[3]+=IK2PI;
}
j16valid[3] = true;
for(int ij16 = 0; ij16 < 4; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 4; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x563 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x563.valid){
continue;
}
IkReal x562=((1.0)*(x563.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x562)));
new_r11=0;
new_r00=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x562)));
IkReal x564 = new_r01*new_r01;
if(IKabs(x564)==0){
continue;
}
IkReal gconst4=((1.0)*new_r01*(pow(x564,-0.5)));
IkReal gconst5=0;
j16eval[0]=new_r01;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x565=IKPowWithIntegerCheck(gconst4,-1);
if(!x565.valid){
continue;
}
cj16array[0]=((-1.0)*new_r01*(x565.value));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x566=IKsin(j16);
IkReal x567=IKcos(j16);
IkReal x568=((-1.0)*x566);
evalcond[0]=(new_r10*x566);
evalcond[1]=(gconst4*x568);
evalcond[2]=(new_r01*x568);
evalcond[3]=(gconst4+((new_r01*x567)));
evalcond[4]=(gconst4+((new_r10*x567)));
evalcond[5]=(((gconst4*x567))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x569=IKPowWithIntegerCheck(new_r01,-1);
if(!x569.valid){
continue;
}
cj16array[0]=((-1.0)*gconst4*(x569.value));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x570=IKsin(j16);
IkReal x571=IKcos(j16);
IkReal x572=(gconst4*x571);
IkReal x573=((-1.0)*x570);
evalcond[0]=(new_r10*x570);
evalcond[1]=(gconst4*x573);
evalcond[2]=(new_r01*x573);
evalcond[3]=(x572+new_r01);
evalcond[4]=(((new_r10*x571))+gconst4);
evalcond[5]=(x572+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst4;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
CheckValue<IkReal> x575 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x575.valid){
continue;
}
IkReal x574=((1.0)*(x575.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x574)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x574)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j16eval[0]=1.0;
j16eval[1]=1.0;
j16eval[2]=new_r01;
j16eval[3]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x577 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x577.valid){
continue;
}
IkReal x576=((1.0)*(x577.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x576)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x576)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j16eval[0]=-1.0;
j16eval[1]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
j16eval[2]=-1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x579 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x579.valid){
continue;
}
IkReal x578=((1.0)*(x579.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x578)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x578)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j16eval[0]=1.0;
j16eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j16eval[2]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x580=((1.0)*new_r11);
CheckValue<IkReal> x581 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x580)))),IkReal(((((-1.0)*gconst4*new_r01))+(((-1.0)*gconst5*x580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x581.valid){
continue;
}
CheckValue<IkReal> x582=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x582.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x581.value)+(((1.5707963267949)*(x582.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x583=IKsin(j16);
IkReal x584=IKcos(j16);
IkReal x585=(gconst4*x584);
IkReal x586=(gconst4*x583);
IkReal x587=(gconst5*x584);
IkReal x588=((1.0)*x583);
IkReal x589=(gconst5*x588);
evalcond[0]=(gconst4+((new_r01*x584))+((new_r11*x583)));
evalcond[1]=(x586+x587+new_r11);
evalcond[2]=(x585+(((-1.0)*x589)));
evalcond[3]=(x585+new_r01+(((-1.0)*x589)));
evalcond[4]=((((-1.0)*x586))+(((-1.0)*x587)));
evalcond[5]=((((-1.0)*new_r01*x588))+gconst5+((new_r11*x584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x590 = IKatan2WithCheck(IkReal((gconst4*new_r11)),IkReal((gconst5*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x590.valid){
continue;
}
CheckValue<IkReal> x591=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst4*gconst4)))+(((-1.0)*(gconst5*gconst5))))),-1);
if(!x591.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x590.value)+(((1.5707963267949)*(x591.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x592=IKsin(j16);
IkReal x593=IKcos(j16);
IkReal x594=(gconst4*x593);
IkReal x595=(gconst4*x592);
IkReal x596=(gconst5*x593);
IkReal x597=((1.0)*x592);
IkReal x598=(gconst5*x597);
evalcond[0]=(((new_r11*x592))+gconst4+((new_r01*x593)));
evalcond[1]=(x596+x595+new_r11);
evalcond[2]=((((-1.0)*x598))+x594);
evalcond[3]=((((-1.0)*x598))+x594+new_r01);
evalcond[4]=((((-1.0)*x595))+(((-1.0)*x596)));
evalcond[5]=(((new_r11*x593))+gconst5+(((-1.0)*new_r01*x597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x599 = IKatan2WithCheck(IkReal((gconst4*gconst5)),IkReal(((-1.0)*(gconst4*gconst4))),IKFAST_ATAN2_MAGTHRESH);
if(!x599.valid){
continue;
}
CheckValue<IkReal> x600=IKPowWithIntegerCheck(IKsign((((gconst4*new_r01))+(((-1.0)*gconst5*new_r11)))),-1);
if(!x600.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x599.value)+(((1.5707963267949)*(x600.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x601=IKsin(j16);
IkReal x602=IKcos(j16);
IkReal x603=(gconst4*x602);
IkReal x604=(gconst4*x601);
IkReal x605=(gconst5*x602);
IkReal x606=((1.0)*x601);
IkReal x607=(gconst5*x606);
evalcond[0]=(gconst4+((new_r11*x601))+((new_r01*x602)));
evalcond[1]=(x605+x604+new_r11);
evalcond[2]=(x603+(((-1.0)*x607)));
evalcond[3]=(x603+(((-1.0)*x607))+new_r01);
evalcond[4]=((((-1.0)*x605))+(((-1.0)*x604)));
evalcond[5]=(gconst5+((new_r11*x602))+(((-1.0)*new_r01*x606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x608=IKPowWithIntegerCheck(gconst5,-1);
if(!x608.valid){
continue;
}
cj16array[0]=(new_r00*(x608.value));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x609=IKsin(j16);
IkReal x610=IKcos(j16);
IkReal x611=((-1.0)*x609);
evalcond[0]=(new_r11*x609);
evalcond[1]=(gconst5*x611);
evalcond[2]=(new_r00*x611);
evalcond[3]=(((gconst5*x610))+new_r11);
evalcond[4]=(gconst5+((new_r11*x610)));
evalcond[5]=((((-1.0)*gconst5))+((new_r00*x610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x613 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x613.valid){
continue;
}
IkReal x612=((1.0)*(x613.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x612)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x612)));
IkReal gconst4=0;
IkReal x614 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x614)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x614,-0.5)));
j16eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x616 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x616.valid){
continue;
}
IkReal x615=((1.0)*(x616.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x615)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x615)));
IkReal gconst4=0;
IkReal x617 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x617)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x617,-0.5)));
j16eval[0]=new_r11;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x619 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x619.valid){
continue;
}
IkReal x618=((1.0)*(x619.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x618)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x618)));
IkReal gconst4=0;
IkReal x620 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x620)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x620,-0.5)));
j16eval[0]=new_r10;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x621=IKPowWithIntegerCheck(new_r10,-1);
if(!x621.valid){
continue;
}
CheckValue<IkReal> x622=IKPowWithIntegerCheck(gconst5,-1);
if(!x622.valid){
continue;
}
if( IKabs((gconst5*(x621.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x622.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst5*(x621.value)))+IKsqr(((-1.0)*new_r11*(x622.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((gconst5*(x621.value)), ((-1.0)*new_r11*(x622.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x623=IKsin(j16);
IkReal x624=IKcos(j16);
IkReal x625=((1.0)*gconst5);
IkReal x626=(gconst5*x624);
evalcond[0]=(new_r11*x623);
evalcond[1]=(new_r10*x624);
evalcond[2]=((-1.0)*gconst5*x623);
evalcond[3]=((-1.0)*x626);
evalcond[4]=(x626+new_r11);
evalcond[5]=(gconst5+((new_r11*x624)));
evalcond[6]=((((-1.0)*x623*x625))+new_r10);
evalcond[7]=((((-1.0)*x625))+((new_r10*x623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x627=IKPowWithIntegerCheck(gconst5,-1);
if(!x627.valid){
continue;
}
CheckValue<IkReal> x628=IKPowWithIntegerCheck(new_r11,-1);
if(!x628.valid){
continue;
}
if( IKabs((new_r10*(x627.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x628.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x627.value)))+IKsqr(((-1.0)*gconst5*(x628.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((new_r10*(x627.value)), ((-1.0)*gconst5*(x628.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x629=IKsin(j16);
IkReal x630=IKcos(j16);
IkReal x631=((1.0)*gconst5);
IkReal x632=(gconst5*x630);
evalcond[0]=(new_r11*x629);
evalcond[1]=(new_r10*x630);
evalcond[2]=((-1.0)*gconst5*x629);
evalcond[3]=((-1.0)*x632);
evalcond[4]=(x632+new_r11);
evalcond[5]=(gconst5+((new_r11*x630)));
evalcond[6]=((((-1.0)*x629*x631))+new_r10);
evalcond[7]=((((-1.0)*x631))+((new_r10*x629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x633 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x633.valid){
continue;
}
CheckValue<IkReal> x634=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x634.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x633.value)+(((1.5707963267949)*(x634.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x635=IKsin(j16);
IkReal x636=IKcos(j16);
IkReal x637=((1.0)*gconst5);
IkReal x638=(gconst5*x636);
evalcond[0]=(new_r11*x635);
evalcond[1]=(new_r10*x636);
evalcond[2]=((-1.0)*gconst5*x635);
evalcond[3]=((-1.0)*x638);
evalcond[4]=(x638+new_r11);
evalcond[5]=(gconst5+((new_r11*x636)));
evalcond[6]=((((-1.0)*x635*x637))+new_r10);
evalcond[7]=((((-1.0)*x637))+((new_r10*x635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x640 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x640.valid){
continue;
}
IkReal x639=((1.0)*(x640.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x639)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x639)));
IkReal gconst4=0;
IkReal x641 = new_r11*new_r11;
if(IKabs(x641)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x641,-0.5)));
j16eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x643 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x643.valid){
continue;
}
IkReal x642=((1.0)*(x643.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x642)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x642)));
IkReal gconst4=0;
IkReal x644 = new_r11*new_r11;
if(IKabs(x644)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x644,-0.5)));
j16eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x646 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x646.valid){
continue;
}
IkReal x645=((1.0)*(x646.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x645)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x645)));
IkReal gconst4=0;
IkReal x647 = new_r11*new_r11;
if(IKabs(x647)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x647,-0.5)));
j16eval[0]=new_r11;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x648=IKPowWithIntegerCheck(gconst5,-1);
if(!x648.valid){
continue;
}
CheckValue<IkReal> x649=IKPowWithIntegerCheck(new_r11,-1);
if(!x649.valid){
continue;
}
if( IKabs((new_r10*(x648.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x649.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x648.value)))+IKsqr(((-1.0)*gconst5*(x649.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((new_r10*(x648.value)), ((-1.0)*gconst5*(x649.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x650=IKsin(j16);
IkReal x651=IKcos(j16);
IkReal x652=((1.0)*gconst5);
IkReal x653=((1.0)*x650);
evalcond[0]=(new_r11*x650);
evalcond[1]=((-1.0)*gconst5*x650);
evalcond[2]=(new_r11+((gconst5*x651)));
evalcond[3]=(gconst5+((new_r11*x651)));
evalcond[4]=((((-1.0)*x651*x652))+new_r00);
evalcond[5]=((((-1.0)*x650*x652))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x653))+((new_r10*x651)));
evalcond[7]=((((-1.0)*x652))+((new_r10*x650))+((new_r00*x651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x654 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x654.valid){
continue;
}
CheckValue<IkReal> x655=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x655.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x654.value)+(((1.5707963267949)*(x655.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x656=IKsin(j16);
IkReal x657=IKcos(j16);
IkReal x658=((1.0)*gconst5);
IkReal x659=((1.0)*x656);
evalcond[0]=(new_r11*x656);
evalcond[1]=((-1.0)*gconst5*x656);
evalcond[2]=(new_r11+((gconst5*x657)));
evalcond[3]=(gconst5+((new_r11*x657)));
evalcond[4]=((((-1.0)*x657*x658))+new_r00);
evalcond[5]=((((-1.0)*x656*x658))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x659))+((new_r10*x657)));
evalcond[7]=((((-1.0)*x658))+((new_r10*x656))+((new_r00*x657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x660 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x660.valid){
continue;
}
CheckValue<IkReal> x661=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x661.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x660.value)+(((1.5707963267949)*(x661.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x662=IKsin(j16);
IkReal x663=IKcos(j16);
IkReal x664=((1.0)*gconst5);
IkReal x665=((1.0)*x662);
evalcond[0]=(new_r11*x662);
evalcond[1]=((-1.0)*gconst5*x662);
evalcond[2]=(((gconst5*x663))+new_r11);
evalcond[3]=(gconst5+((new_r11*x663)));
evalcond[4]=((((-1.0)*x663*x664))+new_r00);
evalcond[5]=((((-1.0)*x662*x664))+new_r10);
evalcond[6]=(((new_r10*x663))+(((-1.0)*new_r00*x665)));
evalcond[7]=(((new_r10*x662))+(((-1.0)*x664))+((new_r00*x663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x666=((1.0)*new_r11);
CheckValue<IkReal> x667 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x666)))),IkReal(((((-1.0)*gconst4*new_r01))+(((-1.0)*gconst5*x666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x667.valid){
continue;
}
CheckValue<IkReal> x668=IKPowWithIntegerCheck(IKsign(((gconst4*gconst4)+(gconst5*gconst5))),-1);
if(!x668.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x667.value)+(((1.5707963267949)*(x668.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x669=IKsin(j16);
IkReal x670=IKcos(j16);
IkReal x671=((1.0)*gconst5);
IkReal x672=(gconst4*x670);
IkReal x673=((1.0)*x669);
IkReal x674=(x669*x671);
evalcond[0]=(((new_r01*x670))+gconst4+((new_r11*x669)));
evalcond[1]=(((gconst4*x669))+((gconst5*x670))+new_r11);
evalcond[2]=(x672+new_r01+(((-1.0)*x674)));
evalcond[3]=(((new_r10*x670))+(((-1.0)*new_r00*x673))+gconst4);
evalcond[4]=(((new_r11*x670))+(((-1.0)*new_r01*x673))+gconst5);
evalcond[5]=(x672+new_r10+(((-1.0)*x674)));
evalcond[6]=(((new_r00*x670))+((new_r10*x669))+(((-1.0)*x671)));
evalcond[7]=((((-1.0)*gconst4*x673))+(((-1.0)*x670*x671))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x675=((1.0)*new_r11);
CheckValue<IkReal> x676 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x675)))),IkReal(((((-1.0)*gconst5*x675))+(((-1.0)*gconst4*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x676.valid){
continue;
}
CheckValue<IkReal> x677=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x677.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x676.value)+(((1.5707963267949)*(x677.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x678=IKsin(j16);
IkReal x679=IKcos(j16);
IkReal x680=((1.0)*gconst5);
IkReal x681=(gconst4*x679);
IkReal x682=((1.0)*x678);
IkReal x683=(x678*x680);
evalcond[0]=(((new_r11*x678))+((new_r01*x679))+gconst4);
evalcond[1]=(((gconst5*x679))+((gconst4*x678))+new_r11);
evalcond[2]=((((-1.0)*x683))+x681+new_r01);
evalcond[3]=(((new_r10*x679))+gconst4+(((-1.0)*new_r00*x682)));
evalcond[4]=(((new_r11*x679))+(((-1.0)*new_r01*x682))+gconst5);
evalcond[5]=((((-1.0)*x683))+x681+new_r10);
evalcond[6]=(((new_r00*x679))+((new_r10*x678))+(((-1.0)*x680)));
evalcond[7]=((((-1.0)*x679*x680))+new_r00+(((-1.0)*gconst4*x682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x684=((1.0)*gconst4);
CheckValue<IkReal> x685 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x684))+((gconst4*new_r01)))),IkReal(((((-1.0)*new_r11*x684))+(((-1.0)*new_r00*x684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x685.valid){
continue;
}
CheckValue<IkReal> x686=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x686.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x685.value)+(((1.5707963267949)*(x686.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x687=IKsin(j16);
IkReal x688=IKcos(j16);
IkReal x689=((1.0)*gconst5);
IkReal x690=(gconst4*x688);
IkReal x691=((1.0)*x687);
IkReal x692=(x687*x689);
evalcond[0]=(gconst4+((new_r01*x688))+((new_r11*x687)));
evalcond[1]=(((gconst5*x688))+((gconst4*x687))+new_r11);
evalcond[2]=(x690+(((-1.0)*x692))+new_r01);
evalcond[3]=(gconst4+(((-1.0)*new_r00*x691))+((new_r10*x688)));
evalcond[4]=((((-1.0)*new_r01*x691))+gconst5+((new_r11*x688)));
evalcond[5]=(x690+(((-1.0)*x692))+new_r10);
evalcond[6]=((((-1.0)*x689))+((new_r00*x688))+((new_r10*x687)));
evalcond[7]=((((-1.0)*x688*x689))+(((-1.0)*gconst4*x691))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j16eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j16]

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x694 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x694.valid){
continue;
}
IkReal x693=x694.value;
j16array[0]=((-1.0)*x693);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((3.14159265358979)+(((-1.0)*x693)));
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j16))))+(((-1.0)*new_r00*(IKsin(j16)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x695=((1.0)*sj18);
CheckValue<IkReal> x696 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x695))+((cj18*new_r01)))),IkReal(((((-1.0)*cj18*new_r11))+(((-1.0)*new_r01*x695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x696.valid){
continue;
}
CheckValue<IkReal> x697=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x697.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x696.value)+(((1.5707963267949)*(x697.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x698=IKcos(j16);
IkReal x699=IKsin(j16);
IkReal x700=(sj18*x698);
IkReal x701=((1.0)*x699);
IkReal x702=(cj18*x698);
IkReal x703=(cj18*x701);
evalcond[0]=(((new_r11*x699))+sj18+((new_r01*x698)));
evalcond[1]=(((sj18*x699))+x702+new_r11);
evalcond[2]=((((-1.0)*x703))+x700+new_r01);
evalcond[3]=(((new_r10*x698))+sj18+(((-1.0)*new_r00*x701)));
evalcond[4]=(((new_r11*x698))+cj18+(((-1.0)*new_r01*x701)));
evalcond[5]=((((-1.0)*x703))+x700+new_r10);
evalcond[6]=(((new_r10*x699))+((new_r00*x698))+(((-1.0)*cj18)));
evalcond[7]=((((-1.0)*sj18*x701))+(((-1.0)*x702))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x704=((1.0)*sj18);
CheckValue<IkReal> x705 = IKatan2WithCheck(IkReal((((new_r01*sj18))+(((-1.0)*new_r10*x704)))),IkReal(((((-1.0)*new_r11*x704))+(((-1.0)*new_r00*x704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x705.valid){
continue;
}
CheckValue<IkReal> x706=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x706.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x705.value)+(((1.5707963267949)*(x706.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x707=IKcos(j16);
IkReal x708=IKsin(j16);
IkReal x709=(sj18*x707);
IkReal x710=((1.0)*x708);
IkReal x711=(cj18*x707);
IkReal x712=(cj18*x710);
evalcond[0]=(((new_r01*x707))+sj18+((new_r11*x708)));
evalcond[1]=(x711+new_r11+((sj18*x708)));
evalcond[2]=((((-1.0)*x712))+x709+new_r01);
evalcond[3]=(sj18+((new_r10*x707))+(((-1.0)*new_r00*x710)));
evalcond[4]=(cj18+((new_r11*x707))+(((-1.0)*new_r01*x710)));
evalcond[5]=((((-1.0)*x712))+x709+new_r10);
evalcond[6]=(((new_r00*x707))+(((-1.0)*cj18))+((new_r10*x708)));
evalcond[7]=((((-1.0)*sj18*x710))+(((-1.0)*x711))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x713 = IKatan2WithCheck(IkReal(((-1.0)+(new_r01*new_r01)+(cj18*cj18))),IkReal(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj18*sj18)))),IKFAST_ATAN2_MAGTHRESH);
if(!x713.valid){
continue;
}
CheckValue<IkReal> x714=IKPowWithIntegerCheck(IKsign((((cj18*new_r01))+((new_r11*sj18)))),-1);
if(!x714.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x713.value)+(((1.5707963267949)*(x714.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x715=IKcos(j16);
IkReal x716=IKsin(j16);
IkReal x717=(sj18*x715);
IkReal x718=((1.0)*x716);
IkReal x719=(cj18*x715);
IkReal x720=(cj18*x718);
evalcond[0]=(((new_r01*x715))+sj18+((new_r11*x716)));
evalcond[1]=(((sj18*x716))+x719+new_r11);
evalcond[2]=((((-1.0)*x720))+x717+new_r01);
evalcond[3]=(sj18+((new_r10*x715))+(((-1.0)*new_r00*x718)));
evalcond[4]=(cj18+((new_r11*x715))+(((-1.0)*new_r01*x718)));
evalcond[5]=((((-1.0)*x720))+x717+new_r10);
evalcond[6]=(((new_r00*x715))+(((-1.0)*cj18))+((new_r10*x716)));
evalcond[7]=((((-1.0)*sj18*x718))+(((-1.0)*x719))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j16eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j16eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j16eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j16]

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x722 = IKatan2WithCheck(IkReal((new_r10*new_r22)),IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x722.valid){
continue;
}
IkReal x721=x722.value;
j16array[0]=((-1.0)*x721);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((3.14159265358979)+(((-1.0)*x721)));
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x723=IKcos(j16);
IkReal x724=IKsin(j16);
IkReal x725=((1.0)*x724);
IkReal x726=(new_r11*x723);
evalcond[0]=(((new_r01*x723))+((new_r11*x724)));
evalcond[1]=(((new_r00*x723))+((new_r10*x724)));
evalcond[2]=((((-1.0)*new_r00*x725))+((new_r10*x723)));
evalcond[3]=(x726+(((-1.0)*new_r01*x725)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x725))+((new_r22*x726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x728 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x728.valid){
continue;
}
IkReal x727=x728.value;
j16array[0]=((-1.0)*x727);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((3.14159265358979)+(((-1.0)*x727)));
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x729=IKcos(j16);
IkReal x730=IKsin(j16);
IkReal x731=(new_r22*x729);
IkReal x732=((1.0)*new_r00*x730);
IkReal x733=((1.0)*new_r01*x730);
evalcond[0]=(((new_r01*x729))+((new_r11*x730)));
evalcond[1]=((((-1.0)*x732))+((new_r10*x729)));
evalcond[2]=((((-1.0)*x733))+((new_r11*x729)));
evalcond[3]=((((-1.0)*new_r22*x732))+((new_r10*x731)));
evalcond[4]=((((-1.0)*new_r22*x733))+((new_r11*x731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x735 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x735.valid){
continue;
}
IkReal x734=x735.value;
j16array[0]=((-1.0)*x734);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((3.14159265358979)+(((-1.0)*x734)));
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x736=IKcos(j16);
IkReal x737=IKsin(j16);
IkReal x738=((1.0)*x737);
IkReal x739=(new_r22*x736);
evalcond[0]=(((new_r00*x736))+((new_r10*x737)));
evalcond[1]=((((-1.0)*new_r00*x738))+((new_r10*x736)));
evalcond[2]=((((-1.0)*new_r01*x738))+((new_r11*x736)));
evalcond[3]=((((-1.0)*new_r00*new_r22*x738))+((new_r10*x739)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x738))+((new_r11*x739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x741=IKPowWithIntegerCheck(cj17,-1);
if(!x741.valid){
continue;
}
IkReal x740=x741.value;
CheckValue<IkReal> x742=IKPowWithIntegerCheck(new_r01,-1);
if(!x742.valid){
continue;
}
if( IKabs(((-1.0)*new_r02*x740)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x740*(x742.value)*(((((-1.0)*cj17*sj18))+((new_r02*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02*x740))+IKsqr((x740*(x742.value)*(((((-1.0)*cj17*sj18))+((new_r02*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r02*x740), (x740*(x742.value)*(((((-1.0)*cj17*sj18))+((new_r02*new_r11))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[18];
IkReal x743=IKcos(j16);
IkReal x744=IKsin(j16);
IkReal x745=((1.0)*cj18);
IkReal x746=((1.0)*cj17);
IkReal x747=((1.0)*new_r02);
IkReal x748=((1.0)*sj17);
IkReal x749=((1.0)*sj18);
IkReal x750=(sj17*x745);
IkReal x751=(new_r01*x744);
IkReal x752=(sj17*x744);
IkReal x753=(new_r00*x744);
IkReal x754=(sj17*x743);
IkReal x755=(new_r12*x743);
IkReal x756=(cj17*x743);
evalcond[0]=(((cj17*x744))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x743*x746)));
evalcond[2]=(((new_r12*x744))+((new_r02*x743)));
evalcond[3]=(sj18+((new_r01*x743))+((new_r11*x744)));
evalcond[4]=(((sj18*x743))+((cj18*x752))+new_r01);
evalcond[5]=(((new_r10*x744))+((new_r00*x743))+(((-1.0)*x745)));
evalcond[6]=(((sj18*x752))+new_r00+(((-1.0)*x743*x745)));
evalcond[7]=(((sj18*x744))+(((-1.0)*x743*x750))+new_r11);
evalcond[8]=((((-1.0)*x744*x747))+x755+(((-1.0)*x746)));
evalcond[9]=((((-1.0)*sj18*x743*x748))+(((-1.0)*x744*x745))+new_r10);
evalcond[10]=((((-1.0)*sj18*x748))+((new_r10*x743))+(((-1.0)*x753)));
evalcond[11]=((((-1.0)*x751))+((new_r11*x743))+(((-1.0)*x750)));
evalcond[12]=((((-1.0)*x746*x753))+((new_r10*x756))+((new_r20*sj17)));
evalcond[13]=(((new_r11*x756))+(((-1.0)*x746*x751))+((new_r21*sj17)));
evalcond[14]=((((-1.0)*new_r22*x746))+((new_r12*x754))+(((-1.0)*x747*x752)));
evalcond[15]=((-1.0)+((cj17*x755))+(((-1.0)*new_r02*x744*x746))+((new_r22*sj17)));
evalcond[16]=((((-1.0)*new_r20*x746))+((new_r10*x754))+(((-1.0)*x749))+(((-1.0)*x748*x753)));
evalcond[17]=(((new_r11*x754))+(((-1.0)*new_r21*x746))+(((-1.0)*x745))+(((-1.0)*x748*x751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x757=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x757.valid){
continue;
}
CheckValue<IkReal> x758 = IKatan2WithCheck(IkReal(((-1.0)*new_r02)),IkReal(new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x758.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x757.value)))+(x758.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[18];
IkReal x759=IKcos(j16);
IkReal x760=IKsin(j16);
IkReal x761=((1.0)*cj18);
IkReal x762=((1.0)*cj17);
IkReal x763=((1.0)*new_r02);
IkReal x764=((1.0)*sj17);
IkReal x765=((1.0)*sj18);
IkReal x766=(sj17*x761);
IkReal x767=(new_r01*x760);
IkReal x768=(sj17*x760);
IkReal x769=(new_r00*x760);
IkReal x770=(sj17*x759);
IkReal x771=(new_r12*x759);
IkReal x772=(cj17*x759);
evalcond[0]=(((cj17*x760))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x759*x762)));
evalcond[2]=(((new_r12*x760))+((new_r02*x759)));
evalcond[3]=(((new_r11*x760))+sj18+((new_r01*x759)));
evalcond[4]=(((sj18*x759))+((cj18*x768))+new_r01);
evalcond[5]=(((new_r10*x760))+(((-1.0)*x761))+((new_r00*x759)));
evalcond[6]=(((sj18*x768))+new_r00+(((-1.0)*x759*x761)));
evalcond[7]=(((sj18*x760))+new_r11+(((-1.0)*x759*x766)));
evalcond[8]=((((-1.0)*x762))+x771+(((-1.0)*x760*x763)));
evalcond[9]=((((-1.0)*sj18*x759*x764))+new_r10+(((-1.0)*x760*x761)));
evalcond[10]=(((new_r10*x759))+(((-1.0)*x769))+(((-1.0)*sj18*x764)));
evalcond[11]=((((-1.0)*x766))+((new_r11*x759))+(((-1.0)*x767)));
evalcond[12]=((((-1.0)*x762*x769))+((new_r10*x772))+((new_r20*sj17)));
evalcond[13]=((((-1.0)*x762*x767))+((new_r11*x772))+((new_r21*sj17)));
evalcond[14]=((((-1.0)*x763*x768))+(((-1.0)*new_r22*x762))+((new_r12*x770)));
evalcond[15]=((-1.0)+((cj17*x771))+(((-1.0)*new_r02*x760*x762))+((new_r22*sj17)));
evalcond[16]=((((-1.0)*new_r20*x762))+(((-1.0)*x765))+(((-1.0)*x764*x769))+((new_r10*x770)));
evalcond[17]=((((-1.0)*x761))+(((-1.0)*x764*x767))+((new_r11*x770))+(((-1.0)*new_r21*x762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x773=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x773.valid){
continue;
}
CheckValue<IkReal> x774 = IKatan2WithCheck(IkReal(((-1.0)*new_r02)),IkReal(new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x774.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x773.value)))+(x774.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x775=IKcos(j16);
IkReal x776=IKsin(j16);
IkReal x777=((1.0)*cj17);
IkReal x778=((1.0)*x776);
IkReal x779=(cj17*x775);
IkReal x780=(new_r12*x775);
evalcond[0]=(((cj17*x776))+new_r02);
evalcond[1]=((((-1.0)*x775*x777))+new_r12);
evalcond[2]=(((new_r12*x776))+((new_r02*x775)));
evalcond[3]=((((-1.0)*new_r02*x778))+x780+(((-1.0)*x777)));
evalcond[4]=(((new_r10*x779))+(((-1.0)*new_r00*x776*x777))+((new_r20*sj17)));
evalcond[5]=((((-1.0)*new_r01*x776*x777))+((new_r11*x779))+((new_r21*sj17)));
evalcond[6]=(((sj17*x780))+(((-1.0)*new_r22*x777))+(((-1.0)*new_r02*sj17*x778)));
evalcond[7]=((-1.0)+((new_r22*sj17))+(((-1.0)*new_r02*x776*x777))+((new_r12*x779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j18eval[3];
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
j18eval[0]=cj16;
j18eval[1]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal j18eval[3];
j18eval[0]=cj17;
j18eval[1]=sj16;
j18eval[2]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x781=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj16*x781))+(((-1.0)*new_r00*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj16*x781))+((cj16*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj16*x781))+(((-1.0)*new_r00*sj16))))+IKsqr(((((-1.0)*sj16*x781))+((cj16*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*cj16*x781))+(((-1.0)*new_r00*sj16))), ((((-1.0)*sj16*x781))+((cj16*new_r00))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x782=IKcos(j18);
IkReal x783=IKsin(j18);
IkReal x784=((1.0)*sj16);
IkReal x785=(sj16*x783);
IkReal x786=((1.0)*x782);
IkReal x787=(cj16*x783);
IkReal x788=(sj16*x782);
IkReal x789=(cj16*x786);
evalcond[0]=(x783+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=((((-1.0)*x786))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[2]=(x787+x788+new_r01);
evalcond[3]=((((-1.0)*x789))+x785+new_r00);
evalcond[4]=((((-1.0)*x789))+x785+new_r11);
evalcond[5]=((((-1.0)*x783))+((cj16*new_r10))+(((-1.0)*new_r00*x784)));
evalcond[6]=((((-1.0)*new_r01*x784))+(((-1.0)*x786))+((cj16*new_r11)));
evalcond[7]=((((-1.0)*x782*x784))+(((-1.0)*x787))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x790=((1.0)*cj16);
if( IKabs(((((-1.0)*new_r01*x790))+(((-1.0)*new_r11*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x790))+((new_r01*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x790))+(((-1.0)*new_r11*sj16))))+IKsqr(((((-1.0)*new_r11*x790))+((new_r01*sj16))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*new_r01*x790))+(((-1.0)*new_r11*sj16))), ((((-1.0)*new_r11*x790))+((new_r01*sj16))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x791=IKsin(j18);
IkReal x792=IKcos(j18);
IkReal x793=((1.0)*sj16);
IkReal x794=(cj16*x791);
IkReal x795=(cj16*x792);
IkReal x796=(x792*x793);
evalcond[0]=(x791+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=(x791+((cj16*new_r10))+(((-1.0)*new_r00*x793)));
evalcond[2]=((((-1.0)*new_r01*x793))+x792+((cj16*new_r11)));
evalcond[3]=((((-1.0)*x792))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[4]=(x795+new_r11+((sj16*x791)));
evalcond[5]=((((-1.0)*x796))+x794+new_r01);
evalcond[6]=((((-1.0)*x796))+x794+new_r10);
evalcond[7]=((((-1.0)*x791*x793))+(((-1.0)*x795))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x797=IKsin(j18);
IkReal x798=IKcos(j18);
IkReal x799=((1.0)*cj17);
IkReal x800=((1.0)*x798);
IkReal x801=((1.0)*x797);
evalcond[0]=(x797+new_r01);
evalcond[1]=(((cj17*x797))+new_r20);
evalcond[2]=(((cj17*x798))+new_r21);
evalcond[3]=(new_r00+(((-1.0)*x800)));
evalcond[4]=((((-1.0)*sj17*x800))+new_r11);
evalcond[5]=((((-1.0)*sj17*x801))+new_r10);
evalcond[6]=(((new_r10*sj17))+(((-1.0)*x801))+(((-1.0)*new_r20*x799)));
evalcond[7]=((((-1.0)*new_r21*x799))+(((-1.0)*x800))+((new_r11*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[3];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r21));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x802=IKsin(j18);
IkReal x803=IKcos(j18);
evalcond[0]=(new_r20+x802);
evalcond[1]=(new_r21+x803);
evalcond[2]=((((-1.0)*new_r01))+x802);
evalcond[3]=((((-1.0)*x803))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r20, new_r21);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x804=IKsin(j18);
IkReal x805=((1.0)*(IKcos(j18)));
evalcond[0]=((((-1.0)*x804))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x805)));
evalcond[2]=((((-1.0)*new_r01))+x804);
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x806=IKcos(j18);
IkReal x807=IKsin(j18);
evalcond[0]=(new_r11+x806);
evalcond[1]=((((-1.0)*new_r01))+x807);
evalcond[2]=((((-1.0)*x806))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x807))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, new_r11);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x808=IKsin(j18);
IkReal x809=((1.0)*(IKcos(j18)));
evalcond[0]=((((-1.0)*new_r01))+x808);
evalcond[1]=(new_r11+(((-1.0)*x809)));
evalcond[2]=((((-1.0)*new_r10))+x808);
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x810=IKcos(j18);
IkReal x811=IKsin(j18);
IkReal x812=((-1.0)*x811);
evalcond[0]=(new_r22*x810);
evalcond[1]=x812;
evalcond[2]=((-1.0)*x810);
evalcond[3]=(new_r22*x812);
evalcond[4]=((((-1.0)*new_r01))+x811);
evalcond[5]=((((-1.0)*x810))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x813=IKPowWithIntegerCheck(sj17,-1);
if(!x813.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x813.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11*(x813.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r11*(x813.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x814=IKsin(j18);
IkReal x815=IKcos(j18);
IkReal x816=((1.0)*cj17);
IkReal x817=((1.0)*new_r10);
IkReal x818=((1.0)*x815);
IkReal x819=((1.0)*x814);
evalcond[0]=(((cj17*x814))+new_r20);
evalcond[1]=(((cj17*x815))+new_r21);
evalcond[2]=((((-1.0)*new_r01))+x814);
evalcond[3]=(((sj17*x815))+new_r11);
evalcond[4]=((((-1.0)*x818))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x817))+(((-1.0)*sj17*x819)));
evalcond[6]=((((-1.0)*x819))+(((-1.0)*new_r20*x816))+(((-1.0)*sj17*x817)));
evalcond[7]=((((-1.0)*new_r21*x816))+(((-1.0)*x818))+(((-1.0)*new_r11*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x820=IKPowWithIntegerCheck(cj17,-1);
if(!x820.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x820.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21*(x820.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r21*(x820.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x821=IKsin(j18);
IkReal x822=IKcos(j18);
IkReal x823=((1.0)*cj17);
IkReal x824=((1.0)*new_r10);
IkReal x825=((1.0)*x822);
IkReal x826=((1.0)*x821);
evalcond[0]=(((cj17*x821))+new_r20);
evalcond[1]=(((cj17*x822))+new_r21);
evalcond[2]=((((-1.0)*new_r01))+x821);
evalcond[3]=(((sj17*x822))+new_r11);
evalcond[4]=((((-1.0)*x825))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x824))+(((-1.0)*sj17*x826)));
evalcond[6]=((((-1.0)*new_r20*x823))+(((-1.0)*x826))+(((-1.0)*sj17*x824)));
evalcond[7]=((((-1.0)*x825))+(((-1.0)*new_r21*x823))+(((-1.0)*new_r11*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x827 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x827.valid){
continue;
}
CheckValue<IkReal> x828=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x828.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x827.value)+(((1.5707963267949)*(x828.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x829=IKsin(j18);
IkReal x830=IKcos(j18);
IkReal x831=((1.0)*cj17);
IkReal x832=((1.0)*new_r10);
IkReal x833=((1.0)*x830);
IkReal x834=((1.0)*x829);
evalcond[0]=(((cj17*x829))+new_r20);
evalcond[1]=(((cj17*x830))+new_r21);
evalcond[2]=((((-1.0)*new_r01))+x829);
evalcond[3]=(((sj17*x830))+new_r11);
evalcond[4]=((((-1.0)*x833))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x832))+(((-1.0)*sj17*x834)));
evalcond[6]=((((-1.0)*x834))+(((-1.0)*new_r20*x831))+(((-1.0)*sj17*x832)));
evalcond[7]=((((-1.0)*new_r11*sj17))+(((-1.0)*x833))+(((-1.0)*new_r21*x831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x835=IKsin(j18);
IkReal x836=IKcos(j18);
IkReal x837=((1.0)*x836);
evalcond[0]=(new_r20+x835);
evalcond[1]=(new_r21+x836);
evalcond[2]=(((cj16*x835))+new_r01);
evalcond[3]=(new_r11+((sj16*x835)));
evalcond[4]=(((new_r02*x836))+new_r10);
evalcond[5]=((((-1.0)*cj16*x837))+new_r00);
evalcond[6]=(x835+((cj16*new_r01))+((new_r11*sj16)));
evalcond[7]=((((-1.0)*x837))+((cj16*new_r00))+((new_r10*sj16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r20, new_r21);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x838=IKsin(j18);
IkReal x839=IKcos(j18);
IkReal x840=((1.0)*x839);
evalcond[0]=((((-1.0)*x838))+new_r20);
evalcond[1]=((((-1.0)*x840))+new_r21);
evalcond[2]=(((cj16*x838))+new_r01);
evalcond[3]=(new_r11+((sj16*x838)));
evalcond[4]=((((-1.0)*cj16*x840))+new_r00);
evalcond[5]=((((-1.0)*new_r02*x840))+new_r10);
evalcond[6]=(x838+((cj16*new_r01))+((new_r11*sj16)));
evalcond[7]=((((-1.0)*x840))+((cj16*new_r00))+((new_r10*sj16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x841=IKsin(j18);
IkReal x842=IKcos(j18);
IkReal x843=((1.0)*cj17);
IkReal x844=((1.0)*sj17);
IkReal x845=((1.0)*x842);
evalcond[0]=(new_r11+x841);
evalcond[1]=(((cj17*x841))+new_r20);
evalcond[2]=(((cj17*x842))+new_r21);
evalcond[3]=((((-1.0)*x845))+new_r10);
evalcond[4]=(((sj17*x842))+new_r01);
evalcond[5]=(((sj17*x841))+new_r00);
evalcond[6]=((((-1.0)*x841))+(((-1.0)*new_r20*x843))+(((-1.0)*new_r00*x844)));
evalcond[7]=((((-1.0)*x845))+(((-1.0)*new_r21*x843))+(((-1.0)*new_r01*x844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[3];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j18eval[0]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j18eval[0]=cj17;
j18eval[1]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, new_r01);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x846=IKsin(j18);
IkReal x847=((1.0)*(IKcos(j18)));
evalcond[0]=((((-1.0)*new_r11))+x846);
evalcond[1]=((((-1.0)*x847))+new_r01);
evalcond[2]=((((-1.0)*x846))+new_r00);
evalcond[3]=((((-1.0)*x847))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r01));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x848=IKsin(j18);
IkReal x849=IKcos(j18);
evalcond[0]=(new_r01+x849);
evalcond[1]=(new_r00+x848);
evalcond[2]=((((-1.0)*new_r11))+x848);
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r21));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x850=IKsin(j18);
IkReal x851=IKcos(j18);
evalcond[0]=(new_r20+x850);
evalcond[1]=(new_r21+x851);
evalcond[2]=((((-1.0)*new_r11))+x850);
evalcond[3]=((((-1.0)*x851))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r20, new_r21);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x852=IKsin(j18);
IkReal x853=((1.0)*(IKcos(j18)));
evalcond[0]=((((-1.0)*x852))+new_r20);
evalcond[1]=((((-1.0)*x853))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x852);
evalcond[3]=((((-1.0)*x853))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x854=IKcos(j18);
IkReal x855=IKsin(j18);
IkReal x856=((-1.0)*x855);
IkReal x857=((-1.0)*x854);
evalcond[0]=x856;
evalcond[1]=x857;
evalcond[2]=(new_r22*x857);
evalcond[3]=(new_r22*x856);
evalcond[4]=((((-1.0)*new_r11))+x855);
evalcond[5]=((((-1.0)*x854))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x858=IKPowWithIntegerCheck(cj17,-1);
if(!x858.valid){
continue;
}
CheckValue<IkReal> x859=IKPowWithIntegerCheck(sj17,-1);
if(!x859.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x858.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x859.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x858.value)))+IKsqr((new_r01*(x859.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r20*(x858.value)), (new_r01*(x859.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x860=IKsin(j18);
IkReal x861=IKcos(j18);
IkReal x862=((1.0)*cj17);
IkReal x863=((1.0)*x861);
IkReal x864=((1.0)*x860);
evalcond[0]=(((cj17*x860))+new_r20);
evalcond[1]=(((cj17*x861))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x860);
evalcond[3]=(new_r01+(((-1.0)*sj17*x863)));
evalcond[4]=(new_r00+(((-1.0)*sj17*x864)));
evalcond[5]=((((-1.0)*x863))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x864))+((new_r00*sj17))+(((-1.0)*new_r20*x862)));
evalcond[7]=((((-1.0)*x863))+(((-1.0)*new_r21*x862))+((new_r01*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x865=IKPowWithIntegerCheck(cj17,-1);
if(!x865.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x865.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x865.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x865.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x866=IKsin(j18);
IkReal x867=IKcos(j18);
IkReal x868=((1.0)*cj17);
IkReal x869=((1.0)*x867);
IkReal x870=((1.0)*x866);
evalcond[0]=(((cj17*x866))+new_r20);
evalcond[1]=(((cj17*x867))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x866);
evalcond[3]=(new_r01+(((-1.0)*sj17*x869)));
evalcond[4]=((((-1.0)*sj17*x870))+new_r00);
evalcond[5]=((((-1.0)*x869))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r00*sj17))+(((-1.0)*new_r20*x868))+(((-1.0)*x870)));
evalcond[7]=((((-1.0)*x869))+(((-1.0)*new_r21*x868))+((new_r01*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x871 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x871.valid){
continue;
}
CheckValue<IkReal> x872=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x872.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x871.value)+(((1.5707963267949)*(x872.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x873=IKsin(j18);
IkReal x874=IKcos(j18);
IkReal x875=((1.0)*cj17);
IkReal x876=((1.0)*x874);
IkReal x877=((1.0)*x873);
evalcond[0]=(((cj17*x873))+new_r20);
evalcond[1]=(((cj17*x874))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x873);
evalcond[3]=((((-1.0)*sj17*x876))+new_r01);
evalcond[4]=((((-1.0)*sj17*x877))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x876)));
evalcond[6]=((((-1.0)*new_r20*x875))+((new_r00*sj17))+(((-1.0)*x877)));
evalcond[7]=((((-1.0)*new_r21*x875))+((new_r01*sj17))+(((-1.0)*x876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j18eval[0]=IKabs(new_r22);
if( IKabs(j18eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j18]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
IkReal j18array[2], cj18array[2], sj18array[2], tempj18array[1];
int numsolutions = 0;
for(int ij18 = 0; ij18 < numroots; ++ij18)
{
IkReal htj18 = zeror[ij18];
tempj18array[0]=((2.0)*(atan(htj18)));
for(int kj18 = 0; kj18 < 1; ++kj18)
{
j18array[numsolutions] = tempj18array[kj18];
if( j18array[numsolutions] > IKPI )
{
    j18array[numsolutions]-=IK2PI;
}
else if( j18array[numsolutions] < -IKPI )
{
    j18array[numsolutions]+=IK2PI;
}
sj18array[numsolutions] = IKsin(j18array[numsolutions]);
cj18array[numsolutions] = IKcos(j18array[numsolutions]);
numsolutions++;
}
}
bool j18valid[2]={true,true};
_nj18 = 2;
for(int ij18 = 0; ij18 < numsolutions; ++ij18)
    {
if( !j18valid[ij18] )
{
    continue;
}
    j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
htj18 = IKtan(j18/2);

_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < numsolutions; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x879=IKPowWithIntegerCheck(cj17,-1);
if(!x879.valid){
continue;
}
IkReal x878=x879.value;
CheckValue<IkReal> x880=IKPowWithIntegerCheck(sj16,-1);
if(!x880.valid){
continue;
}
CheckValue<IkReal> x881=IKPowWithIntegerCheck(sj17,-1);
if(!x881.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x878)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x878*(x880.value)*(x881.value)*((((cj16*new_r20))+(((-1.0)*cj17*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x878))+IKsqr((x878*(x880.value)*(x881.value)*((((cj16*new_r20))+(((-1.0)*cj17*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r20*x878), (x878*(x880.value)*(x881.value)*((((cj16*new_r20))+(((-1.0)*cj17*new_r01))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x882=IKsin(j18);
IkReal x883=IKcos(j18);
IkReal x884=((1.0)*cj17);
IkReal x885=((1.0)*sj16);
IkReal x886=(cj16*new_r10);
IkReal x887=(cj16*sj17);
IkReal x888=((1.0)*x883);
IkReal x889=(sj16*x882);
IkReal x890=((1.0)*x882);
evalcond[0]=(((cj17*x882))+new_r20);
evalcond[1]=(((cj17*x883))+new_r21);
evalcond[2]=(x882+((cj16*new_r01))+((new_r11*sj16)));
evalcond[3]=((((-1.0)*x888))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[4]=(((cj16*x882))+((sj16*sj17*x883))+new_r01);
evalcond[5]=(((sj17*x889))+new_r00+(((-1.0)*cj16*x888)));
evalcond[6]=((((-1.0)*x887*x888))+new_r11+x889);
evalcond[7]=((((-1.0)*new_r00*x885))+x886+(((-1.0)*sj17*x890)));
evalcond[8]=((((-1.0)*new_r01*x885))+(((-1.0)*sj17*x888))+((cj16*new_r11)));
evalcond[9]=((((-1.0)*x883*x885))+new_r10+(((-1.0)*x887*x890)));
evalcond[10]=(((sj17*x886))+(((-1.0)*x890))+(((-1.0)*new_r20*x884))+(((-1.0)*new_r00*sj17*x885)));
evalcond[11]=(((new_r11*x887))+(((-1.0)*new_r21*x884))+(((-1.0)*x888))+(((-1.0)*new_r01*sj17*x885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x892=IKPowWithIntegerCheck(cj17,-1);
if(!x892.valid){
continue;
}
IkReal x891=x892.value;
CheckValue<IkReal> x893=IKPowWithIntegerCheck(cj16,-1);
if(!x893.valid){
continue;
}
if( IKabs((x891*(x893.value)*(((((-1.0)*cj17*new_r01))+((new_r21*sj16*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x891)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x891*(x893.value)*(((((-1.0)*cj17*new_r01))+((new_r21*sj16*sj17))))))+IKsqr(((-1.0)*new_r21*x891))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((x891*(x893.value)*(((((-1.0)*cj17*new_r01))+((new_r21*sj16*sj17))))), ((-1.0)*new_r21*x891));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x894=IKsin(j18);
IkReal x895=IKcos(j18);
IkReal x896=((1.0)*cj17);
IkReal x897=((1.0)*sj16);
IkReal x898=(cj16*new_r10);
IkReal x899=(cj16*sj17);
IkReal x900=((1.0)*x895);
IkReal x901=(sj16*x894);
IkReal x902=((1.0)*x894);
evalcond[0]=(((cj17*x894))+new_r20);
evalcond[1]=(((cj17*x895))+new_r21);
evalcond[2]=(x894+((cj16*new_r01))+((new_r11*sj16)));
evalcond[3]=((((-1.0)*x900))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[4]=(((cj16*x894))+((sj16*sj17*x895))+new_r01);
evalcond[5]=((((-1.0)*cj16*x900))+((sj17*x901))+new_r00);
evalcond[6]=(new_r11+x901+(((-1.0)*x899*x900)));
evalcond[7]=((((-1.0)*sj17*x902))+(((-1.0)*new_r00*x897))+x898);
evalcond[8]=((((-1.0)*new_r01*x897))+(((-1.0)*sj17*x900))+((cj16*new_r11)));
evalcond[9]=((((-1.0)*x895*x897))+new_r10+(((-1.0)*x899*x902)));
evalcond[10]=((((-1.0)*x902))+(((-1.0)*new_r20*x896))+(((-1.0)*new_r00*sj17*x897))+((sj17*x898)));
evalcond[11]=(((new_r11*x899))+(((-1.0)*new_r21*x896))+(((-1.0)*x900))+(((-1.0)*new_r01*sj17*x897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x903 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x903.valid){
continue;
}
CheckValue<IkReal> x904=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x904.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x903.value)+(((1.5707963267949)*(x904.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x905=IKsin(j18);
IkReal x906=IKcos(j18);
IkReal x907=((1.0)*cj17);
IkReal x908=((1.0)*sj16);
IkReal x909=(cj16*new_r10);
IkReal x910=(cj16*sj17);
IkReal x911=((1.0)*x906);
IkReal x912=(sj16*x905);
IkReal x913=((1.0)*x905);
evalcond[0]=(((cj17*x905))+new_r20);
evalcond[1]=(((cj17*x906))+new_r21);
evalcond[2]=(((cj16*new_r01))+((new_r11*sj16))+x905);
evalcond[3]=((((-1.0)*x911))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[4]=(((sj16*sj17*x906))+new_r01+((cj16*x905)));
evalcond[5]=((((-1.0)*cj16*x911))+((sj17*x912))+new_r00);
evalcond[6]=((((-1.0)*x910*x911))+new_r11+x912);
evalcond[7]=((((-1.0)*new_r00*x908))+(((-1.0)*sj17*x913))+x909);
evalcond[8]=((((-1.0)*new_r01*x908))+(((-1.0)*sj17*x911))+((cj16*new_r11)));
evalcond[9]=((((-1.0)*x910*x913))+new_r10+(((-1.0)*x906*x908)));
evalcond[10]=((((-1.0)*new_r20*x907))+(((-1.0)*x913))+((sj17*x909))+(((-1.0)*new_r00*sj17*x908)));
evalcond[11]=(((new_r11*x910))+(((-1.0)*new_r21*x907))+(((-1.0)*x911))+(((-1.0)*new_r01*sj17*x908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - teoSim (fdf8260357721dc324e75e8bfc9da158)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
