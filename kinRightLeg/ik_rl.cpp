/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-05-11 17:08:26.307039
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[2]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[4]);
x9=IKcos(j[5]);
x10=IKcos(j[1]);
x11=IKsin(j[5]);
x12=((1.0)*x5);
x13=((0.3)*x3);
x14=((1.0)*x1);
x15=((1.0)*x6);
x16=((1.0)*x7);
x17=((0.123)*x7);
x18=((0.123)*x8);
x19=((0.0175)*x10);
x20=((0.3)*x1);
x21=((1.0)*x8);
x22=((0.33)*x1);
x23=(x0*x2);
x24=(x10*x11);
x25=(x10*x4);
x26=(x3*x4);
x27=(x2*x4);
x28=(x11*x2);
x29=(x0*x3);
x30=(x0*x10);
x31=((-1.0)*x6);
x32=((-1.0)*x5);
x33=(x10*x9);
x34=(x14*x27);
x35=(x12*x30);
x36=(((x23*x3))+(((-1.0)*x14*x4)));
x37=((((-1.0)*x29))+x34);
x38=((((-1.0)*x26))+(((-1.0)*x14*x23)));
x39=((((-1.0)*x0*x14))+(((-1.0)*x2*x26)));
x40=(x36*x5);
x41=((((-1.0)*x15*x25))+x35);
x42=(x37*x6);
x43=((((-1.0)*x12*x25))+(((-1.0)*x15*x30)));
x44=(((x5*((((x0*x1))+((x2*x26))))))+((x36*x6)));
x45=(((x5*(((((-1.0)*x34))+x29))))+((x38*x6)));
x46=(x45*x7);
x47=((((-1.0)*x12*x38))+(((-1.0)*x15*x37)));
x48=(((x32*x36))+((x31*x39)));
x49=(x48*x8);
eerot[0]=(((x7*((x42+((x38*x5))))))+((x45*x8)));
eerot[1]=((((-1.0)*x14*x33))+((x11*(((((-1.0)*x16*x45))+(((-1.0)*x21*x47)))))));
eerot[2]=((((-1.0)*x14*x24))+((x9*((((x8*((((x32*x38))+((x31*x37))))))+x46)))));
IkReal x50=((1.0)*x23);
IkReal x51=((1.0)*x13);
eetrans[0]=(((x5*(((((-1.0)*x4*x51))+(((-1.0)*x20*x50))))))+((x6*(((((-1.0)*x0*x51))+((x20*x27))))))+(((0.123)*x1*x24))+(((-1.0)*x1*x19))+((x9*(((((-1.0)*x18*x47))+(((-1.0)*x17*x45))))))+(((-1.0)*x22*x50))+(((-0.33)*x26)));
eerot[3]=(((x7*((x40+((x39*x6))))))+((x44*x8)));
eerot[4]=(((x11*(((((-1.0)*x16*x44))+(((-1.0)*x21*x48))))))+((x3*x33)));
eerot[5]=(((x9*((x49+((x44*x7))))))+((x24*x3)));
IkReal x52=((1.0)*x20);
eetrans[1]=((-0.146)+((x19*x3))+((x5*(((((-1.0)*x4*x52))+((x13*x23))))))+(((0.33)*x23*x3))+(((-1.0)*x22*x4))+(((-0.123)*x24*x3))+(((-1.0)*x9*((((x18*(((((-1.0)*x12*x36))+(((-1.0)*x15*x39))))))+((x17*x44))))))+((x6*(((((-1.0)*x13*x27))+(((-1.0)*x0*x52)))))));
eerot[6]=(((x7*(((((-1.0)*x35))+((x25*x6))))))+((x43*x8)));
eerot[7]=(((x11*(((((-1.0)*x16*x43))+(((-1.0)*x21*x41))))))+((x2*x9)));
eerot[8]=(((x9*((((x41*x8))+((x43*x7))))))+x28);
eetrans[2]=((-0.092)+(((0.0175)*x2))+(((-0.33)*x30))+(((-0.123)*x28))+(((-0.3)*x30*x5))+((x9*(((((-1.0)*x18*x41))+(((-1.0)*x17*x43))))))+(((0.3)*x25*x6)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j16,cj16,sj16,htj16,j16mul,j17,cj17,sj17,htj17,j17mul,j18,cj18,sj18,htj18,j18mul,j19,cj19,sj19,htj19,j19mul,j20,cj20,sj20,htj20,j20mul,j21,cj21,sj21,htj21,j21mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij16[2], _nj16,_ij17[2], _nj17,_ij18[2], _nj18,_ij19[2], _nj19,_ij20[2], _nj20,_ij21[2], _nj21;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1; j18=numeric_limits<IkReal>::quiet_NaN(); _ij18[0] = -1; _ij18[1] = -1; _nj18 = -1; j19=numeric_limits<IkReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; j20=numeric_limits<IkReal>::quiet_NaN(); _ij20[0] = -1; _ij20[1] = -1; _nj20 = -1; j21=numeric_limits<IkReal>::quiet_NaN(); _ij21[0] = -1; _ij21[1] = -1; _nj21 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r01;
new_r02=((-1.0)*r00);
new_px=((((0.123)*r02))+px);
new_r10=r12;
new_r11=r11;
new_r12=((-1.0)*r10);
new_py=((0.146)+(((0.123)*r12))+py);
new_r20=r22;
new_r21=r21;
new_r22=((-1.0)*r20);
new_pz=((0.092)+pz+(((0.123)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x53=((1.0)*px);
IkReal x54=((1.0)*pz);
IkReal x55=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x55))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x54)));
rxp0_2=((((-1.0)*r10*x53))+((py*r00)));
rxp1_0=((((-1.0)*r21*x55))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x54)));
rxp1_2=((((-1.0)*r11*x53))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x55)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x54)));
rxp2_2=((((-1.0)*r12*x53))+((py*r02)));
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
cj19array[0]=((-1.00609217171717)+(((5.05050505050505)*pp)));
if( cj19array[0] >= -1-IKFAST_SINCOS_THRESH && cj19array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j19valid[0] = j19valid[1] = true;
    j19array[0] = IKacos(cj19array[0]);
    sj19array[0] = IKsin(j19array[0]);
    cj19array[1] = cj19array[0];
    j19array[1] = -j19array[0];
    sj19array[1] = -sj19array[0];
}
else if( isnan(cj19array[0]) )
{
    // probably any value will work
    j19valid[0] = true;
    cj19array[0] = 1; sj19array[0] = 0; j19array[0] = 0;
}
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IkReal j21eval[2];
j21eval[0]=((IKabs(npy))+(IKabs(npx)));
j21eval[1]=((npx*npx)+(npy*npy));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  )
{
{
IkReal j20eval[2];
j20eval[0]=((1.0)+(((1.21)*(sj19*sj19)))+(((1.21)*(cj19*cj19)))+(((2.2)*cj19)));
j20eval[1]=((IKabs(sj19))+(((3.03030303030303)*(IKabs(((-0.3)+(((-0.33)*cj19))))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j20, j21]

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
IkReal x56=((-0.3)+(((-0.33)*cj19)));
CheckValue<IkReal> x59 = IKatan2WithCheck(IkReal(((-0.33)*sj19)),IkReal(x56),IKFAST_ATAN2_MAGTHRESH);
if(!x59.valid){
continue;
}
IkReal x57=((1.0)*(x59.value));
if((((((0.1089)*(sj19*sj19)))+(x56*x56))) < -0.00001)
continue;
CheckValue<IkReal> x60=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.1089)*(sj19*sj19)))+(x56*x56)))),-1);
if(!x60.valid){
continue;
}
if( ((npz*(x60.value))) < -1-IKFAST_SINCOS_THRESH || ((npz*(x60.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x58=IKasin((npz*(x60.value)));
j20array[0]=(x58+(((-1.0)*x57)));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
j20array[1]=((3.14159265358979)+(((-1.0)*x57))+(((-1.0)*x58)));
sj20array[1]=IKsin(j20array[1]);
cj20array[1]=IKcos(j20array[1]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
if( j20array[1] > IKPI )
{
    j20array[1]-=IK2PI;
}
else if( j20array[1] < -IKPI )
{    j20array[1]+=IK2PI;
}
j20valid[1] = true;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IkReal j21eval[3];
IkReal x61=npy*npy;
IkReal x62=npx*npx;
IkReal x63=((132.0)*sj19);
IkReal x64=((7.0)*sj20);
IkReal x65=((400.0)*cj20*npz);
IkReal x66=(sj20*x61);
IkReal x67=(sj20*x62);
j21eval[0]=(x66+x67);
j21eval[1]=IKsign(((((400.0)*x66))+(((400.0)*x67))));
j21eval[2]=((IKabs((((npx*x63))+((npx*x65))+((npy*x64)))))+(IKabs((((npx*x64))+(((-1.0)*npy*x63))+(((-1.0)*npy*x65))))));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
{
IkReal j21eval[3];
IkReal x68=npy*npy;
IkReal x69=npx*npx;
IkReal x70=((7.0)*cj20);
IkReal x71=((400.0)*cj20);
IkReal x72=((132.0)*cj19);
IkReal x73=((400.0)*npz*sj20);
j21eval[0]=(((cj20*x69))+((cj20*x68)));
j21eval[1]=((IKabs(((((120.0)*npy))+((npx*x70))+((npy*x72))+((npy*x73)))))+(IKabs(((((-1.0)*npx*x72))+(((-1.0)*npx*x73))+(((-120.0)*npx))+((npy*x70))))));
j21eval[2]=IKsign((((x69*x71))+((x68*x71))));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
{
IkReal j21eval[3];
IkReal x74=npy*npy;
IkReal x75=npx*npx;
IkReal x76=(cj20*npy);
IkReal x77=((132.0)*cj19);
IkReal x78=(cj20*npx);
IkReal x79=((132.0)*sj19*sj20);
j21eval[0]=(x75+x74);
j21eval[1]=IKsign(((((400.0)*x75))+(((400.0)*x74))));
j21eval[2]=((IKabs(((((-1.0)*npy*x79))+((x76*x77))+(((120.0)*x76))+(((7.0)*npx)))))+(IKabs((((npx*x79))+(((-120.0)*x78))+(((7.0)*npy))+(((-1.0)*x77*x78))))));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j20)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j21eval[3];
sj20=1.0;
cj20=0;
j20=1.5707963267949;
IkReal x80=npy*npy;
IkReal x81=npx*npx;
IkReal x82=((132.0)*sj19);
j21eval[0]=(x80+x81);
j21eval[1]=((IKabs(((((-1.0)*npy*x82))+(((7.0)*npx)))))+(IKabs(((((7.0)*npy))+((npx*x82))))));
j21eval[2]=IKsign(((((400.0)*x80))+(((400.0)*x81))));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j21]

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x83=((132.0)*sj19);
CheckValue<IkReal> x84 = IKatan2WithCheck(IkReal(((((-1.0)*npy*x83))+(((7.0)*npx)))),IkReal(((((7.0)*npy))+((npx*x83)))),IKFAST_ATAN2_MAGTHRESH);
if(!x84.valid){
continue;
}
CheckValue<IkReal> x85=IKPowWithIntegerCheck(IKsign(((((400.0)*(npy*npy)))+(((400.0)*(npx*npx))))),-1);
if(!x85.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(x84.value)+(((1.5707963267949)*(x85.value))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[2];
IkReal x86=IKsin(j21);
IkReal x87=IKcos(j21);
IkReal x88=((1.0)*x87);
evalcond[0]=((0.0175)+(((-1.0)*npx*x86))+(((-1.0)*npy*x88)));
evalcond[1]=(((npy*x86))+(((-1.0)*npx*x88))+(((0.33)*sj19)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j20)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j21eval[3];
sj20=-1.0;
cj20=0;
j20=-1.5707963267949;
IkReal x921=npy*npy;
IkReal x922=npx*npx;
IkReal x923=((132.0)*sj19);
j21eval[0]=(x922+x921);
j21eval[1]=((IKabs(((((-1.0)*npx*x923))+(((7.0)*npy)))))+(IKabs((((npy*x923))+(((7.0)*npx))))));
j21eval[2]=IKsign(((((400.0)*x922))+(((400.0)*x921))));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j21]

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x924=((132.0)*sj19);
CheckValue<IkReal> x925 = IKatan2WithCheck(IkReal((((npy*x924))+(((7.0)*npx)))),IkReal(((((-1.0)*npx*x924))+(((7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x925.valid){
continue;
}
CheckValue<IkReal> x926=IKPowWithIntegerCheck(IKsign(((((400.0)*(npy*npy)))+(((400.0)*(npx*npx))))),-1);
if(!x926.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(x925.value)+(((1.5707963267949)*(x926.value))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[2];
IkReal x927=IKcos(j21);
IkReal x928=IKsin(j21);
IkReal x929=((1.0)*npy);
evalcond[0]=((0.0175)+(((-1.0)*x927*x929))+(((-1.0)*npx*x928)));
evalcond[1]=((((-1.0)*x928*x929))+((npx*x927))+(((0.33)*sj19)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j20))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j21eval[3];
sj20=0;
cj20=1.0;
j20=0;
IkReal x930=npy*npy;
IkReal x931=npx*npx;
IkReal x932=((132.0)*cj19);
j21eval[0]=(x931+x930);
j21eval[1]=((IKabs(((((120.0)*npy))+((npy*x932))+(((7.0)*npx)))))+(IKabs(((((-1.0)*npx*x932))+(((-120.0)*npx))+(((7.0)*npy))))));
j21eval[2]=IKsign(((((400.0)*x930))+(((400.0)*x931))));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j21]

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x933=((132.0)*cj19);
CheckValue<IkReal> x934 = IKatan2WithCheck(IkReal(((((120.0)*npy))+((npy*x933))+(((7.0)*npx)))),IkReal(((((-1.0)*npx*x933))+(((-120.0)*npx))+(((7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x934.valid){
continue;
}
CheckValue<IkReal> x935=IKPowWithIntegerCheck(IKsign(((((400.0)*(npy*npy)))+(((400.0)*(npx*npx))))),-1);
if(!x935.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(x934.value)+(((1.5707963267949)*(x935.value))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[2];
IkReal x936=IKcos(j21);
IkReal x937=IKsin(j21);
IkReal x938=((1.0)*npy);
evalcond[0]=((0.0175)+(((-1.0)*x936*x938))+(((-1.0)*npx*x937)));
evalcond[1]=((0.3)+(((0.33)*cj19))+((npx*x936))+(((-1.0)*x937*x938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j20)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j21eval[3];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
IkReal x939=npy*npy;
IkReal x940=npx*npx;
IkReal x941=((132.0)*cj19);
j21eval[0]=(x939+x940);
j21eval[1]=((IKabs(((((120.0)*npx))+((npx*x941))+(((7.0)*npy)))))+(IKabs(((((-1.0)*npy*x941))+(((-120.0)*npy))+(((7.0)*npx))))));
j21eval[2]=IKsign(((((400.0)*x939))+(((400.0)*x940))));
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j21]

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x942=((132.0)*cj19);
CheckValue<IkReal> x943 = IKatan2WithCheck(IkReal(((((-1.0)*npy*x942))+(((-120.0)*npy))+(((7.0)*npx)))),IkReal(((((120.0)*npx))+((npx*x942))+(((7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x943.valid){
continue;
}
CheckValue<IkReal> x944=IKPowWithIntegerCheck(IKsign(((((400.0)*(npy*npy)))+(((400.0)*(npx*npx))))),-1);
if(!x944.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(x943.value)+(((1.5707963267949)*(x944.value))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[2];
IkReal x945=IKsin(j21);
IkReal x946=IKcos(j21);
IkReal x947=((1.0)*x946);
evalcond[0]=((0.0175)+(((-1.0)*npy*x947))+(((-1.0)*npx*x945)));
evalcond[1]=((0.3)+(((0.33)*cj19))+(((-1.0)*npx*x947))+((npy*x945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j21]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x948=((120.0)*cj20);
IkReal x949=((132.0)*npx);
IkReal x950=(cj19*cj20);
IkReal x951=(sj19*sj20);
IkReal x952=((132.0)*npy);
CheckValue<IkReal> x953 = IKatan2WithCheck(IkReal(((((-1.0)*x951*x952))+(((7.0)*npx))+((npy*x948))+((x950*x952)))),IkReal(((((-1.0)*npx*x948))+((x949*x951))+(((-1.0)*x949*x950))+(((7.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x953.valid){
continue;
}
CheckValue<IkReal> x954=IKPowWithIntegerCheck(IKsign(((((400.0)*(npy*npy)))+(((400.0)*(npx*npx))))),-1);
if(!x954.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(x953.value)+(((1.5707963267949)*(x954.value))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x955=IKsin(j21);
IkReal x956=IKcos(j21);
IkReal x957=((1.0)*npy);
IkReal x958=((0.33)*sj19);
IkReal x959=((0.33)*cj19);
IkReal x960=(npy*x955);
IkReal x961=((1.0)*npx*x956);
evalcond[0]=((0.0175)+(((-1.0)*npx*x955))+(((-1.0)*x956*x957)));
evalcond[1]=((((-1.0)*sj20*x961))+((sj20*x960))+((cj20*npz))+x958);
evalcond[2]=((0.3)+((cj20*npx*x956))+(((-1.0)*cj20*x955*x957))+((npz*sj20))+x959);
evalcond[3]=(((sj20*x958))+(((-0.3)*cj20))+(((-1.0)*cj20*x959))+x960+(((-1.0)*x961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x962=((7.0)*cj20);
IkReal x963=((400.0)*cj20);
IkReal x964=((132.0)*cj19);
IkReal x965=((400.0)*npz*sj20);
CheckValue<IkReal> x966=IKPowWithIntegerCheck(IKsign((((x963*(npx*npx)))+((x963*(npy*npy))))),-1);
if(!x966.valid){
continue;
}
CheckValue<IkReal> x967 = IKatan2WithCheck(IkReal(((((120.0)*npy))+((npy*x964))+((npy*x965))+((npx*x962)))),IkReal((((npy*x962))+(((-120.0)*npx))+(((-1.0)*npx*x964))+(((-1.0)*npx*x965)))),IKFAST_ATAN2_MAGTHRESH);
if(!x967.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(((1.5707963267949)*(x966.value)))+(x967.value));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x968=IKsin(j21);
IkReal x969=IKcos(j21);
IkReal x970=((1.0)*npy);
IkReal x971=((0.33)*sj19);
IkReal x972=((0.33)*cj19);
IkReal x973=(npy*x968);
IkReal x974=((1.0)*npx*x969);
evalcond[0]=((0.0175)+(((-1.0)*x969*x970))+(((-1.0)*npx*x968)));
evalcond[1]=((((-1.0)*sj20*x974))+((sj20*x973))+((cj20*npz))+x971);
evalcond[2]=((0.3)+((cj20*npx*x969))+((npz*sj20))+x972+(((-1.0)*cj20*x968*x970)));
evalcond[3]=(((sj20*x971))+(((-0.3)*cj20))+x973+(((-1.0)*cj20*x972))+(((-1.0)*x974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x975=((400.0)*sj20);
IkReal x976=((132.0)*sj19);
IkReal x977=((7.0)*sj20);
IkReal x978=((400.0)*cj20*npz);
CheckValue<IkReal> x979 = IKatan2WithCheck(IkReal(((((-1.0)*npy*x978))+(((-1.0)*npy*x976))+((npx*x977)))),IkReal((((npy*x977))+((npx*x978))+((npx*x976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x979.valid){
continue;
}
CheckValue<IkReal> x980=IKPowWithIntegerCheck(IKsign((((x975*(npx*npx)))+((x975*(npy*npy))))),-1);
if(!x980.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(x979.value)+(((1.5707963267949)*(x980.value))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x981=IKsin(j21);
IkReal x982=IKcos(j21);
IkReal x983=((1.0)*npy);
IkReal x984=((0.33)*sj19);
IkReal x985=((0.33)*cj19);
IkReal x986=(npy*x981);
IkReal x987=((1.0)*npx*x982);
evalcond[0]=((0.0175)+(((-1.0)*x982*x983))+(((-1.0)*npx*x981)));
evalcond[1]=((((-1.0)*sj20*x987))+((sj20*x986))+((cj20*npz))+x984);
evalcond[2]=((0.3)+((cj20*npx*x982))+((npz*sj20))+x985+(((-1.0)*cj20*x981*x983)));
evalcond[3]=((((-1.0)*x987))+((sj20*x984))+(((-0.3)*cj20))+x986+(((-1.0)*cj20*x985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j21array[2], cj21array[2], sj21array[2];
bool j21valid[2]={false};
_nj21 = 2;
CheckValue<IkReal> x990 = IKatan2WithCheck(IkReal(((-1.0)*npy)),IkReal(((-1.0)*npx)),IKFAST_ATAN2_MAGTHRESH);
if(!x990.valid){
continue;
}
IkReal x988=((1.0)*(x990.value));
if((((npx*npx)+(npy*npy))) < -0.00001)
continue;
CheckValue<IkReal> x991=IKPowWithIntegerCheck(IKabs(IKsqrt(((npx*npx)+(npy*npy)))),-1);
if(!x991.valid){
continue;
}
if( (((0.0175)*(x991.value))) < -1-IKFAST_SINCOS_THRESH || (((0.0175)*(x991.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x989=IKasin(((0.0175)*(x991.value)));
j21array[0]=((((-1.0)*x988))+(((-1.0)*x989)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
j21array[1]=((3.14159265358979)+(((-1.0)*x988))+x989);
sj21array[1]=IKsin(j21array[1]);
cj21array[1]=IKcos(j21array[1]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
if( j21array[1] > IKPI )
{
    j21array[1]-=IK2PI;
}
else if( j21array[1] < -IKPI )
{    j21array[1]+=IK2PI;
}
j21valid[1] = true;
for(int ij21 = 0; ij21 < 2; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 2; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
IkReal j20eval[3];
IkReal x992=((3300.0)*cj19);
IkReal x993=(cj21*npx);
IkReal x994=((3300.0)*sj19);
IkReal x995=(npy*sj21);
j20eval[0]=((1.00454545454545)+cj19);
j20eval[1]=((IKabs((((x992*x995))+(((-1.0)*x992*x993))+(((-3000.0)*x993))+(((3000.0)*x995))+(((-1.0)*npz*x994)))))+(IKabs((((x993*x994))+(((-1.0)*x994*x995))+(((-3000.0)*npz))+(((-1.0)*npz*x992))))));
j20eval[2]=IKsign(((1989.0)+(((1980.0)*cj19))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
IkReal x996=(npy*sj21);
IkReal x997=((100.0)*npz);
IkReal x998=(npz*sj19);
IkReal x999=(cj21*npx);
IkReal x1000=(cj19*x999);
j20eval[0]=((((1.1)*x998))+(((-1.0)*x999))+(((-1.1)*x1000))+(((1.1)*cj19*x996))+x996);
j20eval[1]=((IKabs(((((-10.89)*cj19*sj19))+(((-9.9)*sj19))+((x997*x999))+(((-1.0)*x996*x997)))))+(IKabs(((9.0)+(((19.8)*cj19))+(((10.89)*(cj19*cj19)))+(((-1.0)*npz*x997))))));
j20eval[2]=IKsign(((((30.0)*x996))+(((33.0)*cj19*x996))+(((-33.0)*x1000))+(((33.0)*x998))+(((-30.0)*x999))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
IkReal x1001=cj21*cj21;
IkReal x1002=npy*npy;
IkReal x1003=npz*npz;
IkReal x1004=npx*npx;
IkReal x1005=((33.0)*sj19);
IkReal x1006=(npy*sj21);
IkReal x1007=(cj21*npx);
IkReal x1008=((33.0)*cj19);
IkReal x1009=((100.0)*x1002);
IkReal x1010=(x1001*x1004);
j20eval[0]=((((2.0)*x1006*x1007))+(((-1.0)*x1003))+(((-1.0)*x1002))+((x1001*x1002))+(((-1.0)*x1010)));
j20eval[1]=((IKabs(((((30.0)*npz))+((npz*x1008))+(((-1.0)*x1005*x1007))+((x1005*x1006)))))+(IKabs(((((-30.0)*x1006))+(((-1.0)*x1006*x1008))+((npz*x1005))+(((30.0)*x1007))+((x1007*x1008))))));
j20eval[2]=IKsign(((((-1.0)*x1009))+(((-100.0)*x1003))+(((-100.0)*x1010))+(((200.0)*x1006*x1007))+((x1001*x1009))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j20]

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1011=npy*npy;
IkReal x1012=cj21*cj21;
IkReal x1013=((33.0)*sj19);
IkReal x1014=(npy*sj21);
IkReal x1015=(cj21*npx);
IkReal x1016=((33.0)*cj19);
IkReal x1017=((100.0)*x1012);
CheckValue<IkReal> x1018 = IKatan2WithCheck(IkReal(((((30.0)*npz))+((x1013*x1014))+((npz*x1016))+(((-1.0)*x1013*x1015)))),IkReal(((((-1.0)*x1014*x1016))+(((-30.0)*x1014))+(((30.0)*x1015))+((x1015*x1016))+((npz*x1013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1018.valid){
continue;
}
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(IKsign(((((200.0)*x1014*x1015))+(((-100.0)*x1011))+(((-100.0)*(npz*npz)))+((x1011*x1017))+(((-1.0)*x1017*(npx*npx))))),-1);
if(!x1019.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x1018.value)+(((1.5707963267949)*(x1019.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[4];
IkReal x1020=IKsin(j20);
IkReal x1021=IKcos(j20);
IkReal x1022=((0.33)*sj19);
IkReal x1023=(npy*sj21);
IkReal x1024=(cj21*npx);
IkReal x1025=((0.33)*cj19);
evalcond[0]=((((-1.0)*x1021*x1022))+(((-1.0)*npz))+(((-1.0)*x1020*x1025))+(((-0.3)*x1020)));
evalcond[1]=(x1022+((npz*x1021))+((x1020*x1023))+(((-1.0)*x1020*x1024)));
evalcond[2]=((0.3)+x1025+((npz*x1020))+(((-1.0)*x1021*x1023))+((x1021*x1024)));
evalcond[3]=(x1023+(((-1.0)*x1024))+(((-1.0)*x1021*x1025))+(((-0.3)*x1021))+((x1020*x1022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1026=((100.0)*npz);
IkReal x1027=(npy*sj21);
IkReal x1028=(cj21*npx);
IkReal x1029=((33.0)*cj19);
CheckValue<IkReal> x1030=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1028*x1029))+(((-30.0)*x1028))+(((30.0)*x1027))+((x1027*x1029))+(((33.0)*npz*sj19)))),-1);
if(!x1030.valid){
continue;
}
CheckValue<IkReal> x1031 = IKatan2WithCheck(IkReal(((((-10.89)*cj19*sj19))+(((-9.9)*sj19))+(((-1.0)*x1026*x1027))+((x1026*x1028)))),IkReal(((9.0)+(((19.8)*cj19))+(((10.89)*(cj19*cj19)))+(((-1.0)*npz*x1026)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1031.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1030.value)))+(x1031.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[4];
IkReal x1032=IKsin(j20);
IkReal x1033=IKcos(j20);
IkReal x1034=((0.33)*sj19);
IkReal x1035=(npy*sj21);
IkReal x1036=(cj21*npx);
IkReal x1037=((0.33)*cj19);
evalcond[0]=((((-1.0)*x1033*x1034))+(((-1.0)*x1032*x1037))+(((-1.0)*npz))+(((-0.3)*x1032)));
evalcond[1]=(x1034+(((-1.0)*x1032*x1036))+((npz*x1033))+((x1032*x1035)));
evalcond[2]=((0.3)+x1037+(((-1.0)*x1033*x1035))+((npz*x1032))+((x1033*x1036)));
evalcond[3]=((((-1.0)*x1033*x1037))+x1035+(((-1.0)*x1036))+(((-0.3)*x1033))+((x1032*x1034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1038=((3300.0)*cj19);
IkReal x1039=(cj21*npx);
IkReal x1040=((3300.0)*sj19);
IkReal x1041=(npy*sj21);
CheckValue<IkReal> x1042 = IKatan2WithCheck(IkReal((((x1039*x1040))+(((-3000.0)*npz))+(((-1.0)*npz*x1038))+(((-1.0)*x1040*x1041)))),IkReal((((x1038*x1041))+(((-1.0)*npz*x1040))+(((-1.0)*x1038*x1039))+(((-3000.0)*x1039))+(((3000.0)*x1041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1042.valid){
continue;
}
CheckValue<IkReal> x1043=IKPowWithIntegerCheck(IKsign(((1989.0)+(((1980.0)*cj19)))),-1);
if(!x1043.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x1042.value)+(((1.5707963267949)*(x1043.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[4];
IkReal x1044=IKsin(j20);
IkReal x1045=IKcos(j20);
IkReal x1046=((0.33)*sj19);
IkReal x1047=(npy*sj21);
IkReal x1048=(cj21*npx);
IkReal x1049=((0.33)*cj19);
evalcond[0]=((((-0.3)*x1044))+(((-1.0)*x1044*x1049))+(((-1.0)*x1045*x1046))+(((-1.0)*npz)));
evalcond[1]=(x1046+(((-1.0)*x1044*x1048))+((x1044*x1047))+((npz*x1045)));
evalcond[2]=((0.3)+x1049+(((-1.0)*x1045*x1047))+((x1045*x1048))+((npz*x1044)));
evalcond[3]=((((-0.3)*x1045))+x1047+(((-1.0)*x1045*x1049))+(((-1.0)*x1048))+((x1044*x1046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x89=((1.0)*cj21);
IkReal x90=((1.0)*sj19);
IkReal x91=((1.0)*sj20);
IkReal x92=((-1.0)*sj20);
IkReal x93=((-1.0)*cj20);
IkReal x94=(((r01*sj21))+(((-1.0)*r00*x89)));
IkReal x95=((((-1.0)*r10*x89))+((r11*sj21)));
IkReal x96=((((-1.0)*r20*x89))+((r21*sj21)));
IkReal x97=(((cj20*x94))+(((-1.0)*r02*x91)));
IkReal x98=((((-1.0)*r12*x91))+((cj20*x95)));
IkReal x99=((((-1.0)*r22*x91))+((cj20*x96)));
IkReal x100=(((x92*x94))+((r02*x93)));
IkReal x101=(((r12*x93))+((x92*x95)));
IkReal x102=(((x92*x96))+((r22*x93)));
new_r00=((((-1.0)*x90*x97))+((cj19*x100)));
new_r01=(((cj19*x97))+((sj19*x100)));
new_r02=(((r00*sj21))+((cj21*r01)));
new_r10=((((-1.0)*x90*x98))+((cj19*x101)));
new_r11=(((cj19*x98))+((sj19*x101)));
new_r12=(((r10*sj21))+((cj21*r11)));
new_r20=((((-1.0)*x90*x99))+((cj19*x102)));
new_r21=(((cj19*x99))+((sj19*x102)));
new_r22=(((r20*sj21))+((cj21*r21)));
{
IkReal j17array[2], cj17array[2], sj17array[2];
bool j17valid[2]={false};
_nj17 = 2;
sj17array[0]=new_r22;
if( sj17array[0] >= -1-IKFAST_SINCOS_THRESH && sj17array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j17valid[0] = j17valid[1] = true;
    j17array[0] = IKasin(sj17array[0]);
    cj17array[0] = IKcos(j17array[0]);
    sj17array[1] = sj17array[0];
    j17array[1] = j17array[0] > 0 ? (IKPI-j17array[0]) : (-IKPI-j17array[0]);
    cj17array[1] = -cj17array[0];
}
else if( isnan(sj17array[0]) )
{
    // probably any value will work
    j17valid[0] = true;
    cj17array[0] = 1; sj17array[0] = 0; j17array[0] = 0;
}
for(int ij17 = 0; ij17 < 2; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 2; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];

{
IkReal j16eval[3];
j16eval[0]=cj17;
j16eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j16eval[2]=IKsign(cj17);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[3];
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
j16eval[0]=cj17;
j16eval[1]=new_r12;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j18mul = 1;
j18=0;
j16mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].fmul = j16mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].fmul = j18mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j18mul = 1;
j18=0;
j16mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].fmul = j16mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].fmul = j18mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x103=new_r22*new_r22;
IkReal x104=((16.0)*new_r10);
IkReal x105=((16.0)*new_r01);
IkReal x106=((16.0)*new_r00);
IkReal x107=(new_r11*new_r22);
IkReal x108=((8.0)*new_r00);
IkReal x109=(x103*x104);
IkReal x110=(x103*x105);
j16eval[0]=((IKabs((((x103*x108))+(((-8.0)*x107)))))+(IKabs(((((-32.0)*new_r11*x103))+((new_r22*x106))+(((16.0)*new_r11)))))+(IKabs(((((-1.0)*x105))+x110)))+(IKabs(((((-1.0)*x109))+x104)))+(IKabs(((((-1.0)*x104))+x109)))+(IKabs(((((32.0)*new_r00))+(((-16.0)*x107))+(((-1.0)*x103*x106)))))+(IKabs(((((-1.0)*x110))+x105)))+(IKabs((((new_r22*x108))+(((-8.0)*new_r11))))));
if( IKabs(j16eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j16, j18]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j16evalpoly[1];
IkReal x111=new_r22*new_r22;
IkReal x112=((16.0)*new_r01);
IkReal x113=(new_r00*new_r22);
IkReal x114=(x111*x112);
IkReal x115=((((8.0)*x113))+(((-8.0)*new_r11)));
op[0]=x115;
op[1]=((((-1.0)*x112))+x114);
op[2]=((((16.0)*x113))+(((16.0)*new_r11))+(((-32.0)*new_r11*x111)));
op[3]=((((-1.0)*x114))+x112);
op[4]=x115;
polyroots4(op,zeror,numroots);
IkReal j16array[4], cj16array[4], sj16array[4], tempj16array[1];
int numsolutions = 0;
for(int ij16 = 0; ij16 < numroots; ++ij16)
{
IkReal htj16 = zeror[ij16];
tempj16array[0]=((2.0)*(atan(htj16)));
for(int kj16 = 0; kj16 < 1; ++kj16)
{
j16array[numsolutions] = tempj16array[kj16];
if( j16array[numsolutions] > IKPI )
{
    j16array[numsolutions]-=IK2PI;
}
else if( j16array[numsolutions] < -IKPI )
{
    j16array[numsolutions]+=IK2PI;
}
sj16array[numsolutions] = IKsin(j16array[numsolutions]);
cj16array[numsolutions] = IKcos(j16array[numsolutions]);
numsolutions++;
}
}
bool j16valid[4]={true,true,true,true};
_nj16 = 4;
for(int ij16 = 0; ij16 < numsolutions; ++ij16)
    {
if( !j16valid[ij16] )
{
    continue;
}
    j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
htj16 = IKtan(j16/2);

IkReal x116=new_r22*new_r22;
IkReal x117=((16.0)*new_r10);
IkReal x118=(new_r11*new_r22);
IkReal x119=((8.0)*x118);
IkReal x120=(new_r00*x116);
IkReal x121=(x116*x117);
IkReal x122=((8.0)*x120);
j16evalpoly[0]=((((-1.0)*x119))+x122+(((htj16*htj16*htj16)*(((((-1.0)*x121))+x117))))+(((htj16*htj16)*(((((32.0)*new_r00))+(((-16.0)*x120))+(((-16.0)*x118))))))+(((htj16*htj16*htj16*htj16)*(((((-1.0)*x119))+x122))))+((htj16*(((((-1.0)*x117))+x121)))));
if( IKabs(j16evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < numsolutions; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
{
IkReal j18eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x123=new_r22*new_r22;
IkReal x124=cj16*cj16;
IkReal x125=(new_r22*sj16);
IkReal x126=(((x123*x124))+(((-1.0)*x124))+(((-1.0)*x123)));
j18eval[0]=x126;
j18eval[1]=((IKabs((((new_r00*x125))+((cj16*new_r01)))))+(IKabs((((new_r01*x125))+(((-1.0)*cj16*new_r00))))));
j18eval[2]=IKsign(x126);
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j18eval[0]=new_r22;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j18eval[0]=cj16;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x127=IKsin(j18);
IkReal x128=IKcos(j18);
evalcond[0]=(x127+new_r11);
evalcond[1]=((-1.0)*x127);
evalcond[2]=((-1.0)*x128);
evalcond[3]=((((-1.0)*x128))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x129=IKsin(j18);
IkReal x130=IKcos(j18);
evalcond[0]=((-1.0)*x129);
evalcond[1]=((-1.0)*x130);
evalcond[2]=(x129+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x131=new_r22*new_r22;
CheckValue<IkReal> x132=IKPowWithIntegerCheck(((-1.0)+x131),-1);
if(!x132.valid){
continue;
}
if(((x131*(x132.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x131*(x132.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj16)))))+(IKabs(((((-1.0)*gconst6))+cj16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
IkReal x133=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
sj16=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
cj16=gconst6;
if( (gconst6) < -1-IKFAST_SINCOS_THRESH || (gconst6) > 1+IKFAST_SINCOS_THRESH )
    continue;
j16=IKacos(gconst6);
CheckValue<IkReal> x134=IKPowWithIntegerCheck(((-1.0)+x133),-1);
if(!x134.valid){
continue;
}
if(((x133*(x134.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x133*(x134.value)));
j18eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
CheckValue<IkReal> x135=IKPowWithIntegerCheck(gconst6,-1);
if(!x135.valid){
continue;
}
if( IKabs(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x135.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))))+IKsqr((new_r00*(x135.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))), (new_r00*(x135.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x136=IKsin(j18);
IkReal x137=IKcos(j18);
IkReal x138=((1.0)*x137);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x139=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
evalcond[0]=((-1.0)*x136);
evalcond[1]=((-1.0)*x137);
evalcond[2]=(((gconst6*x136))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x138))+new_r00);
evalcond[4]=(((x136*x139))+new_r11);
evalcond[5]=((((-1.0)*x138*x139))+new_r10);
evalcond[6]=(((gconst6*new_r01))+x136+((new_r11*x139)));
evalcond[7]=(((gconst6*new_r00))+(((-1.0)*x138))+((new_r10*x139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x140 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x140.valid){
continue;
}
CheckValue<IkReal> x141=IKPowWithIntegerCheck(IKsign(gconst6),-1);
if(!x141.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x140.value)+(((1.5707963267949)*(x141.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x142=IKsin(j18);
IkReal x143=IKcos(j18);
IkReal x144=((1.0)*x143);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x145=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
evalcond[0]=((-1.0)*x142);
evalcond[1]=((-1.0)*x143);
evalcond[2]=(((gconst6*x142))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x144))+new_r00);
evalcond[4]=(((x142*x145))+new_r11);
evalcond[5]=((((-1.0)*x144*x145))+new_r10);
evalcond[6]=(((gconst6*new_r01))+((new_r11*x145))+x142);
evalcond[7]=((((-1.0)*x144))+((gconst6*new_r00))+((new_r10*x145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x146=new_r22*new_r22;
CheckValue<IkReal> x147=IKPowWithIntegerCheck(((-1.0)+x146),-1);
if(!x147.valid){
continue;
}
if(((x146*(x147.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x146*(x147.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj16)))))+(IKabs(((((-1.0)*gconst6))+cj16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
IkReal x148=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
sj16=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))));
cj16=gconst6;
if( (gconst6) < -1-IKFAST_SINCOS_THRESH || (gconst6) > 1+IKFAST_SINCOS_THRESH )
    continue;
j16=((-1.0)*(IKacos(gconst6)));
CheckValue<IkReal> x149=IKPowWithIntegerCheck(((-1.0)+x148),-1);
if(!x149.valid){
continue;
}
if(((x148*(x149.value))) < -0.00001)
continue;
IkReal gconst6=IKsqrt((x148*(x149.value)));
j18eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
CheckValue<IkReal> x150=IKPowWithIntegerCheck(gconst6,-1);
if(!x150.valid){
continue;
}
if( IKabs(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x150.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))))+IKsqr((new_r00*(x150.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))), (new_r00*(x150.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x151=IKsin(j18);
IkReal x152=IKcos(j18);
IkReal x153=((1.0)*x152);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x154=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
IkReal x155=((1.0)*x154);
evalcond[0]=((-1.0)*x151);
evalcond[1]=((-1.0)*x152);
evalcond[2]=(((gconst6*x151))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x153))+new_r00);
evalcond[4]=(((x152*x154))+new_r10);
evalcond[5]=((((-1.0)*x151*x155))+new_r11);
evalcond[6]=(((gconst6*new_r01))+x151+(((-1.0)*new_r11*x155)));
evalcond[7]=((((-1.0)*x153))+((gconst6*new_r00))+(((-1.0)*new_r10*x155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x156 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x156.valid){
continue;
}
CheckValue<IkReal> x157=IKPowWithIntegerCheck(IKsign(gconst6),-1);
if(!x157.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x156.value)+(((1.5707963267949)*(x157.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x158=IKsin(j18);
IkReal x159=IKcos(j18);
IkReal x160=((1.0)*x159);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
IkReal x161=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
IkReal x162=((1.0)*x161);
evalcond[0]=((-1.0)*x158);
evalcond[1]=((-1.0)*x159);
evalcond[2]=(((gconst6*x158))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x160))+new_r00);
evalcond[4]=(new_r10+((x159*x161)));
evalcond[5]=((((-1.0)*x158*x162))+new_r11);
evalcond[6]=(((gconst6*new_r01))+(((-1.0)*new_r11*x162))+x158);
evalcond[7]=((((-1.0)*x160))+((gconst6*new_r00))+(((-1.0)*new_r10*x162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x163=new_r22*new_r22;
CheckValue<IkReal> x164=IKPowWithIntegerCheck(((-1.0)+x163),-1);
if(!x164.valid){
continue;
}
if(((x163*(x164.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x163*(x164.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj16)))))+(IKabs(((((-1.0)*gconst7))+cj16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
IkReal x165=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
sj16=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
cj16=gconst7;
if( (gconst7) < -1-IKFAST_SINCOS_THRESH || (gconst7) > 1+IKFAST_SINCOS_THRESH )
    continue;
j16=IKacos(gconst7);
CheckValue<IkReal> x166=IKPowWithIntegerCheck(((-1.0)+x165),-1);
if(!x166.valid){
continue;
}
if(((x165*(x166.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x165*(x166.value)))));
j18eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
CheckValue<IkReal> x167=IKPowWithIntegerCheck(gconst7,-1);
if(!x167.valid){
continue;
}
if( IKabs(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x167.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))))+IKsqr((new_r00*(x167.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))), (new_r00*(x167.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x168=IKsin(j18);
IkReal x169=IKcos(j18);
IkReal x170=((1.0)*x169);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x171=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
evalcond[0]=((-1.0)*x168);
evalcond[1]=((-1.0)*x169);
evalcond[2]=(((gconst7*x168))+new_r01);
evalcond[3]=((((-1.0)*gconst7*x170))+new_r00);
evalcond[4]=(((x168*x171))+new_r11);
evalcond[5]=((((-1.0)*x170*x171))+new_r10);
evalcond[6]=(((new_r11*x171))+x168+((gconst7*new_r01)));
evalcond[7]=(((new_r10*x171))+(((-1.0)*x170))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x172 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x172.valid){
continue;
}
CheckValue<IkReal> x173=IKPowWithIntegerCheck(IKsign(gconst7),-1);
if(!x173.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x172.value)+(((1.5707963267949)*(x173.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x174=IKsin(j18);
IkReal x175=IKcos(j18);
IkReal x176=((1.0)*x175);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x177=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
evalcond[0]=((-1.0)*x174);
evalcond[1]=((-1.0)*x175);
evalcond[2]=(((gconst7*x174))+new_r01);
evalcond[3]=((((-1.0)*gconst7*x176))+new_r00);
evalcond[4]=(((x174*x177))+new_r11);
evalcond[5]=((((-1.0)*x176*x177))+new_r10);
evalcond[6]=(((new_r11*x177))+x174+((gconst7*new_r01)));
evalcond[7]=(((new_r10*x177))+(((-1.0)*x176))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x178=new_r22*new_r22;
CheckValue<IkReal> x179=IKPowWithIntegerCheck(((-1.0)+x178),-1);
if(!x179.valid){
continue;
}
if(((x178*(x179.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x178*(x179.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst7))+cj16)))+(IKabs(((1.0)+(IKsign(sj16)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
IkReal x180=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
sj16=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))))));
cj16=gconst7;
if( (gconst7) < -1-IKFAST_SINCOS_THRESH || (gconst7) > 1+IKFAST_SINCOS_THRESH )
    continue;
j16=((-1.0)*(IKacos(gconst7)));
CheckValue<IkReal> x181=IKPowWithIntegerCheck(((-1.0)+x180),-1);
if(!x181.valid){
continue;
}
if(((x180*(x181.value))) < -0.00001)
continue;
IkReal gconst7=((-1.0)*(IKsqrt((x180*(x181.value)))));
j18eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
CheckValue<IkReal> x182=IKPowWithIntegerCheck(gconst7,-1);
if(!x182.valid){
continue;
}
if( IKabs((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x182.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01))))+IKsqr((new_r00*(x182.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01))), (new_r00*(x182.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x183=IKsin(j18);
IkReal x184=IKcos(j18);
IkReal x185=((1.0)*x184);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x186=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
IkReal x187=((1.0)*x186);
evalcond[0]=((-1.0)*x183);
evalcond[1]=((-1.0)*x184);
evalcond[2]=(new_r01+((gconst7*x183)));
evalcond[3]=(new_r00+(((-1.0)*gconst7*x185)));
evalcond[4]=(((x184*x186))+new_r10);
evalcond[5]=(new_r11+(((-1.0)*x183*x187)));
evalcond[6]=(x183+(((-1.0)*new_r11*x187))+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x185))+(((-1.0)*new_r10*x187))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x188 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x188.valid){
continue;
}
CheckValue<IkReal> x189=IKPowWithIntegerCheck(IKsign(gconst7),-1);
if(!x189.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x188.value)+(((1.5707963267949)*(x189.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x190=IKsin(j18);
IkReal x191=IKcos(j18);
IkReal x192=((1.0)*x191);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
IkReal x193=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
IkReal x194=((1.0)*x193);
evalcond[0]=((-1.0)*x190);
evalcond[1]=((-1.0)*x191);
evalcond[2]=(new_r01+((gconst7*x190)));
evalcond[3]=(new_r00+(((-1.0)*gconst7*x192)));
evalcond[4]=(((x191*x193))+new_r10);
evalcond[5]=((((-1.0)*x190*x194))+new_r11);
evalcond[6]=(x190+(((-1.0)*new_r11*x194))+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x192))+(((-1.0)*new_r10*x194))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x195=((1.0)*new_r22);
IkReal x196=(cj16*new_r01);
CheckValue<IkReal> x197=IKPowWithIntegerCheck(cj16,-1);
if(!x197.valid){
continue;
}
if( IKabs(((((-1.0)*x196))+(((-1.0)*new_r11*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x197.value)*((((new_r11*new_r22*(cj16*cj16)))+(((-1.0)*sj16*x195*x196))+(((-1.0)*new_r11*x195))+new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x196))+(((-1.0)*new_r11*sj16))))+IKsqr(((x197.value)*((((new_r11*new_r22*(cj16*cj16)))+(((-1.0)*sj16*x195*x196))+(((-1.0)*new_r11*x195))+new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*x196))+(((-1.0)*new_r11*sj16))), ((x197.value)*((((new_r11*new_r22*(cj16*cj16)))+(((-1.0)*sj16*x195*x196))+(((-1.0)*new_r11*x195))+new_r00))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[10];
IkReal x198=IKsin(j18);
IkReal x199=IKcos(j18);
IkReal x200=((1.0)*sj16);
IkReal x201=(cj16*new_r10);
IkReal x202=(cj16*new_r11);
IkReal x203=((1.0)*x199);
IkReal x204=(new_r22*x199);
IkReal x205=(sj16*x198);
IkReal x206=(cj16*x198);
IkReal x207=((1.0)*x198);
evalcond[0]=(x198+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=((((-1.0)*x203))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[2]=(x206+((sj16*x204))+new_r01);
evalcond[3]=(((new_r22*x205))+(((-1.0)*cj16*x203))+new_r00);
evalcond[4]=(x205+new_r11+(((-1.0)*cj16*new_r22*x203)));
evalcond[5]=((((-1.0)*new_r00*x200))+(((-1.0)*new_r22*x207))+x201);
evalcond[6]=((((-1.0)*new_r22*x203))+x202+(((-1.0)*new_r01*x200)));
evalcond[7]=((((-1.0)*x199*x200))+new_r10+(((-1.0)*new_r22*x206)));
evalcond[8]=((((-1.0)*x207))+((new_r22*x201))+(((-1.0)*new_r00*new_r22*x200)));
evalcond[9]=((((-1.0)*x203))+(((-1.0)*new_r01*new_r22*x200))+((new_r22*x202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x208=((1.0)*new_r01);
CheckValue<IkReal> x209=IKPowWithIntegerCheck(new_r22,-1);
if(!x209.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*sj16))+(((-1.0)*cj16*x208)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x209.value)*(((((-1.0)*sj16*x208))+((cj16*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj16))+(((-1.0)*cj16*x208))))+IKsqr(((x209.value)*(((((-1.0)*sj16*x208))+((cj16*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*new_r11*sj16))+(((-1.0)*cj16*x208))), ((x209.value)*(((((-1.0)*sj16*x208))+((cj16*new_r11))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[10];
IkReal x210=IKsin(j18);
IkReal x211=IKcos(j18);
IkReal x212=((1.0)*sj16);
IkReal x213=(cj16*new_r10);
IkReal x214=(cj16*new_r11);
IkReal x215=((1.0)*x211);
IkReal x216=(new_r22*x211);
IkReal x217=(sj16*x210);
IkReal x218=(cj16*x210);
IkReal x219=((1.0)*x210);
evalcond[0]=(x210+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=((((-1.0)*x215))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[2]=(((sj16*x216))+x218+new_r01);
evalcond[3]=(((new_r22*x217))+(((-1.0)*cj16*x215))+new_r00);
evalcond[4]=((((-1.0)*cj16*new_r22*x215))+x217+new_r11);
evalcond[5]=(x213+(((-1.0)*new_r22*x219))+(((-1.0)*new_r00*x212)));
evalcond[6]=(x214+(((-1.0)*new_r22*x215))+(((-1.0)*new_r01*x212)));
evalcond[7]=((((-1.0)*new_r22*x218))+(((-1.0)*x211*x212))+new_r10);
evalcond[8]=(((new_r22*x213))+(((-1.0)*new_r00*new_r22*x212))+(((-1.0)*x219)));
evalcond[9]=(((new_r22*x214))+(((-1.0)*new_r01*new_r22*x212))+(((-1.0)*x215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x220=new_r22*new_r22;
IkReal x221=cj16*cj16;
IkReal x222=(new_r22*sj16);
CheckValue<IkReal> x223=IKPowWithIntegerCheck(IKsign((((x220*x221))+(((-1.0)*x221))+(((-1.0)*x220)))),-1);
if(!x223.valid){
continue;
}
CheckValue<IkReal> x224 = IKatan2WithCheck(IkReal((((new_r00*x222))+((cj16*new_r01)))),IkReal((((new_r01*x222))+(((-1.0)*cj16*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x224.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(((1.5707963267949)*(x223.value)))+(x224.value));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[10];
IkReal x225=IKsin(j18);
IkReal x226=IKcos(j18);
IkReal x227=((1.0)*sj16);
IkReal x228=(cj16*new_r10);
IkReal x229=(cj16*new_r11);
IkReal x230=((1.0)*x226);
IkReal x231=(new_r22*x226);
IkReal x232=(sj16*x225);
IkReal x233=(cj16*x225);
IkReal x234=((1.0)*x225);
evalcond[0]=(x225+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=((((-1.0)*x230))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[2]=(x233+((sj16*x231))+new_r01);
evalcond[3]=(((new_r22*x232))+(((-1.0)*cj16*x230))+new_r00);
evalcond[4]=(x232+new_r11+(((-1.0)*cj16*new_r22*x230)));
evalcond[5]=((((-1.0)*new_r22*x234))+x228+(((-1.0)*new_r00*x227)));
evalcond[6]=((((-1.0)*new_r22*x230))+(((-1.0)*new_r01*x227))+x229);
evalcond[7]=((((-1.0)*new_r22*x233))+new_r10+(((-1.0)*x226*x227)));
evalcond[8]=((((-1.0)*new_r00*new_r22*x227))+(((-1.0)*x234))+((new_r22*x228)));
evalcond[9]=((((-1.0)*new_r01*new_r22*x227))+(((-1.0)*x230))+((new_r22*x229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16, j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x236=IKPowWithIntegerCheck(cj17,-1);
if(!x236.valid){
continue;
}
IkReal x235=x236.value;
CheckValue<IkReal> x237=IKPowWithIntegerCheck(new_r12,-1);
if(!x237.valid){
continue;
}
CheckValue<IkReal> x238=IKPowWithIntegerCheck(x235,-2);
if(!x238.valid){
continue;
}
if( IKabs(((-1.0)*new_r02*x235)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x235*(x237.value)*(((((-1.0)*(new_r02*new_r02)))+(x238.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02*x235))+IKsqr((x235*(x237.value)*(((((-1.0)*(new_r02*new_r02)))+(x238.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r02*x235), (x235*(x237.value)*(((((-1.0)*(new_r02*new_r02)))+(x238.value)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x239=IKcos(j16);
IkReal x240=IKsin(j16);
IkReal x241=((1.0)*cj17);
IkReal x242=((1.0)*x240);
IkReal x243=(cj17*x239);
IkReal x244=(new_r12*x239);
evalcond[0]=(((cj17*x240))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x239*x241)));
evalcond[2]=(((new_r12*x240))+((new_r02*x239)));
evalcond[3]=(x244+(((-1.0)*new_r02*x242))+(((-1.0)*x241)));
evalcond[4]=((((-1.0)*new_r00*x240*x241))+((new_r20*sj17))+((new_r10*x243)));
evalcond[5]=((((-1.0)*new_r01*x240*x241))+((new_r21*sj17))+((new_r11*x243)));
evalcond[6]=(((sj17*x244))+(((-1.0)*new_r22*x241))+(((-1.0)*new_r02*sj17*x242)));
evalcond[7]=((-1.0)+((new_r12*x243))+(((-1.0)*new_r02*x240*x241))+((new_r22*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j18eval[3];
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
j18eval[0]=cj16;
j18eval[1]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal j18eval[3];
j18eval[0]=cj17;
j18eval[1]=sj16;
j18eval[2]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x245=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj16*x245))+(((-1.0)*new_r00*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj16*x245))+((cj16*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj16*x245))+(((-1.0)*new_r00*sj16))))+IKsqr(((((-1.0)*sj16*x245))+((cj16*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*cj16*x245))+(((-1.0)*new_r00*sj16))), ((((-1.0)*sj16*x245))+((cj16*new_r00))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x246=IKcos(j18);
IkReal x247=IKsin(j18);
IkReal x248=((1.0)*sj16);
IkReal x249=(sj16*x247);
IkReal x250=((1.0)*x246);
IkReal x251=(cj16*x247);
IkReal x252=(sj16*x246);
IkReal x253=(cj16*x250);
evalcond[0]=(x247+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=(((cj16*new_r00))+((new_r10*sj16))+(((-1.0)*x250)));
evalcond[2]=(x251+x252+new_r01);
evalcond[3]=(x249+new_r00+(((-1.0)*x253)));
evalcond[4]=(x249+new_r11+(((-1.0)*x253)));
evalcond[5]=((((-1.0)*x247))+(((-1.0)*new_r00*x248))+((cj16*new_r10)));
evalcond[6]=((((-1.0)*new_r01*x248))+((cj16*new_r11))+(((-1.0)*x250)));
evalcond[7]=(new_r10+(((-1.0)*x246*x248))+(((-1.0)*x251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x254=((1.0)*cj16);
if( IKabs(((((-1.0)*new_r01*x254))+(((-1.0)*new_r11*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x254))+((new_r01*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x254))+(((-1.0)*new_r11*sj16))))+IKsqr(((((-1.0)*new_r11*x254))+((new_r01*sj16))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*new_r01*x254))+(((-1.0)*new_r11*sj16))), ((((-1.0)*new_r11*x254))+((new_r01*sj16))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x255=IKsin(j18);
IkReal x256=IKcos(j18);
IkReal x257=((1.0)*sj16);
IkReal x258=(cj16*x255);
IkReal x259=(cj16*x256);
IkReal x260=(x256*x257);
evalcond[0]=(x255+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=(x255+(((-1.0)*new_r00*x257))+((cj16*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x257))+x256+((cj16*new_r11)));
evalcond[3]=(((cj16*new_r00))+((new_r10*sj16))+(((-1.0)*x256)));
evalcond[4]=(x259+((sj16*x255))+new_r11);
evalcond[5]=(x258+new_r01+(((-1.0)*x260)));
evalcond[6]=(x258+new_r10+(((-1.0)*x260)));
evalcond[7]=((((-1.0)*x255*x257))+new_r00+(((-1.0)*x259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x261=IKsin(j18);
IkReal x262=IKcos(j18);
IkReal x263=((1.0)*cj17);
IkReal x264=((1.0)*x262);
IkReal x265=((1.0)*x261);
evalcond[0]=(x261+new_r01);
evalcond[1]=(((cj17*x261))+new_r20);
evalcond[2]=(((cj17*x262))+new_r21);
evalcond[3]=(new_r00+(((-1.0)*x264)));
evalcond[4]=(new_r11+(((-1.0)*sj17*x264)));
evalcond[5]=(new_r10+(((-1.0)*sj17*x265)));
evalcond[6]=((((-1.0)*new_r20*x263))+(((-1.0)*x265))+((new_r10*sj17)));
evalcond[7]=((((-1.0)*new_r21*x263))+(((-1.0)*x264))+((new_r11*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[3];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r21));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x266=IKsin(j18);
IkReal x267=IKcos(j18);
evalcond[0]=(x266+new_r20);
evalcond[1]=(x267+new_r21);
evalcond[2]=(x266+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*x267))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r20, new_r21);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x268=IKsin(j18);
IkReal x269=((1.0)*(IKcos(j18)));
evalcond[0]=((((-1.0)*x268))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x269)));
evalcond[2]=(x268+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x270=IKcos(j18);
IkReal x271=IKsin(j18);
evalcond[0]=(x270+new_r11);
evalcond[1]=(x271+(((-1.0)*new_r01)));
evalcond[2]=((((-1.0)*x270))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x271))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, new_r11);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x272=IKsin(j18);
IkReal x273=((1.0)*(IKcos(j18)));
evalcond[0]=(x272+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*x273))+new_r11);
evalcond[2]=(x272+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x273))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x274=IKcos(j18);
IkReal x275=IKsin(j18);
IkReal x276=((-1.0)*x275);
evalcond[0]=(new_r22*x274);
evalcond[1]=x276;
evalcond[2]=((-1.0)*x274);
evalcond[3]=(new_r22*x276);
evalcond[4]=(x275+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*x274))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x277=IKPowWithIntegerCheck(sj17,-1);
if(!x277.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x277.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11*(x277.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r11*(x277.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x278=IKsin(j18);
IkReal x279=IKcos(j18);
IkReal x280=((1.0)*cj17);
IkReal x281=((1.0)*new_r10);
IkReal x282=((1.0)*x279);
IkReal x283=((1.0)*x278);
evalcond[0]=(((cj17*x278))+new_r20);
evalcond[1]=(((cj17*x279))+new_r21);
evalcond[2]=(x278+(((-1.0)*new_r01)));
evalcond[3]=(((sj17*x279))+new_r11);
evalcond[4]=((((-1.0)*x282))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x281))+(((-1.0)*sj17*x283)));
evalcond[6]=((((-1.0)*x283))+(((-1.0)*sj17*x281))+(((-1.0)*new_r20*x280)));
evalcond[7]=((((-1.0)*new_r11*sj17))+(((-1.0)*x282))+(((-1.0)*new_r21*x280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x284=IKPowWithIntegerCheck(cj17,-1);
if(!x284.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x284.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21*(x284.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r21*(x284.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x285=IKsin(j18);
IkReal x286=IKcos(j18);
IkReal x287=((1.0)*cj17);
IkReal x288=((1.0)*new_r10);
IkReal x289=((1.0)*x286);
IkReal x290=((1.0)*x285);
evalcond[0]=(((cj17*x285))+new_r20);
evalcond[1]=(((cj17*x286))+new_r21);
evalcond[2]=(x285+(((-1.0)*new_r01)));
evalcond[3]=(((sj17*x286))+new_r11);
evalcond[4]=((((-1.0)*x289))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*sj17*x290))+(((-1.0)*x288)));
evalcond[6]=((((-1.0)*x290))+(((-1.0)*sj17*x288))+(((-1.0)*new_r20*x287)));
evalcond[7]=((((-1.0)*new_r11*sj17))+(((-1.0)*x289))+(((-1.0)*new_r21*x287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x291 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x291.valid){
continue;
}
CheckValue<IkReal> x292=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x292.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x291.value)+(((1.5707963267949)*(x292.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x293=IKsin(j18);
IkReal x294=IKcos(j18);
IkReal x295=((1.0)*cj17);
IkReal x296=((1.0)*new_r10);
IkReal x297=((1.0)*x294);
IkReal x298=((1.0)*x293);
evalcond[0]=(new_r20+((cj17*x293)));
evalcond[1]=(new_r21+((cj17*x294)));
evalcond[2]=(x293+(((-1.0)*new_r01)));
evalcond[3]=(((sj17*x294))+new_r11);
evalcond[4]=((((-1.0)*x297))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*sj17*x298))+(((-1.0)*x296)));
evalcond[6]=((((-1.0)*sj17*x296))+(((-1.0)*new_r20*x295))+(((-1.0)*x298)));
evalcond[7]=((((-1.0)*new_r21*x295))+(((-1.0)*x297))+(((-1.0)*new_r11*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x299=IKsin(j18);
IkReal x300=IKcos(j18);
IkReal x301=((1.0)*x300);
evalcond[0]=(x299+new_r20);
evalcond[1]=(x300+new_r21);
evalcond[2]=(new_r01+((cj16*x299)));
evalcond[3]=(((sj16*x299))+new_r11);
evalcond[4]=(((new_r02*x300))+new_r10);
evalcond[5]=((((-1.0)*cj16*x301))+new_r00);
evalcond[6]=(x299+((cj16*new_r01))+((new_r11*sj16)));
evalcond[7]=(((cj16*new_r00))+((new_r10*sj16))+(((-1.0)*x301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r20, new_r21);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x302=IKsin(j18);
IkReal x303=IKcos(j18);
IkReal x304=((1.0)*x303);
evalcond[0]=((((-1.0)*x302))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x304)));
evalcond[2]=(((cj16*x302))+new_r01);
evalcond[3]=(((sj16*x302))+new_r11);
evalcond[4]=((((-1.0)*cj16*x304))+new_r00);
evalcond[5]=((((-1.0)*new_r02*x304))+new_r10);
evalcond[6]=(x302+((cj16*new_r01))+((new_r11*sj16)));
evalcond[7]=(((cj16*new_r00))+((new_r10*sj16))+(((-1.0)*x304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x305=IKsin(j18);
IkReal x306=IKcos(j18);
IkReal x307=((1.0)*cj17);
IkReal x308=((1.0)*sj17);
IkReal x309=((1.0)*x306);
evalcond[0]=(x305+new_r11);
evalcond[1]=(((cj17*x305))+new_r20);
evalcond[2]=(((cj17*x306))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*x309)));
evalcond[4]=(((sj17*x306))+new_r01);
evalcond[5]=(((sj17*x305))+new_r00);
evalcond[6]=((((-1.0)*x305))+(((-1.0)*new_r20*x307))+(((-1.0)*new_r00*x308)));
evalcond[7]=((((-1.0)*new_r21*x307))+(((-1.0)*new_r01*x308))+(((-1.0)*x309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[3];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j18eval[0]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j18eval[0]=cj17;
j18eval[1]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, new_r01);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x310=IKsin(j18);
IkReal x311=((1.0)*(IKcos(j18)));
evalcond[0]=(x310+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*x311))+new_r01);
evalcond[2]=((((-1.0)*x310))+new_r00);
evalcond[3]=((((-1.0)*x311))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r01));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x312=IKsin(j18);
IkReal x313=IKcos(j18);
evalcond[0]=(x313+new_r01);
evalcond[1]=(x312+new_r00);
evalcond[2]=(x312+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r21));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x314=IKsin(j18);
IkReal x315=IKcos(j18);
evalcond[0]=(x314+new_r20);
evalcond[1]=(x315+new_r21);
evalcond[2]=(x314+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r20, new_r21);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x316=IKsin(j18);
IkReal x317=((1.0)*(IKcos(j18)));
evalcond[0]=((((-1.0)*x316))+new_r20);
evalcond[1]=((((-1.0)*x317))+new_r21);
evalcond[2]=(x316+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x317))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x318=IKcos(j18);
IkReal x319=IKsin(j18);
IkReal x320=((-1.0)*x319);
IkReal x321=((-1.0)*x318);
evalcond[0]=x320;
evalcond[1]=x321;
evalcond[2]=(new_r22*x321);
evalcond[3]=(new_r22*x320);
evalcond[4]=(x319+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x322=IKPowWithIntegerCheck(cj17,-1);
if(!x322.valid){
continue;
}
CheckValue<IkReal> x323=IKPowWithIntegerCheck(sj17,-1);
if(!x323.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x322.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x323.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x322.value)))+IKsqr((new_r01*(x323.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r20*(x322.value)), (new_r01*(x323.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x324=IKsin(j18);
IkReal x325=IKcos(j18);
IkReal x326=((1.0)*cj17);
IkReal x327=((1.0)*x325);
IkReal x328=((1.0)*x324);
evalcond[0]=(((cj17*x324))+new_r20);
evalcond[1]=(((cj17*x325))+new_r21);
evalcond[2]=(x324+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj17*x327))+new_r01);
evalcond[4]=((((-1.0)*sj17*x328))+new_r00);
evalcond[5]=((((-1.0)*x327))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x328))+((new_r00*sj17))+(((-1.0)*new_r20*x326)));
evalcond[7]=((((-1.0)*x327))+((new_r01*sj17))+(((-1.0)*new_r21*x326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x329=IKPowWithIntegerCheck(cj17,-1);
if(!x329.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x329.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x329.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x329.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x330=IKsin(j18);
IkReal x331=IKcos(j18);
IkReal x332=((1.0)*cj17);
IkReal x333=((1.0)*x331);
IkReal x334=((1.0)*x330);
evalcond[0]=(new_r20+((cj17*x330)));
evalcond[1]=(new_r21+((cj17*x331)));
evalcond[2]=(x330+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj17*x333))+new_r01);
evalcond[4]=((((-1.0)*sj17*x334))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x333)));
evalcond[6]=((((-1.0)*new_r20*x332))+(((-1.0)*x334))+((new_r00*sj17)));
evalcond[7]=((((-1.0)*new_r21*x332))+(((-1.0)*x333))+((new_r01*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x335 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x335.valid){
continue;
}
CheckValue<IkReal> x336=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x336.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x335.value)+(((1.5707963267949)*(x336.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x337=IKsin(j18);
IkReal x338=IKcos(j18);
IkReal x339=((1.0)*cj17);
IkReal x340=((1.0)*x338);
IkReal x341=((1.0)*x337);
evalcond[0]=(new_r20+((cj17*x337)));
evalcond[1]=(new_r21+((cj17*x338)));
evalcond[2]=(x337+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj17*x340))+new_r01);
evalcond[4]=((((-1.0)*sj17*x341))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x340)));
evalcond[6]=((((-1.0)*new_r20*x339))+((new_r00*sj17))+(((-1.0)*x341)));
evalcond[7]=((((-1.0)*new_r21*x339))+((new_r01*sj17))+(((-1.0)*x340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j18eval[0]=IKabs(new_r22);
if( IKabs(j18eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j18]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
IkReal j18array[2], cj18array[2], sj18array[2], tempj18array[1];
int numsolutions = 0;
for(int ij18 = 0; ij18 < numroots; ++ij18)
{
IkReal htj18 = zeror[ij18];
tempj18array[0]=((2.0)*(atan(htj18)));
for(int kj18 = 0; kj18 < 1; ++kj18)
{
j18array[numsolutions] = tempj18array[kj18];
if( j18array[numsolutions] > IKPI )
{
    j18array[numsolutions]-=IK2PI;
}
else if( j18array[numsolutions] < -IKPI )
{
    j18array[numsolutions]+=IK2PI;
}
sj18array[numsolutions] = IKsin(j18array[numsolutions]);
cj18array[numsolutions] = IKcos(j18array[numsolutions]);
numsolutions++;
}
}
bool j18valid[2]={true,true};
_nj18 = 2;
for(int ij18 = 0; ij18 < numsolutions; ++ij18)
    {
if( !j18valid[ij18] )
{
    continue;
}
    j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
htj18 = IKtan(j18/2);

_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < numsolutions; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x343=IKPowWithIntegerCheck(cj17,-1);
if(!x343.valid){
continue;
}
IkReal x342=x343.value;
CheckValue<IkReal> x344=IKPowWithIntegerCheck(sj16,-1);
if(!x344.valid){
continue;
}
CheckValue<IkReal> x345=IKPowWithIntegerCheck(sj17,-1);
if(!x345.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x342)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x342*(x344.value)*(x345.value)*((((cj16*new_r20))+(((-1.0)*cj17*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x342))+IKsqr((x342*(x344.value)*(x345.value)*((((cj16*new_r20))+(((-1.0)*cj17*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r20*x342), (x342*(x344.value)*(x345.value)*((((cj16*new_r20))+(((-1.0)*cj17*new_r01))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x346=IKsin(j18);
IkReal x347=IKcos(j18);
IkReal x348=((1.0)*cj17);
IkReal x349=((1.0)*sj16);
IkReal x350=(cj16*new_r10);
IkReal x351=(cj16*sj17);
IkReal x352=((1.0)*x347);
IkReal x353=(sj16*x346);
IkReal x354=((1.0)*x346);
evalcond[0]=(((cj17*x346))+new_r20);
evalcond[1]=(((cj17*x347))+new_r21);
evalcond[2]=(x346+((cj16*new_r01))+((new_r11*sj16)));
evalcond[3]=((((-1.0)*x352))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[4]=(((cj16*x346))+new_r01+((sj16*sj17*x347)));
evalcond[5]=((((-1.0)*cj16*x352))+((sj17*x353))+new_r00);
evalcond[6]=(x353+(((-1.0)*x351*x352))+new_r11);
evalcond[7]=((((-1.0)*sj17*x354))+x350+(((-1.0)*new_r00*x349)));
evalcond[8]=((((-1.0)*sj17*x352))+(((-1.0)*new_r01*x349))+((cj16*new_r11)));
evalcond[9]=((((-1.0)*x347*x349))+(((-1.0)*x351*x354))+new_r10);
evalcond[10]=((((-1.0)*x354))+((sj17*x350))+(((-1.0)*new_r20*x348))+(((-1.0)*new_r00*sj17*x349)));
evalcond[11]=((((-1.0)*new_r01*sj17*x349))+(((-1.0)*x352))+(((-1.0)*new_r21*x348))+((new_r11*x351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x356=IKPowWithIntegerCheck(cj17,-1);
if(!x356.valid){
continue;
}
IkReal x355=x356.value;
CheckValue<IkReal> x357=IKPowWithIntegerCheck(cj16,-1);
if(!x357.valid){
continue;
}
if( IKabs((x355*(x357.value)*(((((-1.0)*cj17*new_r01))+((new_r21*sj16*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x355)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x355*(x357.value)*(((((-1.0)*cj17*new_r01))+((new_r21*sj16*sj17))))))+IKsqr(((-1.0)*new_r21*x355))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((x355*(x357.value)*(((((-1.0)*cj17*new_r01))+((new_r21*sj16*sj17))))), ((-1.0)*new_r21*x355));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x358=IKsin(j18);
IkReal x359=IKcos(j18);
IkReal x360=((1.0)*cj17);
IkReal x361=((1.0)*sj16);
IkReal x362=(cj16*new_r10);
IkReal x363=(cj16*sj17);
IkReal x364=((1.0)*x359);
IkReal x365=(sj16*x358);
IkReal x366=((1.0)*x358);
evalcond[0]=(((cj17*x358))+new_r20);
evalcond[1]=(((cj17*x359))+new_r21);
evalcond[2]=(x358+((cj16*new_r01))+((new_r11*sj16)));
evalcond[3]=((((-1.0)*x364))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[4]=(((cj16*x358))+new_r01+((sj16*sj17*x359)));
evalcond[5]=(((sj17*x365))+new_r00+(((-1.0)*cj16*x364)));
evalcond[6]=((((-1.0)*x363*x364))+x365+new_r11);
evalcond[7]=((((-1.0)*sj17*x366))+(((-1.0)*new_r00*x361))+x362);
evalcond[8]=((((-1.0)*sj17*x364))+((cj16*new_r11))+(((-1.0)*new_r01*x361)));
evalcond[9]=((((-1.0)*x363*x366))+(((-1.0)*x359*x361))+new_r10);
evalcond[10]=(((sj17*x362))+(((-1.0)*new_r20*x360))+(((-1.0)*x366))+(((-1.0)*new_r00*sj17*x361)));
evalcond[11]=((((-1.0)*x364))+(((-1.0)*new_r01*sj17*x361))+((new_r11*x363))+(((-1.0)*new_r21*x360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x367 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x367.valid){
continue;
}
CheckValue<IkReal> x368=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x368.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x367.value)+(((1.5707963267949)*(x368.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x369=IKsin(j18);
IkReal x370=IKcos(j18);
IkReal x371=((1.0)*cj17);
IkReal x372=((1.0)*sj16);
IkReal x373=(cj16*new_r10);
IkReal x374=(cj16*sj17);
IkReal x375=((1.0)*x370);
IkReal x376=(sj16*x369);
IkReal x377=((1.0)*x369);
evalcond[0]=(((cj17*x369))+new_r20);
evalcond[1]=(((cj17*x370))+new_r21);
evalcond[2]=(x369+((cj16*new_r01))+((new_r11*sj16)));
evalcond[3]=((((-1.0)*x375))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[4]=(((cj16*x369))+((sj16*sj17*x370))+new_r01);
evalcond[5]=(((sj17*x376))+(((-1.0)*cj16*x375))+new_r00);
evalcond[6]=(x376+(((-1.0)*x374*x375))+new_r11);
evalcond[7]=((((-1.0)*sj17*x377))+(((-1.0)*new_r00*x372))+x373);
evalcond[8]=((((-1.0)*sj17*x375))+(((-1.0)*new_r01*x372))+((cj16*new_r11)));
evalcond[9]=((((-1.0)*x370*x372))+(((-1.0)*x374*x377))+new_r10);
evalcond[10]=((((-1.0)*new_r20*x371))+((sj17*x373))+(((-1.0)*x377))+(((-1.0)*new_r00*sj17*x372)));
evalcond[11]=((((-1.0)*new_r21*x371))+(((-1.0)*x375))+(((-1.0)*new_r01*sj17*x372))+((new_r11*x374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x378 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x378.valid){
continue;
}
CheckValue<IkReal> x379=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x379.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x378.value)+(((1.5707963267949)*(x379.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[2];
evalcond[0]=(((cj17*(IKsin(j18))))+new_r20);
evalcond[1]=(((cj17*(IKcos(j18))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
j16eval[0]=cj17;
j16eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j16eval[2]=IKsign(cj17);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
j16eval[0]=cj17;
j16eval[1]=new_r01;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x380=((1.0)*sj18);
if( IKabs(((((-1.0)*cj18*new_r01))+(((-1.0)*new_r00*x380)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x380))+((cj18*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj18*new_r01))+(((-1.0)*new_r00*x380))))+IKsqr(((((-1.0)*new_r01*x380))+((cj18*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((-1.0)*cj18*new_r01))+(((-1.0)*new_r00*x380))), ((((-1.0)*new_r01*x380))+((cj18*new_r00))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x381=IKsin(j16);
IkReal x382=IKcos(j16);
IkReal x383=((1.0)*cj18);
IkReal x384=((1.0)*sj18);
IkReal x385=(sj18*x381);
IkReal x386=((1.0)*x381);
IkReal x387=(x382*x383);
evalcond[0]=(((new_r01*x382))+((new_r11*x381))+sj18);
evalcond[1]=(((cj18*x381))+((sj18*x382))+new_r01);
evalcond[2]=(x385+(((-1.0)*x387))+new_r00);
evalcond[3]=(x385+(((-1.0)*x387))+new_r11);
evalcond[4]=(((new_r00*x382))+((new_r10*x381))+(((-1.0)*x383)));
evalcond[5]=((((-1.0)*x381*x383))+new_r10+(((-1.0)*x382*x384)));
evalcond[6]=((((-1.0)*new_r00*x386))+((new_r10*x382))+(((-1.0)*x384)));
evalcond[7]=((((-1.0)*new_r01*x386))+((new_r11*x382))+(((-1.0)*x383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
IkReal x388=(((cj18*new_r01))+((new_r11*sj18)));
j16eval[0]=x388;
j16eval[1]=((IKabs(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj18*sj18)))))+(IKabs(((-1.0)+(new_r01*new_r01)+(cj18*cj18)))));
j16eval[2]=IKsign(x388);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
IkReal x389=((1.0)*sj18);
IkReal x390=(((new_r10*new_r11))+((new_r00*new_r01)));
j16eval[0]=x390;
j16eval[1]=((IKabs(((((-1.0)*new_r10*x389))+((new_r01*sj18)))))+(IKabs(((((-1.0)*new_r11*x389))+(((-1.0)*new_r00*x389))))));
j16eval[2]=IKsign(x390);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
IkReal x391=((1.0)*sj18);
IkReal x392=((new_r01*new_r01)+(new_r11*new_r11));
j16eval[0]=x392;
j16eval[1]=((IKabs((((cj18*new_r01))+(((-1.0)*new_r11*x391)))))+(IKabs(((((-1.0)*new_r01*x391))+(((-1.0)*cj18*new_r11))))));
j16eval[2]=IKsign(x392);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
new_r01=0;
new_r11=0;
j16eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x394 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x394.valid){
continue;
}
IkReal x393=x394.value;
j16array[0]=((-1.0)*x393);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((3.14159265358979)+(((-1.0)*x393)));
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j16))))+(((-1.0)*new_r00*(IKsin(j16)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j18))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x395=IKcos(j16);
IkReal x396=IKsin(j16);
IkReal x397=((1.0)*x396);
evalcond[0]=(x395+new_r11);
evalcond[1]=((((-1.0)*x397))+new_r01);
evalcond[2]=((((-1.0)*x395))+new_r00);
evalcond[3]=((((-1.0)*x397))+new_r10);
evalcond[4]=(((new_r11*x396))+((new_r01*x395)));
evalcond[5]=((-1.0)+((new_r00*x395))+((new_r10*x396)));
evalcond[6]=((((-1.0)*new_r00*x397))+((new_r10*x395)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x397))+((new_r11*x395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j18)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x398=IKsin(j16);
IkReal x399=IKcos(j16);
IkReal x400=((1.0)*x398);
evalcond[0]=(x398+new_r01);
evalcond[1]=(x399+new_r00);
evalcond[2]=(x398+new_r10);
evalcond[3]=((((-1.0)*x399))+new_r11);
evalcond[4]=(((new_r11*x398))+((new_r01*x399)));
evalcond[5]=((1.0)+((new_r00*x399))+((new_r10*x398)));
evalcond[6]=((((-1.0)*new_r00*x400))+((new_r10*x399)));
evalcond[7]=((-1.0)+((new_r11*x399))+(((-1.0)*new_r01*x400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x402 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x402)==0){
continue;
}
IkReal x401=pow(x402,-0.5);
CheckValue<IkReal> x403 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x403.valid){
continue;
}
IkReal gconst0=((-1.0)*(x403.value));
IkReal gconst1=((-1.0)*new_r01*x401);
IkReal gconst2=(new_r11*x401);
CheckValue<IkReal> x404 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x404.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j18+(x404.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x407 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x407.valid){
continue;
}
IkReal x405=((-1.0)*(x407.value));
IkReal x406=x401;
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x405;
IkReal gconst0=x405;
IkReal gconst1=((-1.0)*new_r01*x406);
IkReal gconst2=(new_r11*x406);
IkReal x408=new_r01*new_r01;
IkReal x409=(new_r00*new_r01);
IkReal x410=(((new_r10*new_r11))+x409);
IkReal x411=x401;
IkReal x412=(new_r01*x411);
j16eval[0]=x410;
j16eval[1]=((IKabs((((x409*x411))+((new_r11*x412)))))+(IKabs(((((-1.0)*x408*x411))+((new_r10*x412))))));
j16eval[2]=IKsign(x410);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x415 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x415.valid){
continue;
}
IkReal x413=((-1.0)*(x415.value));
IkReal x414=x401;
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x413;
IkReal gconst0=x413;
IkReal gconst1=((-1.0)*new_r01*x414);
IkReal gconst2=(new_r11*x414);
IkReal x416=((new_r01*new_r01)+(new_r11*new_r11));
j16eval[0]=x416;
j16eval[1]=IKsign(x416);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x419 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x419.valid){
continue;
}
IkReal x417=((-1.0)*(x419.value));
IkReal x418=x401;
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x417;
IkReal gconst0=x417;
IkReal gconst1=((-1.0)*new_r01*x418);
IkReal gconst2=(new_r11*x418);
j16eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst1*gconst1)+(gconst2*gconst2));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[4], cj16array[4], sj16array[4];
bool j16valid[4]={false};
_nj16 = 4;
j16array[0]=0;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=1.5707963267949;
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
j16array[2]=3.14159265358979;
sj16array[2]=IKsin(j16array[2]);
cj16array[2]=IKcos(j16array[2]);
j16array[3]=-1.5707963267949;
sj16array[3]=IKsin(j16array[3]);
cj16array[3]=IKcos(j16array[3]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
if( j16array[2] > IKPI )
{
    j16array[2]-=IK2PI;
}
else if( j16array[2] < -IKPI )
{    j16array[2]+=IK2PI;
}
j16valid[2] = true;
if( j16array[3] > IKPI )
{
    j16array[3]-=IK2PI;
}
else if( j16array[3] < -IKPI )
{    j16array[3]+=IK2PI;
}
j16valid[3] = true;
for(int ij16 = 0; ij16 < 4; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 4; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x421 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x421.valid){
continue;
}
IkReal x420=((-1.0)*(x421.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x420;
new_r11=0;
new_r00=0;
IkReal gconst0=x420;
IkReal x422 = new_r01*new_r01;
if(IKabs(x422)==0){
continue;
}
IkReal gconst1=((-1.0)*new_r01*(pow(x422,-0.5)));
IkReal gconst2=0;
j16eval[0]=new_r01;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x423=IKPowWithIntegerCheck(gconst1,-1);
if(!x423.valid){
continue;
}
cj16array[0]=((-1.0)*new_r01*(x423.value));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x424=IKsin(j16);
IkReal x425=IKcos(j16);
IkReal x426=((-1.0)*x424);
evalcond[0]=(new_r10*x424);
evalcond[1]=(gconst1*x426);
evalcond[2]=(new_r01*x426);
evalcond[3]=(gconst1+((new_r01*x425)));
evalcond[4]=(gconst1+((new_r10*x425)));
evalcond[5]=(((gconst1*x425))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x427=IKPowWithIntegerCheck(new_r01,-1);
if(!x427.valid){
continue;
}
cj16array[0]=((-1.0)*gconst1*(x427.value));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x428=IKsin(j16);
IkReal x429=IKcos(j16);
IkReal x430=(gconst1*x429);
IkReal x431=((-1.0)*x428);
evalcond[0]=(new_r10*x428);
evalcond[1]=(gconst1*x431);
evalcond[2]=(new_r01*x431);
evalcond[3]=(x430+new_r01);
evalcond[4]=(gconst1+((new_r10*x429)));
evalcond[5]=(x430+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst1;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x433 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x433.valid){
continue;
}
IkReal x432=((-1.0)*(x433.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x432;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x432;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j16eval[0]=-1.0;
j16eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j16eval[2]=-1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x435 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x435.valid){
continue;
}
IkReal x434=((-1.0)*(x435.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x434;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x434;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j16eval[0]=-1.0;
j16eval[1]=-1.0;
j16eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x437 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x437.valid){
continue;
}
IkReal x436=((-1.0)*(x437.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x436;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst0=x436;
IkReal gconst1=((-1.0)*new_r01);
IkReal gconst2=new_r11;
j16eval[0]=1.0;
j16eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j16eval[2]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x438=((1.0)*new_r11);
CheckValue<IkReal> x439 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x438)))),IkReal(((((-1.0)*gconst2*x438))+(((-1.0)*gconst1*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x439.valid){
continue;
}
CheckValue<IkReal> x440=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x440.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x439.value)+(((1.5707963267949)*(x440.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x441=IKsin(j16);
IkReal x442=IKcos(j16);
IkReal x443=(gconst1*x442);
IkReal x444=(gconst2*x442);
IkReal x445=(gconst1*x441);
IkReal x446=((1.0)*x441);
IkReal x447=(gconst2*x446);
evalcond[0]=(((new_r01*x442))+gconst1+((new_r11*x441)));
evalcond[1]=(x445+x444+new_r11);
evalcond[2]=((((-1.0)*x447))+x443);
evalcond[3]=((((-1.0)*x447))+x443+new_r01);
evalcond[4]=((((-1.0)*x445))+(((-1.0)*x444)));
evalcond[5]=((((-1.0)*new_r01*x446))+gconst2+((new_r11*x442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x448=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst2*gconst2)))+(((-1.0)*(gconst1*gconst1))))),-1);
if(!x448.valid){
continue;
}
CheckValue<IkReal> x449 = IKatan2WithCheck(IkReal((gconst1*new_r11)),IkReal((gconst2*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x449.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x448.value)))+(x449.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x450=IKsin(j16);
IkReal x451=IKcos(j16);
IkReal x452=(gconst1*x451);
IkReal x453=(gconst2*x451);
IkReal x454=(gconst1*x450);
IkReal x455=((1.0)*x450);
IkReal x456=(gconst2*x455);
evalcond[0]=(((new_r11*x450))+((new_r01*x451))+gconst1);
evalcond[1]=(x454+x453+new_r11);
evalcond[2]=((((-1.0)*x456))+x452);
evalcond[3]=((((-1.0)*x456))+x452+new_r01);
evalcond[4]=((((-1.0)*x454))+(((-1.0)*x453)));
evalcond[5]=(((new_r11*x451))+gconst2+(((-1.0)*new_r01*x455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x457=IKPowWithIntegerCheck(IKsign((((gconst1*new_r01))+(((-1.0)*gconst2*new_r11)))),-1);
if(!x457.valid){
continue;
}
CheckValue<IkReal> x458 = IKatan2WithCheck(IkReal((gconst1*gconst2)),IkReal(((-1.0)*(gconst1*gconst1))),IKFAST_ATAN2_MAGTHRESH);
if(!x458.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x457.value)))+(x458.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x459=IKsin(j16);
IkReal x460=IKcos(j16);
IkReal x461=(gconst1*x460);
IkReal x462=(gconst2*x460);
IkReal x463=(gconst1*x459);
IkReal x464=((1.0)*x459);
IkReal x465=(gconst2*x464);
evalcond[0]=(((new_r11*x459))+((new_r01*x460))+gconst1);
evalcond[1]=(x463+x462+new_r11);
evalcond[2]=((((-1.0)*x465))+x461);
evalcond[3]=((((-1.0)*x465))+x461+new_r01);
evalcond[4]=((((-1.0)*x463))+(((-1.0)*x462)));
evalcond[5]=(((new_r11*x460))+gconst2+(((-1.0)*new_r01*x464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x466=IKPowWithIntegerCheck(gconst2,-1);
if(!x466.valid){
continue;
}
cj16array[0]=(new_r00*(x466.value));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x467=IKsin(j16);
IkReal x468=IKcos(j16);
IkReal x469=((-1.0)*x467);
evalcond[0]=(new_r11*x467);
evalcond[1]=(gconst2*x469);
evalcond[2]=(new_r00*x469);
evalcond[3]=(((gconst2*x468))+new_r11);
evalcond[4]=(((new_r11*x468))+gconst2);
evalcond[5]=(((new_r00*x468))+(((-1.0)*gconst2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x471 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x471.valid){
continue;
}
IkReal x470=((-1.0)*(x471.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x470;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x470;
IkReal gconst1=0;
IkReal x472 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x472)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x472,-0.5)));
j16eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x474 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x474.valid){
continue;
}
IkReal x473=((-1.0)*(x474.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x473;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x473;
IkReal gconst1=0;
IkReal x475 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x475)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x475,-0.5)));
j16eval[0]=new_r11;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x477 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x477.valid){
continue;
}
IkReal x476=((-1.0)*(x477.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x476;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst0=x476;
IkReal gconst1=0;
IkReal x478 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x478)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x478,-0.5)));
j16eval[0]=new_r10;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x479=IKPowWithIntegerCheck(new_r10,-1);
if(!x479.valid){
continue;
}
CheckValue<IkReal> x480=IKPowWithIntegerCheck(gconst2,-1);
if(!x480.valid){
continue;
}
if( IKabs((gconst2*(x479.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x480.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst2*(x479.value)))+IKsqr(((-1.0)*new_r11*(x480.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((gconst2*(x479.value)), ((-1.0)*new_r11*(x480.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x481=IKsin(j16);
IkReal x482=IKcos(j16);
IkReal x483=((1.0)*gconst2);
IkReal x484=((-1.0)*gconst2);
evalcond[0]=(new_r11*x481);
evalcond[1]=(new_r10*x482);
evalcond[2]=(x481*x484);
evalcond[3]=(x482*x484);
evalcond[4]=(((gconst2*x482))+new_r11);
evalcond[5]=(((new_r11*x482))+gconst2);
evalcond[6]=((((-1.0)*x481*x483))+new_r10);
evalcond[7]=((((-1.0)*x483))+((new_r10*x481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x485=IKPowWithIntegerCheck(gconst2,-1);
if(!x485.valid){
continue;
}
CheckValue<IkReal> x486=IKPowWithIntegerCheck(new_r11,-1);
if(!x486.valid){
continue;
}
if( IKabs((new_r10*(x485.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x486.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x485.value)))+IKsqr(((-1.0)*gconst2*(x486.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((new_r10*(x485.value)), ((-1.0)*gconst2*(x486.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x487=IKsin(j16);
IkReal x488=IKcos(j16);
IkReal x489=((1.0)*gconst2);
IkReal x490=((-1.0)*gconst2);
evalcond[0]=(new_r11*x487);
evalcond[1]=(new_r10*x488);
evalcond[2]=(x487*x490);
evalcond[3]=(x488*x490);
evalcond[4]=(((gconst2*x488))+new_r11);
evalcond[5]=(((new_r11*x488))+gconst2);
evalcond[6]=((((-1.0)*x487*x489))+new_r10);
evalcond[7]=((((-1.0)*x489))+((new_r10*x487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x491 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x491.valid){
continue;
}
CheckValue<IkReal> x492=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x492.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x491.value)+(((1.5707963267949)*(x492.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x493=IKsin(j16);
IkReal x494=IKcos(j16);
IkReal x495=((1.0)*gconst2);
IkReal x496=((-1.0)*gconst2);
evalcond[0]=(new_r11*x493);
evalcond[1]=(new_r10*x494);
evalcond[2]=(x493*x496);
evalcond[3]=(x494*x496);
evalcond[4]=(((gconst2*x494))+new_r11);
evalcond[5]=(gconst2+((new_r11*x494)));
evalcond[6]=((((-1.0)*x493*x495))+new_r10);
evalcond[7]=((((-1.0)*x495))+((new_r10*x493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x498 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x498.valid){
continue;
}
IkReal x497=((-1.0)*(x498.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x497;
new_r01=0;
IkReal gconst0=x497;
IkReal gconst1=0;
IkReal x499 = new_r11*new_r11;
if(IKabs(x499)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x499,-0.5)));
j16eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x501 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x501.valid){
continue;
}
IkReal x500=((-1.0)*(x501.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x500;
new_r01=0;
IkReal gconst0=x500;
IkReal gconst1=0;
IkReal x502 = new_r11*new_r11;
if(IKabs(x502)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x502,-0.5)));
j16eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x504 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x504.valid){
continue;
}
IkReal x503=((-1.0)*(x504.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst1;
cj18=gconst2;
j18=x503;
new_r01=0;
IkReal gconst0=x503;
IkReal gconst1=0;
IkReal x505 = new_r11*new_r11;
if(IKabs(x505)==0){
continue;
}
IkReal gconst2=(new_r11*(pow(x505,-0.5)));
j16eval[0]=new_r11;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x506=IKPowWithIntegerCheck(gconst2,-1);
if(!x506.valid){
continue;
}
CheckValue<IkReal> x507=IKPowWithIntegerCheck(new_r11,-1);
if(!x507.valid){
continue;
}
if( IKabs((new_r10*(x506.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x507.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x506.value)))+IKsqr(((-1.0)*gconst2*(x507.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((new_r10*(x506.value)), ((-1.0)*gconst2*(x507.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x508=IKsin(j16);
IkReal x509=IKcos(j16);
IkReal x510=(gconst2*x508);
IkReal x511=(gconst2*x509);
evalcond[0]=(new_r11*x508);
evalcond[1]=((-1.0)*x510);
evalcond[2]=(x511+new_r11);
evalcond[3]=(gconst2+((new_r11*x509)));
evalcond[4]=((((-1.0)*x511))+new_r00);
evalcond[5]=((((-1.0)*x510))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x508))+((new_r10*x509)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x508))+((new_r00*x509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x512 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x512.valid){
continue;
}
CheckValue<IkReal> x513=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x513.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x512.value)+(((1.5707963267949)*(x513.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x514=IKsin(j16);
IkReal x515=IKcos(j16);
IkReal x516=(gconst2*x514);
IkReal x517=(gconst2*x515);
evalcond[0]=(new_r11*x514);
evalcond[1]=((-1.0)*x516);
evalcond[2]=(x517+new_r11);
evalcond[3]=(((new_r11*x515))+gconst2);
evalcond[4]=((((-1.0)*x517))+new_r00);
evalcond[5]=((((-1.0)*x516))+new_r10);
evalcond[6]=(((new_r10*x515))+(((-1.0)*new_r00*x514)));
evalcond[7]=(((new_r00*x515))+((new_r10*x514))+(((-1.0)*gconst2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x518=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x518.valid){
continue;
}
CheckValue<IkReal> x519 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x519.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x518.value)))+(x519.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x520=IKsin(j16);
IkReal x521=IKcos(j16);
IkReal x522=(gconst2*x520);
IkReal x523=(gconst2*x521);
evalcond[0]=(new_r11*x520);
evalcond[1]=((-1.0)*x522);
evalcond[2]=(x523+new_r11);
evalcond[3]=(gconst2+((new_r11*x521)));
evalcond[4]=((((-1.0)*x523))+new_r00);
evalcond[5]=((((-1.0)*x522))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x520))+((new_r10*x521)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x520))+((new_r00*x521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x524=((1.0)*new_r11);
CheckValue<IkReal> x525 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x524)))),IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x525.valid){
continue;
}
CheckValue<IkReal> x526=IKPowWithIntegerCheck(IKsign(((gconst1*gconst1)+(gconst2*gconst2))),-1);
if(!x526.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x525.value)+(((1.5707963267949)*(x526.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x527=IKsin(j16);
IkReal x528=IKcos(j16);
IkReal x529=(gconst1*x528);
IkReal x530=(gconst2*x528);
IkReal x531=((1.0)*x527);
IkReal x532=(gconst2*x531);
evalcond[0]=(((new_r01*x528))+gconst1+((new_r11*x527)));
evalcond[1]=(x530+((gconst1*x527))+new_r11);
evalcond[2]=((((-1.0)*x532))+x529+new_r01);
evalcond[3]=(gconst1+(((-1.0)*new_r00*x531))+((new_r10*x528)));
evalcond[4]=(gconst2+((new_r11*x528))+(((-1.0)*new_r01*x531)));
evalcond[5]=((((-1.0)*x532))+x529+new_r10);
evalcond[6]=((((-1.0)*gconst2))+((new_r10*x527))+((new_r00*x528)));
evalcond[7]=((((-1.0)*x530))+new_r00+(((-1.0)*gconst1*x531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x533=((1.0)*new_r11);
CheckValue<IkReal> x534 = IKatan2WithCheck(IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x533)))),IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x533)))),IKFAST_ATAN2_MAGTHRESH);
if(!x534.valid){
continue;
}
CheckValue<IkReal> x535=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x535.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x534.value)+(((1.5707963267949)*(x535.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x536=IKsin(j16);
IkReal x537=IKcos(j16);
IkReal x538=(gconst1*x537);
IkReal x539=(gconst2*x537);
IkReal x540=((1.0)*x536);
IkReal x541=(gconst2*x540);
evalcond[0]=(((new_r01*x537))+gconst1+((new_r11*x536)));
evalcond[1]=(((gconst1*x536))+x539+new_r11);
evalcond[2]=((((-1.0)*x541))+x538+new_r01);
evalcond[3]=((((-1.0)*new_r00*x540))+gconst1+((new_r10*x537)));
evalcond[4]=(gconst2+((new_r11*x537))+(((-1.0)*new_r01*x540)));
evalcond[5]=((((-1.0)*x541))+x538+new_r10);
evalcond[6]=((((-1.0)*gconst2))+((new_r10*x536))+((new_r00*x537)));
evalcond[7]=((((-1.0)*x539))+new_r00+(((-1.0)*gconst1*x540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x542=((1.0)*gconst1);
CheckValue<IkReal> x543=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x543.valid){
continue;
}
CheckValue<IkReal> x544 = IKatan2WithCheck(IkReal((((gconst1*new_r01))+(((-1.0)*new_r10*x542)))),IkReal(((((-1.0)*new_r00*x542))+(((-1.0)*new_r11*x542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x544.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x543.value)))+(x544.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x545=IKsin(j16);
IkReal x546=IKcos(j16);
IkReal x547=(gconst1*x546);
IkReal x548=(gconst2*x546);
IkReal x549=((1.0)*x545);
IkReal x550=(gconst2*x549);
evalcond[0]=(gconst1+((new_r11*x545))+((new_r01*x546)));
evalcond[1]=(((gconst1*x545))+x548+new_r11);
evalcond[2]=((((-1.0)*x550))+x547+new_r01);
evalcond[3]=((((-1.0)*new_r00*x549))+gconst1+((new_r10*x546)));
evalcond[4]=(gconst2+((new_r11*x546))+(((-1.0)*new_r01*x549)));
evalcond[5]=((((-1.0)*x550))+x547+new_r10);
evalcond[6]=(((new_r00*x546))+((new_r10*x545))+(((-1.0)*gconst2)));
evalcond[7]=((((-1.0)*x548))+new_r00+(((-1.0)*gconst1*x549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x552 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x552)==0){
continue;
}
IkReal x551=pow(x552,-0.5);
CheckValue<IkReal> x553 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x553.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x553.value))));
IkReal gconst4=((1.0)*new_r01*x551);
IkReal gconst5=((-1.0)*new_r11*x551);
CheckValue<IkReal> x554 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x554.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j18+(x554.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x557 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x557.valid){
continue;
}
IkReal x555=((1.0)*(x557.value));
IkReal x556=x551;
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x555)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x555)));
IkReal gconst4=((1.0)*new_r01*x556);
IkReal gconst5=((-1.0)*new_r11*x556);
IkReal x558=new_r01*new_r01;
IkReal x559=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x560=x551;
IkReal x561=((1.0)*new_r01*x560);
j16eval[0]=x559;
j16eval[1]=IKsign(x559);
j16eval[2]=((IKabs((((x558*x560))+(((-1.0)*new_r10*x561)))))+(IKabs(((((-1.0)*new_r00*x561))+(((-1.0)*new_r11*x561))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x564 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x564.valid){
continue;
}
IkReal x562=((1.0)*(x564.value));
IkReal x563=x551;
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x562)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x562)));
IkReal gconst4=((1.0)*new_r01*x563);
IkReal gconst5=((-1.0)*new_r11*x563);
IkReal x565=((new_r01*new_r01)+(new_r11*new_r11));
j16eval[0]=x565;
j16eval[1]=IKsign(x565);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x568 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x568.valid){
continue;
}
IkReal x566=((1.0)*(x568.value));
IkReal x567=x551;
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x566)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x566)));
IkReal gconst4=((1.0)*new_r01*x567);
IkReal gconst5=((-1.0)*new_r11*x567);
j16eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst4*gconst4)+(gconst5*gconst5));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[4], cj16array[4], sj16array[4];
bool j16valid[4]={false};
_nj16 = 4;
j16array[0]=0;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=1.5707963267949;
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
j16array[2]=3.14159265358979;
sj16array[2]=IKsin(j16array[2]);
cj16array[2]=IKcos(j16array[2]);
j16array[3]=-1.5707963267949;
sj16array[3]=IKsin(j16array[3]);
cj16array[3]=IKcos(j16array[3]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
if( j16array[2] > IKPI )
{
    j16array[2]-=IK2PI;
}
else if( j16array[2] < -IKPI )
{    j16array[2]+=IK2PI;
}
j16valid[2] = true;
if( j16array[3] > IKPI )
{
    j16array[3]-=IK2PI;
}
else if( j16array[3] < -IKPI )
{    j16array[3]+=IK2PI;
}
j16valid[3] = true;
for(int ij16 = 0; ij16 < 4; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 4; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x570 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x570.valid){
continue;
}
IkReal x569=((1.0)*(x570.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x569)));
new_r11=0;
new_r00=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x569)));
IkReal x571 = new_r01*new_r01;
if(IKabs(x571)==0){
continue;
}
IkReal gconst4=((1.0)*new_r01*(pow(x571,-0.5)));
IkReal gconst5=0;
j16eval[0]=new_r01;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x572=IKPowWithIntegerCheck(gconst4,-1);
if(!x572.valid){
continue;
}
cj16array[0]=((-1.0)*new_r01*(x572.value));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x573=IKsin(j16);
IkReal x574=IKcos(j16);
IkReal x575=((-1.0)*x573);
evalcond[0]=(new_r10*x573);
evalcond[1]=(gconst4*x575);
evalcond[2]=(new_r01*x575);
evalcond[3]=(((new_r01*x574))+gconst4);
evalcond[4]=(((new_r10*x574))+gconst4);
evalcond[5]=(((gconst4*x574))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x576=IKPowWithIntegerCheck(new_r01,-1);
if(!x576.valid){
continue;
}
cj16array[0]=((-1.0)*gconst4*(x576.value));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x577=IKsin(j16);
IkReal x578=IKcos(j16);
IkReal x579=(gconst4*x578);
IkReal x580=((-1.0)*x577);
evalcond[0]=(new_r10*x577);
evalcond[1]=(gconst4*x580);
evalcond[2]=(new_r01*x580);
evalcond[3]=(x579+new_r01);
evalcond[4]=(((new_r10*x578))+gconst4);
evalcond[5]=(x579+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst4;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
CheckValue<IkReal> x582 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x582.valid){
continue;
}
IkReal x581=((1.0)*(x582.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x581)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x581)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j16eval[0]=1.0;
j16eval[1]=1.0;
j16eval[2]=new_r01;
j16eval[3]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x584 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x584.valid){
continue;
}
IkReal x583=((1.0)*(x584.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x583)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x583)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j16eval[0]=-1.0;
j16eval[1]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
j16eval[2]=-1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x586 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x586.valid){
continue;
}
IkReal x585=((1.0)*(x586.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x585)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x585)));
IkReal gconst4=((1.0)*new_r01);
IkReal gconst5=((-1.0)*new_r11);
j16eval[0]=1.0;
j16eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j16eval[2]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x587=((1.0)*new_r11);
CheckValue<IkReal> x588 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x587)))),IkReal(((((-1.0)*gconst4*new_r01))+(((-1.0)*gconst5*x587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x588.valid){
continue;
}
CheckValue<IkReal> x589=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x589.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x588.value)+(((1.5707963267949)*(x589.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x590=IKsin(j16);
IkReal x591=IKcos(j16);
IkReal x592=(gconst4*x591);
IkReal x593=(gconst4*x590);
IkReal x594=(gconst5*x591);
IkReal x595=((1.0)*x590);
IkReal x596=(gconst5*x595);
evalcond[0]=(((new_r11*x590))+gconst4+((new_r01*x591)));
evalcond[1]=(x594+x593+new_r11);
evalcond[2]=((((-1.0)*x596))+x592);
evalcond[3]=((((-1.0)*x596))+x592+new_r01);
evalcond[4]=((((-1.0)*x594))+(((-1.0)*x593)));
evalcond[5]=(((new_r11*x591))+gconst5+(((-1.0)*new_r01*x595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x597 = IKatan2WithCheck(IkReal((gconst4*new_r11)),IkReal((gconst5*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x597.valid){
continue;
}
CheckValue<IkReal> x598=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst4*gconst4)))+(((-1.0)*(gconst5*gconst5))))),-1);
if(!x598.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x597.value)+(((1.5707963267949)*(x598.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x599=IKsin(j16);
IkReal x600=IKcos(j16);
IkReal x601=(gconst4*x600);
IkReal x602=(gconst4*x599);
IkReal x603=(gconst5*x600);
IkReal x604=((1.0)*x599);
IkReal x605=(gconst5*x604);
evalcond[0]=(((new_r11*x599))+gconst4+((new_r01*x600)));
evalcond[1]=(x603+x602+new_r11);
evalcond[2]=(x601+(((-1.0)*x605)));
evalcond[3]=(x601+(((-1.0)*x605))+new_r01);
evalcond[4]=((((-1.0)*x603))+(((-1.0)*x602)));
evalcond[5]=(gconst5+((new_r11*x600))+(((-1.0)*new_r01*x604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x606 = IKatan2WithCheck(IkReal((gconst4*gconst5)),IkReal(((-1.0)*(gconst4*gconst4))),IKFAST_ATAN2_MAGTHRESH);
if(!x606.valid){
continue;
}
CheckValue<IkReal> x607=IKPowWithIntegerCheck(IKsign((((gconst4*new_r01))+(((-1.0)*gconst5*new_r11)))),-1);
if(!x607.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x606.value)+(((1.5707963267949)*(x607.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x608=IKsin(j16);
IkReal x609=IKcos(j16);
IkReal x610=(gconst4*x609);
IkReal x611=(gconst4*x608);
IkReal x612=(gconst5*x609);
IkReal x613=((1.0)*x608);
IkReal x614=(gconst5*x613);
evalcond[0]=(gconst4+((new_r11*x608))+((new_r01*x609)));
evalcond[1]=(x611+x612+new_r11);
evalcond[2]=((((-1.0)*x614))+x610);
evalcond[3]=((((-1.0)*x614))+x610+new_r01);
evalcond[4]=((((-1.0)*x611))+(((-1.0)*x612)));
evalcond[5]=(gconst5+((new_r11*x609))+(((-1.0)*new_r01*x613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x615=IKPowWithIntegerCheck(gconst5,-1);
if(!x615.valid){
continue;
}
cj16array[0]=(new_r00*(x615.value));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x616=IKsin(j16);
IkReal x617=IKcos(j16);
IkReal x618=((-1.0)*x616);
evalcond[0]=(new_r11*x616);
evalcond[1]=(gconst5*x618);
evalcond[2]=(new_r00*x618);
evalcond[3]=(((gconst5*x617))+new_r11);
evalcond[4]=(gconst5+((new_r11*x617)));
evalcond[5]=((((-1.0)*gconst5))+((new_r00*x617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x620 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x620.valid){
continue;
}
IkReal x619=((1.0)*(x620.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x619)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x619)));
IkReal gconst4=0;
IkReal x621 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x621)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x621,-0.5)));
j16eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x623 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x623.valid){
continue;
}
IkReal x622=((1.0)*(x623.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x622)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x622)));
IkReal gconst4=0;
IkReal x624 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x624)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x624,-0.5)));
j16eval[0]=new_r11;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x626 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x626.valid){
continue;
}
IkReal x625=((1.0)*(x626.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x625)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x625)));
IkReal gconst4=0;
IkReal x627 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x627)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x627,-0.5)));
j16eval[0]=new_r10;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x628=IKPowWithIntegerCheck(new_r10,-1);
if(!x628.valid){
continue;
}
CheckValue<IkReal> x629=IKPowWithIntegerCheck(gconst5,-1);
if(!x629.valid){
continue;
}
if( IKabs((gconst5*(x628.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x629.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst5*(x628.value)))+IKsqr(((-1.0)*new_r11*(x629.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((gconst5*(x628.value)), ((-1.0)*new_r11*(x629.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x630=IKsin(j16);
IkReal x631=IKcos(j16);
IkReal x632=((1.0)*gconst5);
IkReal x633=(gconst5*x631);
evalcond[0]=(new_r11*x630);
evalcond[1]=(new_r10*x631);
evalcond[2]=((-1.0)*gconst5*x630);
evalcond[3]=((-1.0)*x633);
evalcond[4]=(x633+new_r11);
evalcond[5]=(gconst5+((new_r11*x631)));
evalcond[6]=((((-1.0)*x630*x632))+new_r10);
evalcond[7]=((((-1.0)*x632))+((new_r10*x630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x634=IKPowWithIntegerCheck(gconst5,-1);
if(!x634.valid){
continue;
}
CheckValue<IkReal> x635=IKPowWithIntegerCheck(new_r11,-1);
if(!x635.valid){
continue;
}
if( IKabs((new_r10*(x634.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x635.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x634.value)))+IKsqr(((-1.0)*gconst5*(x635.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((new_r10*(x634.value)), ((-1.0)*gconst5*(x635.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x636=IKsin(j16);
IkReal x637=IKcos(j16);
IkReal x638=((1.0)*gconst5);
IkReal x639=(gconst5*x637);
evalcond[0]=(new_r11*x636);
evalcond[1]=(new_r10*x637);
evalcond[2]=((-1.0)*gconst5*x636);
evalcond[3]=((-1.0)*x639);
evalcond[4]=(x639+new_r11);
evalcond[5]=(gconst5+((new_r11*x637)));
evalcond[6]=((((-1.0)*x636*x638))+new_r10);
evalcond[7]=((((-1.0)*x638))+((new_r10*x636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x640 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x640.valid){
continue;
}
CheckValue<IkReal> x641=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x641.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x640.value)+(((1.5707963267949)*(x641.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x642=IKsin(j16);
IkReal x643=IKcos(j16);
IkReal x644=((1.0)*gconst5);
IkReal x645=(gconst5*x643);
evalcond[0]=(new_r11*x642);
evalcond[1]=(new_r10*x643);
evalcond[2]=((-1.0)*gconst5*x642);
evalcond[3]=((-1.0)*x645);
evalcond[4]=(x645+new_r11);
evalcond[5]=(gconst5+((new_r11*x643)));
evalcond[6]=((((-1.0)*x642*x644))+new_r10);
evalcond[7]=((((-1.0)*x644))+((new_r10*x642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x647 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x647.valid){
continue;
}
IkReal x646=((1.0)*(x647.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x646)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x646)));
IkReal gconst4=0;
IkReal x648 = new_r11*new_r11;
if(IKabs(x648)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x648,-0.5)));
j16eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x650 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x650.valid){
continue;
}
IkReal x649=((1.0)*(x650.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x649)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x649)));
IkReal gconst4=0;
IkReal x651 = new_r11*new_r11;
if(IKabs(x651)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x651,-0.5)));
j16eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x653 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x653.valid){
continue;
}
IkReal x652=((1.0)*(x653.value));
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
sj18=gconst4;
cj18=gconst5;
j18=((3.14159265)+(((-1.0)*x652)));
new_r01=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x652)));
IkReal gconst4=0;
IkReal x654 = new_r11*new_r11;
if(IKabs(x654)==0){
continue;
}
IkReal gconst5=((-1.0)*new_r11*(pow(x654,-0.5)));
j16eval[0]=new_r11;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x655=IKPowWithIntegerCheck(gconst5,-1);
if(!x655.valid){
continue;
}
CheckValue<IkReal> x656=IKPowWithIntegerCheck(new_r11,-1);
if(!x656.valid){
continue;
}
if( IKabs((new_r10*(x655.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x656.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x655.value)))+IKsqr(((-1.0)*gconst5*(x656.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((new_r10*(x655.value)), ((-1.0)*gconst5*(x656.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x657=IKsin(j16);
IkReal x658=IKcos(j16);
IkReal x659=((1.0)*gconst5);
IkReal x660=((1.0)*x657);
evalcond[0]=(new_r11*x657);
evalcond[1]=((-1.0)*gconst5*x657);
evalcond[2]=(new_r11+((gconst5*x658)));
evalcond[3]=(gconst5+((new_r11*x658)));
evalcond[4]=(new_r00+(((-1.0)*x658*x659)));
evalcond[5]=((((-1.0)*x657*x659))+new_r10);
evalcond[6]=(((new_r10*x658))+(((-1.0)*new_r00*x660)));
evalcond[7]=((((-1.0)*x659))+((new_r10*x657))+((new_r00*x658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x661 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x661.valid){
continue;
}
CheckValue<IkReal> x662=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x662.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x661.value)+(((1.5707963267949)*(x662.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x663=IKsin(j16);
IkReal x664=IKcos(j16);
IkReal x665=((1.0)*gconst5);
IkReal x666=((1.0)*x663);
evalcond[0]=(new_r11*x663);
evalcond[1]=((-1.0)*gconst5*x663);
evalcond[2]=(((gconst5*x664))+new_r11);
evalcond[3]=(gconst5+((new_r11*x664)));
evalcond[4]=(new_r00+(((-1.0)*x664*x665)));
evalcond[5]=((((-1.0)*x663*x665))+new_r10);
evalcond[6]=(((new_r10*x664))+(((-1.0)*new_r00*x666)));
evalcond[7]=(((new_r10*x663))+(((-1.0)*x665))+((new_r00*x664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x667 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x667.valid){
continue;
}
CheckValue<IkReal> x668=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x668.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x667.value)+(((1.5707963267949)*(x668.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x669=IKsin(j16);
IkReal x670=IKcos(j16);
IkReal x671=((1.0)*gconst5);
IkReal x672=((1.0)*x669);
evalcond[0]=(new_r11*x669);
evalcond[1]=((-1.0)*gconst5*x669);
evalcond[2]=(((gconst5*x670))+new_r11);
evalcond[3]=(((new_r11*x670))+gconst5);
evalcond[4]=((((-1.0)*x670*x671))+new_r00);
evalcond[5]=((((-1.0)*x669*x671))+new_r10);
evalcond[6]=(((new_r10*x670))+(((-1.0)*new_r00*x672)));
evalcond[7]=(((new_r00*x670))+((new_r10*x669))+(((-1.0)*x671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x673=((1.0)*new_r11);
CheckValue<IkReal> x674=IKPowWithIntegerCheck(IKsign(((gconst4*gconst4)+(gconst5*gconst5))),-1);
if(!x674.valid){
continue;
}
CheckValue<IkReal> x675 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x673)))),IkReal(((((-1.0)*gconst5*x673))+(((-1.0)*gconst4*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x675.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x674.value)))+(x675.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x676=IKsin(j16);
IkReal x677=IKcos(j16);
IkReal x678=((1.0)*gconst5);
IkReal x679=(gconst4*x677);
IkReal x680=((1.0)*x676);
IkReal x681=(x676*x678);
evalcond[0]=(((new_r11*x676))+((new_r01*x677))+gconst4);
evalcond[1]=(((gconst5*x677))+((gconst4*x676))+new_r11);
evalcond[2]=((((-1.0)*x681))+x679+new_r01);
evalcond[3]=(((new_r10*x677))+gconst4+(((-1.0)*new_r00*x680)));
evalcond[4]=(((new_r11*x677))+(((-1.0)*new_r01*x680))+gconst5);
evalcond[5]=((((-1.0)*x681))+x679+new_r10);
evalcond[6]=(((new_r00*x677))+((new_r10*x676))+(((-1.0)*x678)));
evalcond[7]=(new_r00+(((-1.0)*x677*x678))+(((-1.0)*gconst4*x680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x682=((1.0)*new_r11);
CheckValue<IkReal> x683 = IKatan2WithCheck(IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x682)))),IkReal(((((-1.0)*gconst4*new_r01))+(((-1.0)*gconst5*x682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x683.valid){
continue;
}
CheckValue<IkReal> x684=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x684.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x683.value)+(((1.5707963267949)*(x684.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x685=IKsin(j16);
IkReal x686=IKcos(j16);
IkReal x687=((1.0)*gconst5);
IkReal x688=(gconst4*x686);
IkReal x689=((1.0)*x685);
IkReal x690=(x685*x687);
evalcond[0]=(gconst4+((new_r01*x686))+((new_r11*x685)));
evalcond[1]=(((gconst5*x686))+((gconst4*x685))+new_r11);
evalcond[2]=(x688+(((-1.0)*x690))+new_r01);
evalcond[3]=(gconst4+((new_r10*x686))+(((-1.0)*new_r00*x689)));
evalcond[4]=((((-1.0)*new_r01*x689))+gconst5+((new_r11*x686)));
evalcond[5]=(x688+(((-1.0)*x690))+new_r10);
evalcond[6]=((((-1.0)*x687))+((new_r00*x686))+((new_r10*x685)));
evalcond[7]=((((-1.0)*x686*x687))+new_r00+(((-1.0)*gconst4*x689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x691=((1.0)*gconst4);
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal((((gconst4*new_r01))+(((-1.0)*new_r10*x691)))),IkReal(((((-1.0)*new_r00*x691))+(((-1.0)*new_r11*x691)))),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
CheckValue<IkReal> x693=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x693.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x692.value)+(((1.5707963267949)*(x693.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x694=IKsin(j16);
IkReal x695=IKcos(j16);
IkReal x696=((1.0)*gconst5);
IkReal x697=(gconst4*x695);
IkReal x698=((1.0)*x694);
IkReal x699=(x694*x696);
evalcond[0]=(gconst4+((new_r11*x694))+((new_r01*x695)));
evalcond[1]=(((gconst4*x694))+new_r11+((gconst5*x695)));
evalcond[2]=(x697+(((-1.0)*x699))+new_r01);
evalcond[3]=(gconst4+((new_r10*x695))+(((-1.0)*new_r00*x698)));
evalcond[4]=((((-1.0)*new_r01*x698))+gconst5+((new_r11*x695)));
evalcond[5]=(x697+(((-1.0)*x699))+new_r10);
evalcond[6]=(((new_r10*x694))+(((-1.0)*x696))+((new_r00*x695)));
evalcond[7]=((((-1.0)*gconst4*x698))+(((-1.0)*x695*x696))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j16eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j16]

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x701 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x701.valid){
continue;
}
IkReal x700=x701.value;
j16array[0]=((-1.0)*x700);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((3.14159265358979)+(((-1.0)*x700)));
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j16))))+(((-1.0)*new_r00*(IKsin(j16)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x702=((1.0)*sj18);
CheckValue<IkReal> x703 = IKatan2WithCheck(IkReal((((cj18*new_r01))+(((-1.0)*new_r11*x702)))),IkReal(((((-1.0)*cj18*new_r11))+(((-1.0)*new_r01*x702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x703.valid){
continue;
}
CheckValue<IkReal> x704=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x704.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x703.value)+(((1.5707963267949)*(x704.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x705=IKcos(j16);
IkReal x706=IKsin(j16);
IkReal x707=(sj18*x705);
IkReal x708=((1.0)*x706);
IkReal x709=(cj18*x705);
IkReal x710=(cj18*x708);
evalcond[0]=(((new_r01*x705))+sj18+((new_r11*x706)));
evalcond[1]=(x709+new_r11+((sj18*x706)));
evalcond[2]=((((-1.0)*x710))+x707+new_r01);
evalcond[3]=(sj18+((new_r10*x705))+(((-1.0)*new_r00*x708)));
evalcond[4]=(cj18+((new_r11*x705))+(((-1.0)*new_r01*x708)));
evalcond[5]=((((-1.0)*x710))+x707+new_r10);
evalcond[6]=(((new_r00*x705))+(((-1.0)*cj18))+((new_r10*x706)));
evalcond[7]=((((-1.0)*sj18*x708))+(((-1.0)*x709))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x711=((1.0)*sj18);
CheckValue<IkReal> x712=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x712.valid){
continue;
}
CheckValue<IkReal> x713 = IKatan2WithCheck(IkReal((((new_r01*sj18))+(((-1.0)*new_r10*x711)))),IkReal(((((-1.0)*new_r11*x711))+(((-1.0)*new_r00*x711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x713.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x712.value)))+(x713.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x714=IKcos(j16);
IkReal x715=IKsin(j16);
IkReal x716=(sj18*x714);
IkReal x717=((1.0)*x715);
IkReal x718=(cj18*x714);
IkReal x719=(cj18*x717);
evalcond[0]=(((new_r01*x714))+sj18+((new_r11*x715)));
evalcond[1]=(((sj18*x715))+x718+new_r11);
evalcond[2]=((((-1.0)*x719))+x716+new_r01);
evalcond[3]=(sj18+((new_r10*x714))+(((-1.0)*new_r00*x717)));
evalcond[4]=(cj18+((new_r11*x714))+(((-1.0)*new_r01*x717)));
evalcond[5]=((((-1.0)*x719))+x716+new_r10);
evalcond[6]=(((new_r00*x714))+(((-1.0)*cj18))+((new_r10*x715)));
evalcond[7]=((((-1.0)*sj18*x717))+(((-1.0)*x718))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x720 = IKatan2WithCheck(IkReal(((-1.0)+(new_r01*new_r01)+(cj18*cj18))),IkReal(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj18*sj18)))),IKFAST_ATAN2_MAGTHRESH);
if(!x720.valid){
continue;
}
CheckValue<IkReal> x721=IKPowWithIntegerCheck(IKsign((((cj18*new_r01))+((new_r11*sj18)))),-1);
if(!x721.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x720.value)+(((1.5707963267949)*(x721.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x722=IKcos(j16);
IkReal x723=IKsin(j16);
IkReal x724=(sj18*x722);
IkReal x725=((1.0)*x723);
IkReal x726=(cj18*x722);
IkReal x727=(cj18*x725);
evalcond[0]=(((new_r01*x722))+sj18+((new_r11*x723)));
evalcond[1]=(x726+new_r11+((sj18*x723)));
evalcond[2]=((((-1.0)*x727))+x724+new_r01);
evalcond[3]=(sj18+(((-1.0)*new_r00*x725))+((new_r10*x722)));
evalcond[4]=(cj18+((new_r11*x722))+(((-1.0)*new_r01*x725)));
evalcond[5]=((((-1.0)*x727))+x724+new_r10);
evalcond[6]=(((new_r00*x722))+(((-1.0)*cj18))+((new_r10*x723)));
evalcond[7]=((((-1.0)*sj18*x725))+(((-1.0)*x726))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j16eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j16eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j16eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j16]

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x729 = IKatan2WithCheck(IkReal((new_r10*new_r22)),IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x729.valid){
continue;
}
IkReal x728=x729.value;
j16array[0]=((-1.0)*x728);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((3.14159265358979)+(((-1.0)*x728)));
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x730=IKcos(j16);
IkReal x731=IKsin(j16);
IkReal x732=((1.0)*x731);
IkReal x733=(new_r11*x730);
evalcond[0]=(((new_r01*x730))+((new_r11*x731)));
evalcond[1]=(((new_r00*x730))+((new_r10*x731)));
evalcond[2]=((((-1.0)*new_r00*x732))+((new_r10*x730)));
evalcond[3]=(x733+(((-1.0)*new_r01*x732)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x732))+((new_r22*x733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x735 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x735.valid){
continue;
}
IkReal x734=x735.value;
j16array[0]=((-1.0)*x734);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((3.14159265358979)+(((-1.0)*x734)));
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x736=IKcos(j16);
IkReal x737=IKsin(j16);
IkReal x738=(new_r22*x736);
IkReal x739=((1.0)*new_r00*x737);
IkReal x740=((1.0)*new_r01*x737);
evalcond[0]=(((new_r01*x736))+((new_r11*x737)));
evalcond[1]=((((-1.0)*x739))+((new_r10*x736)));
evalcond[2]=((((-1.0)*x740))+((new_r11*x736)));
evalcond[3]=((((-1.0)*new_r22*x739))+((new_r10*x738)));
evalcond[4]=((((-1.0)*new_r22*x740))+((new_r11*x738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x742 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x742.valid){
continue;
}
IkReal x741=x742.value;
j16array[0]=((-1.0)*x741);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((3.14159265358979)+(((-1.0)*x741)));
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x743=IKcos(j16);
IkReal x744=IKsin(j16);
IkReal x745=((1.0)*x744);
IkReal x746=(new_r22*x743);
evalcond[0]=(((new_r10*x744))+((new_r00*x743)));
evalcond[1]=((((-1.0)*new_r00*x745))+((new_r10*x743)));
evalcond[2]=((((-1.0)*new_r01*x745))+((new_r11*x743)));
evalcond[3]=((((-1.0)*new_r00*new_r22*x745))+((new_r10*x746)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x745))+((new_r11*x746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x748=IKPowWithIntegerCheck(cj17,-1);
if(!x748.valid){
continue;
}
IkReal x747=x748.value;
CheckValue<IkReal> x749=IKPowWithIntegerCheck(new_r01,-1);
if(!x749.valid){
continue;
}
if( IKabs(((-1.0)*new_r02*x747)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x747*(x749.value)*(((((-1.0)*cj17*sj18))+((new_r02*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02*x747))+IKsqr((x747*(x749.value)*(((((-1.0)*cj17*sj18))+((new_r02*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r02*x747), (x747*(x749.value)*(((((-1.0)*cj17*sj18))+((new_r02*new_r11))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[18];
IkReal x750=IKcos(j16);
IkReal x751=IKsin(j16);
IkReal x752=((1.0)*cj18);
IkReal x753=((1.0)*cj17);
IkReal x754=((1.0)*new_r02);
IkReal x755=((1.0)*sj17);
IkReal x756=((1.0)*sj18);
IkReal x757=(sj17*x752);
IkReal x758=(new_r01*x751);
IkReal x759=(sj17*x751);
IkReal x760=(new_r00*x751);
IkReal x761=(sj17*x750);
IkReal x762=(new_r12*x750);
IkReal x763=(cj17*x750);
evalcond[0]=(((cj17*x751))+new_r02);
evalcond[1]=((((-1.0)*x750*x753))+new_r12);
evalcond[2]=(((new_r12*x751))+((new_r02*x750)));
evalcond[3]=(((new_r11*x751))+sj18+((new_r01*x750)));
evalcond[4]=(((sj18*x750))+((cj18*x759))+new_r01);
evalcond[5]=(((new_r00*x750))+((new_r10*x751))+(((-1.0)*x752)));
evalcond[6]=((((-1.0)*x750*x752))+((sj18*x759))+new_r00);
evalcond[7]=((((-1.0)*x750*x757))+((sj18*x751))+new_r11);
evalcond[8]=((((-1.0)*x751*x754))+x762+(((-1.0)*x753)));
evalcond[9]=((((-1.0)*x751*x752))+(((-1.0)*sj18*x750*x755))+new_r10);
evalcond[10]=(((new_r10*x750))+(((-1.0)*sj18*x755))+(((-1.0)*x760)));
evalcond[11]=(((new_r11*x750))+(((-1.0)*x758))+(((-1.0)*x757)));
evalcond[12]=(((new_r10*x763))+(((-1.0)*x753*x760))+((new_r20*sj17)));
evalcond[13]=(((new_r11*x763))+(((-1.0)*x753*x758))+((new_r21*sj17)));
evalcond[14]=(((new_r12*x761))+(((-1.0)*x754*x759))+(((-1.0)*new_r22*x753)));
evalcond[15]=((-1.0)+((cj17*x762))+(((-1.0)*new_r02*x751*x753))+((new_r22*sj17)));
evalcond[16]=(((new_r10*x761))+(((-1.0)*x755*x760))+(((-1.0)*new_r20*x753))+(((-1.0)*x756)));
evalcond[17]=(((new_r11*x761))+(((-1.0)*new_r21*x753))+(((-1.0)*x755*x758))+(((-1.0)*x752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x764=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x764.valid){
continue;
}
CheckValue<IkReal> x765 = IKatan2WithCheck(IkReal(((-1.0)*new_r02)),IkReal(new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x765.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x764.value)))+(x765.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[18];
IkReal x766=IKcos(j16);
IkReal x767=IKsin(j16);
IkReal x768=((1.0)*cj18);
IkReal x769=((1.0)*cj17);
IkReal x770=((1.0)*new_r02);
IkReal x771=((1.0)*sj17);
IkReal x772=((1.0)*sj18);
IkReal x773=(sj17*x768);
IkReal x774=(new_r01*x767);
IkReal x775=(sj17*x767);
IkReal x776=(new_r00*x767);
IkReal x777=(sj17*x766);
IkReal x778=(new_r12*x766);
IkReal x779=(cj17*x766);
evalcond[0]=(((cj17*x767))+new_r02);
evalcond[1]=((((-1.0)*x766*x769))+new_r12);
evalcond[2]=(((new_r12*x767))+((new_r02*x766)));
evalcond[3]=(((new_r11*x767))+((new_r01*x766))+sj18);
evalcond[4]=(((sj18*x766))+((cj18*x775))+new_r01);
evalcond[5]=(((new_r10*x767))+(((-1.0)*x768))+((new_r00*x766)));
evalcond[6]=(((sj18*x775))+(((-1.0)*x766*x768))+new_r00);
evalcond[7]=(((sj18*x767))+(((-1.0)*x766*x773))+new_r11);
evalcond[8]=((((-1.0)*x769))+(((-1.0)*x767*x770))+x778);
evalcond[9]=((((-1.0)*sj18*x766*x771))+(((-1.0)*x767*x768))+new_r10);
evalcond[10]=(((new_r10*x766))+(((-1.0)*sj18*x771))+(((-1.0)*x776)));
evalcond[11]=(((new_r11*x766))+(((-1.0)*x773))+(((-1.0)*x774)));
evalcond[12]=((((-1.0)*x769*x776))+((new_r10*x779))+((new_r20*sj17)));
evalcond[13]=(((new_r11*x779))+(((-1.0)*x769*x774))+((new_r21*sj17)));
evalcond[14]=((((-1.0)*new_r22*x769))+((new_r12*x777))+(((-1.0)*x770*x775)));
evalcond[15]=((-1.0)+((cj17*x778))+(((-1.0)*new_r02*x767*x769))+((new_r22*sj17)));
evalcond[16]=((((-1.0)*new_r20*x769))+(((-1.0)*x771*x776))+((new_r10*x777))+(((-1.0)*x772)));
evalcond[17]=((((-1.0)*x768))+(((-1.0)*x771*x774))+((new_r11*x777))+(((-1.0)*new_r21*x769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x780=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x780.valid){
continue;
}
CheckValue<IkReal> x781 = IKatan2WithCheck(IkReal(((-1.0)*new_r02)),IkReal(new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x781.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x780.value)))+(x781.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x782=IKcos(j16);
IkReal x783=IKsin(j16);
IkReal x784=((1.0)*cj17);
IkReal x785=((1.0)*x783);
IkReal x786=(cj17*x782);
IkReal x787=(new_r12*x782);
evalcond[0]=(((cj17*x783))+new_r02);
evalcond[1]=((((-1.0)*x782*x784))+new_r12);
evalcond[2]=(((new_r12*x783))+((new_r02*x782)));
evalcond[3]=((((-1.0)*x784))+(((-1.0)*new_r02*x785))+x787);
evalcond[4]=(((new_r10*x786))+((new_r20*sj17))+(((-1.0)*new_r00*x783*x784)));
evalcond[5]=(((new_r11*x786))+(((-1.0)*new_r01*x783*x784))+((new_r21*sj17)));
evalcond[6]=(((sj17*x787))+(((-1.0)*new_r22*x784))+(((-1.0)*new_r02*sj17*x785)));
evalcond[7]=((-1.0)+((new_r12*x786))+((new_r22*sj17))+(((-1.0)*new_r02*x783*x784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j18eval[3];
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
j18eval[0]=cj16;
j18eval[1]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal j18eval[3];
j18eval[0]=cj17;
j18eval[1]=sj16;
j18eval[2]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x788=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj16*x788))+(((-1.0)*new_r00*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj16*x788))+((cj16*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj16*x788))+(((-1.0)*new_r00*sj16))))+IKsqr(((((-1.0)*sj16*x788))+((cj16*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*cj16*x788))+(((-1.0)*new_r00*sj16))), ((((-1.0)*sj16*x788))+((cj16*new_r00))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x789=IKcos(j18);
IkReal x790=IKsin(j18);
IkReal x791=((1.0)*sj16);
IkReal x792=(sj16*x790);
IkReal x793=((1.0)*x789);
IkReal x794=(cj16*x790);
IkReal x795=(sj16*x789);
IkReal x796=(cj16*x793);
evalcond[0]=(x790+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=((((-1.0)*x793))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[2]=(x795+x794+new_r01);
evalcond[3]=((((-1.0)*x796))+x792+new_r00);
evalcond[4]=((((-1.0)*x796))+x792+new_r11);
evalcond[5]=((((-1.0)*x790))+((cj16*new_r10))+(((-1.0)*new_r00*x791)));
evalcond[6]=((((-1.0)*new_r01*x791))+(((-1.0)*x793))+((cj16*new_r11)));
evalcond[7]=((((-1.0)*x789*x791))+(((-1.0)*x794))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x797=((1.0)*cj16);
if( IKabs(((((-1.0)*new_r01*x797))+(((-1.0)*new_r11*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x797))+((new_r01*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x797))+(((-1.0)*new_r11*sj16))))+IKsqr(((((-1.0)*new_r11*x797))+((new_r01*sj16))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*new_r01*x797))+(((-1.0)*new_r11*sj16))), ((((-1.0)*new_r11*x797))+((new_r01*sj16))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x798=IKsin(j18);
IkReal x799=IKcos(j18);
IkReal x800=((1.0)*sj16);
IkReal x801=(cj16*x798);
IkReal x802=(cj16*x799);
IkReal x803=(x799*x800);
evalcond[0]=(x798+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=((((-1.0)*new_r00*x800))+x798+((cj16*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x800))+x799+((cj16*new_r11)));
evalcond[3]=((((-1.0)*x799))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[4]=(new_r11+x802+((sj16*x798)));
evalcond[5]=(new_r01+x801+(((-1.0)*x803)));
evalcond[6]=(new_r10+x801+(((-1.0)*x803)));
evalcond[7]=((((-1.0)*x802))+(((-1.0)*x798*x800))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x804=IKsin(j18);
IkReal x805=IKcos(j18);
IkReal x806=((1.0)*cj17);
IkReal x807=((1.0)*x805);
IkReal x808=((1.0)*x804);
evalcond[0]=(new_r01+x804);
evalcond[1]=(new_r20+((cj17*x804)));
evalcond[2]=(new_r21+((cj17*x805)));
evalcond[3]=(new_r00+(((-1.0)*x807)));
evalcond[4]=((((-1.0)*sj17*x807))+new_r11);
evalcond[5]=((((-1.0)*sj17*x808))+new_r10);
evalcond[6]=((((-1.0)*new_r20*x806))+((new_r10*sj17))+(((-1.0)*x808)));
evalcond[7]=((((-1.0)*x807))+((new_r11*sj17))+(((-1.0)*new_r21*x806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[3];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r21));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x809=IKsin(j18);
IkReal x810=IKcos(j18);
evalcond[0]=(new_r20+x809);
evalcond[1]=(new_r21+x810);
evalcond[2]=((((-1.0)*new_r01))+x809);
evalcond[3]=((((-1.0)*x810))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r20, new_r21);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x811=IKsin(j18);
IkReal x812=((1.0)*(IKcos(j18)));
evalcond[0]=((((-1.0)*x811))+new_r20);
evalcond[1]=((((-1.0)*x812))+new_r21);
evalcond[2]=((((-1.0)*new_r01))+x811);
evalcond[3]=((((-1.0)*x812))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x813=IKcos(j18);
IkReal x814=IKsin(j18);
evalcond[0]=(new_r11+x813);
evalcond[1]=((((-1.0)*new_r01))+x814);
evalcond[2]=((((-1.0)*x813))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x814))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, new_r11);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x815=IKsin(j18);
IkReal x816=((1.0)*(IKcos(j18)));
evalcond[0]=((((-1.0)*new_r01))+x815);
evalcond[1]=((((-1.0)*x816))+new_r11);
evalcond[2]=((((-1.0)*new_r10))+x815);
evalcond[3]=((((-1.0)*x816))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x817=IKcos(j18);
IkReal x818=IKsin(j18);
IkReal x819=((-1.0)*x818);
evalcond[0]=(new_r22*x817);
evalcond[1]=x819;
evalcond[2]=((-1.0)*x817);
evalcond[3]=(new_r22*x819);
evalcond[4]=((((-1.0)*new_r01))+x818);
evalcond[5]=((((-1.0)*x817))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x820=IKPowWithIntegerCheck(sj17,-1);
if(!x820.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x820.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11*(x820.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r11*(x820.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x821=IKsin(j18);
IkReal x822=IKcos(j18);
IkReal x823=((1.0)*cj17);
IkReal x824=((1.0)*new_r10);
IkReal x825=((1.0)*x822);
IkReal x826=((1.0)*x821);
evalcond[0]=(((cj17*x821))+new_r20);
evalcond[1]=(((cj17*x822))+new_r21);
evalcond[2]=((((-1.0)*new_r01))+x821);
evalcond[3]=(((sj17*x822))+new_r11);
evalcond[4]=((((-1.0)*x825))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x824))+(((-1.0)*sj17*x826)));
evalcond[6]=((((-1.0)*new_r20*x823))+(((-1.0)*x826))+(((-1.0)*sj17*x824)));
evalcond[7]=((((-1.0)*x825))+(((-1.0)*new_r21*x823))+(((-1.0)*new_r11*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x827=IKPowWithIntegerCheck(cj17,-1);
if(!x827.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x827.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21*(x827.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r21*(x827.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x828=IKsin(j18);
IkReal x829=IKcos(j18);
IkReal x830=((1.0)*cj17);
IkReal x831=((1.0)*new_r10);
IkReal x832=((1.0)*x829);
IkReal x833=((1.0)*x828);
evalcond[0]=(((cj17*x828))+new_r20);
evalcond[1]=(((cj17*x829))+new_r21);
evalcond[2]=((((-1.0)*new_r01))+x828);
evalcond[3]=(((sj17*x829))+new_r11);
evalcond[4]=((((-1.0)*x832))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x831))+(((-1.0)*sj17*x833)));
evalcond[6]=((((-1.0)*x833))+(((-1.0)*new_r20*x830))+(((-1.0)*sj17*x831)));
evalcond[7]=((((-1.0)*new_r11*sj17))+(((-1.0)*x832))+(((-1.0)*new_r21*x830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x834 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x834.valid){
continue;
}
CheckValue<IkReal> x835=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x835.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x834.value)+(((1.5707963267949)*(x835.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x836=IKsin(j18);
IkReal x837=IKcos(j18);
IkReal x838=((1.0)*cj17);
IkReal x839=((1.0)*new_r10);
IkReal x840=((1.0)*x837);
IkReal x841=((1.0)*x836);
evalcond[0]=(((cj17*x836))+new_r20);
evalcond[1]=(((cj17*x837))+new_r21);
evalcond[2]=((((-1.0)*new_r01))+x836);
evalcond[3]=(((sj17*x837))+new_r11);
evalcond[4]=((((-1.0)*x840))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x839))+(((-1.0)*sj17*x841)));
evalcond[6]=((((-1.0)*x841))+(((-1.0)*new_r20*x838))+(((-1.0)*sj17*x839)));
evalcond[7]=((((-1.0)*x840))+(((-1.0)*new_r11*sj17))+(((-1.0)*new_r21*x838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x842=IKsin(j18);
IkReal x843=IKcos(j18);
IkReal x844=((1.0)*x843);
evalcond[0]=(new_r20+x842);
evalcond[1]=(new_r21+x843);
evalcond[2]=(((cj16*x842))+new_r01);
evalcond[3]=(new_r11+((sj16*x842)));
evalcond[4]=(((new_r02*x843))+new_r10);
evalcond[5]=((((-1.0)*cj16*x844))+new_r00);
evalcond[6]=(x842+((cj16*new_r01))+((new_r11*sj16)));
evalcond[7]=((((-1.0)*x844))+((cj16*new_r00))+((new_r10*sj16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r20, new_r21);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x845=IKsin(j18);
IkReal x846=IKcos(j18);
IkReal x847=((1.0)*x846);
evalcond[0]=((((-1.0)*x845))+new_r20);
evalcond[1]=((((-1.0)*x847))+new_r21);
evalcond[2]=(((cj16*x845))+new_r01);
evalcond[3]=(new_r11+((sj16*x845)));
evalcond[4]=((((-1.0)*cj16*x847))+new_r00);
evalcond[5]=((((-1.0)*new_r02*x847))+new_r10);
evalcond[6]=(x845+((cj16*new_r01))+((new_r11*sj16)));
evalcond[7]=((((-1.0)*x847))+((cj16*new_r00))+((new_r10*sj16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x848=IKsin(j18);
IkReal x849=IKcos(j18);
IkReal x850=((1.0)*cj17);
IkReal x851=((1.0)*sj17);
IkReal x852=((1.0)*x849);
evalcond[0]=(new_r11+x848);
evalcond[1]=(((cj17*x848))+new_r20);
evalcond[2]=(((cj17*x849))+new_r21);
evalcond[3]=((((-1.0)*x852))+new_r10);
evalcond[4]=(((sj17*x849))+new_r01);
evalcond[5]=(((sj17*x848))+new_r00);
evalcond[6]=((((-1.0)*new_r20*x850))+(((-1.0)*new_r00*x851))+(((-1.0)*x848)));
evalcond[7]=((((-1.0)*new_r21*x850))+(((-1.0)*x852))+(((-1.0)*new_r01*x851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[3];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j18eval[0]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j18eval[0]=cj17;
j18eval[1]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, new_r01);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x853=IKsin(j18);
IkReal x854=((1.0)*(IKcos(j18)));
evalcond[0]=((((-1.0)*new_r11))+x853);
evalcond[1]=((((-1.0)*x854))+new_r01);
evalcond[2]=((((-1.0)*x853))+new_r00);
evalcond[3]=((((-1.0)*x854))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r01));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x855=IKsin(j18);
IkReal x856=IKcos(j18);
evalcond[0]=(new_r01+x856);
evalcond[1]=(new_r00+x855);
evalcond[2]=((((-1.0)*new_r11))+x855);
evalcond[3]=((((-1.0)*x856))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r21));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x857=IKsin(j18);
IkReal x858=IKcos(j18);
evalcond[0]=(new_r20+x857);
evalcond[1]=(new_r21+x858);
evalcond[2]=((((-1.0)*new_r11))+x857);
evalcond[3]=((((-1.0)*x858))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r20, new_r21);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x859=IKsin(j18);
IkReal x860=((1.0)*(IKcos(j18)));
evalcond[0]=((((-1.0)*x859))+new_r20);
evalcond[1]=((((-1.0)*x860))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x859);
evalcond[3]=((((-1.0)*x860))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x861=IKcos(j18);
IkReal x862=IKsin(j18);
IkReal x863=((-1.0)*x862);
IkReal x864=((-1.0)*x861);
evalcond[0]=x863;
evalcond[1]=x864;
evalcond[2]=(new_r22*x864);
evalcond[3]=(new_r22*x863);
evalcond[4]=((((-1.0)*new_r11))+x862);
evalcond[5]=((((-1.0)*x861))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x865=IKPowWithIntegerCheck(cj17,-1);
if(!x865.valid){
continue;
}
CheckValue<IkReal> x866=IKPowWithIntegerCheck(sj17,-1);
if(!x866.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x865.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x866.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x865.value)))+IKsqr((new_r01*(x866.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r20*(x865.value)), (new_r01*(x866.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x867=IKsin(j18);
IkReal x868=IKcos(j18);
IkReal x869=((1.0)*cj17);
IkReal x870=((1.0)*x868);
IkReal x871=((1.0)*x867);
evalcond[0]=(((cj17*x867))+new_r20);
evalcond[1]=(((cj17*x868))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x867);
evalcond[3]=((((-1.0)*sj17*x870))+new_r01);
evalcond[4]=((((-1.0)*sj17*x871))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x870)));
evalcond[6]=(((new_r00*sj17))+(((-1.0)*new_r20*x869))+(((-1.0)*x871)));
evalcond[7]=((((-1.0)*new_r21*x869))+((new_r01*sj17))+(((-1.0)*x870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x872=IKPowWithIntegerCheck(cj17,-1);
if(!x872.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x872.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x872.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x872.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x873=IKsin(j18);
IkReal x874=IKcos(j18);
IkReal x875=((1.0)*cj17);
IkReal x876=((1.0)*x874);
IkReal x877=((1.0)*x873);
evalcond[0]=(((cj17*x873))+new_r20);
evalcond[1]=(((cj17*x874))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x873);
evalcond[3]=((((-1.0)*sj17*x876))+new_r01);
evalcond[4]=((((-1.0)*sj17*x877))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x876)));
evalcond[6]=((((-1.0)*new_r20*x875))+((new_r00*sj17))+(((-1.0)*x877)));
evalcond[7]=((((-1.0)*new_r21*x875))+((new_r01*sj17))+(((-1.0)*x876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x878 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x878.valid){
continue;
}
CheckValue<IkReal> x879=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x879.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x878.value)+(((1.5707963267949)*(x879.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x880=IKsin(j18);
IkReal x881=IKcos(j18);
IkReal x882=((1.0)*cj17);
IkReal x883=((1.0)*x881);
IkReal x884=((1.0)*x880);
evalcond[0]=(((cj17*x880))+new_r20);
evalcond[1]=(((cj17*x881))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x880);
evalcond[3]=(new_r01+(((-1.0)*sj17*x883)));
evalcond[4]=(new_r00+(((-1.0)*sj17*x884)));
evalcond[5]=((((-1.0)*x883))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x884))+(((-1.0)*new_r20*x882))+((new_r00*sj17)));
evalcond[7]=((((-1.0)*new_r21*x882))+(((-1.0)*x883))+((new_r01*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j18eval[0]=IKabs(new_r22);
if( IKabs(j18eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j18]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
IkReal j18array[2], cj18array[2], sj18array[2], tempj18array[1];
int numsolutions = 0;
for(int ij18 = 0; ij18 < numroots; ++ij18)
{
IkReal htj18 = zeror[ij18];
tempj18array[0]=((2.0)*(atan(htj18)));
for(int kj18 = 0; kj18 < 1; ++kj18)
{
j18array[numsolutions] = tempj18array[kj18];
if( j18array[numsolutions] > IKPI )
{
    j18array[numsolutions]-=IK2PI;
}
else if( j18array[numsolutions] < -IKPI )
{
    j18array[numsolutions]+=IK2PI;
}
sj18array[numsolutions] = IKsin(j18array[numsolutions]);
cj18array[numsolutions] = IKcos(j18array[numsolutions]);
numsolutions++;
}
}
bool j18valid[2]={true,true};
_nj18 = 2;
for(int ij18 = 0; ij18 < numsolutions; ++ij18)
    {
if( !j18valid[ij18] )
{
    continue;
}
    j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
htj18 = IKtan(j18/2);

_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < numsolutions; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x886=IKPowWithIntegerCheck(cj17,-1);
if(!x886.valid){
continue;
}
IkReal x885=x886.value;
CheckValue<IkReal> x887=IKPowWithIntegerCheck(sj16,-1);
if(!x887.valid){
continue;
}
CheckValue<IkReal> x888=IKPowWithIntegerCheck(sj17,-1);
if(!x888.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x885)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x885*(x887.value)*(x888.value)*((((cj16*new_r20))+(((-1.0)*cj17*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x885))+IKsqr((x885*(x887.value)*(x888.value)*((((cj16*new_r20))+(((-1.0)*cj17*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r20*x885), (x885*(x887.value)*(x888.value)*((((cj16*new_r20))+(((-1.0)*cj17*new_r01))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x889=IKsin(j18);
IkReal x890=IKcos(j18);
IkReal x891=((1.0)*cj17);
IkReal x892=((1.0)*sj16);
IkReal x893=(cj16*new_r10);
IkReal x894=(cj16*sj17);
IkReal x895=((1.0)*x890);
IkReal x896=(sj16*x889);
IkReal x897=((1.0)*x889);
evalcond[0]=(((cj17*x889))+new_r20);
evalcond[1]=(((cj17*x890))+new_r21);
evalcond[2]=(x889+((cj16*new_r01))+((new_r11*sj16)));
evalcond[3]=((((-1.0)*x895))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[4]=(((cj16*x889))+((sj16*sj17*x890))+new_r01);
evalcond[5]=(new_r00+((sj17*x896))+(((-1.0)*cj16*x895)));
evalcond[6]=((((-1.0)*x894*x895))+new_r11+x896);
evalcond[7]=((((-1.0)*new_r00*x892))+x893+(((-1.0)*sj17*x897)));
evalcond[8]=((((-1.0)*new_r01*x892))+((cj16*new_r11))+(((-1.0)*sj17*x895)));
evalcond[9]=((((-1.0)*x894*x897))+new_r10+(((-1.0)*x890*x892)));
evalcond[10]=((((-1.0)*x897))+(((-1.0)*new_r20*x891))+(((-1.0)*new_r00*sj17*x892))+((sj17*x893)));
evalcond[11]=(((new_r11*x894))+(((-1.0)*new_r21*x891))+(((-1.0)*x895))+(((-1.0)*new_r01*sj17*x892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x899=IKPowWithIntegerCheck(cj17,-1);
if(!x899.valid){
continue;
}
IkReal x898=x899.value;
CheckValue<IkReal> x900=IKPowWithIntegerCheck(cj16,-1);
if(!x900.valid){
continue;
}
if( IKabs((x898*(x900.value)*(((((-1.0)*cj17*new_r01))+((new_r21*sj16*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x898)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x898*(x900.value)*(((((-1.0)*cj17*new_r01))+((new_r21*sj16*sj17))))))+IKsqr(((-1.0)*new_r21*x898))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((x898*(x900.value)*(((((-1.0)*cj17*new_r01))+((new_r21*sj16*sj17))))), ((-1.0)*new_r21*x898));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x901=IKsin(j18);
IkReal x902=IKcos(j18);
IkReal x903=((1.0)*cj17);
IkReal x904=((1.0)*sj16);
IkReal x905=(cj16*new_r10);
IkReal x906=(cj16*sj17);
IkReal x907=((1.0)*x902);
IkReal x908=(sj16*x901);
IkReal x909=((1.0)*x901);
evalcond[0]=(((cj17*x901))+new_r20);
evalcond[1]=(((cj17*x902))+new_r21);
evalcond[2]=(((cj16*new_r01))+((new_r11*sj16))+x901);
evalcond[3]=((((-1.0)*x907))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[4]=(((sj16*sj17*x902))+new_r01+((cj16*x901)));
evalcond[5]=((((-1.0)*cj16*x907))+((sj17*x908))+new_r00);
evalcond[6]=(new_r11+x908+(((-1.0)*x906*x907)));
evalcond[7]=((((-1.0)*new_r00*x904))+(((-1.0)*sj17*x909))+x905);
evalcond[8]=((((-1.0)*sj17*x907))+(((-1.0)*new_r01*x904))+((cj16*new_r11)));
evalcond[9]=((((-1.0)*x902*x904))+new_r10+(((-1.0)*x906*x909)));
evalcond[10]=((((-1.0)*new_r20*x903))+(((-1.0)*x909))+((sj17*x905))+(((-1.0)*new_r00*sj17*x904)));
evalcond[11]=((((-1.0)*x907))+(((-1.0)*new_r21*x903))+((new_r11*x906))+(((-1.0)*new_r01*sj17*x904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x910 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x910.valid){
continue;
}
CheckValue<IkReal> x911=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x911.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x910.value)+(((1.5707963267949)*(x911.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x912=IKsin(j18);
IkReal x913=IKcos(j18);
IkReal x914=((1.0)*cj17);
IkReal x915=((1.0)*sj16);
IkReal x916=(cj16*new_r10);
IkReal x917=(cj16*sj17);
IkReal x918=((1.0)*x913);
IkReal x919=(sj16*x912);
IkReal x920=((1.0)*x912);
evalcond[0]=(((cj17*x912))+new_r20);
evalcond[1]=(((cj17*x913))+new_r21);
evalcond[2]=(((cj16*new_r01))+((new_r11*sj16))+x912);
evalcond[3]=((((-1.0)*x918))+((cj16*new_r00))+((new_r10*sj16)));
evalcond[4]=(((sj16*sj17*x913))+((cj16*x912))+new_r01);
evalcond[5]=((((-1.0)*cj16*x918))+((sj17*x919))+new_r00);
evalcond[6]=(new_r11+x919+(((-1.0)*x917*x918)));
evalcond[7]=((((-1.0)*new_r00*x915))+x916+(((-1.0)*sj17*x920)));
evalcond[8]=((((-1.0)*new_r01*x915))+(((-1.0)*sj17*x918))+((cj16*new_r11)));
evalcond[9]=((((-1.0)*x913*x915))+new_r10+(((-1.0)*x917*x920)));
evalcond[10]=((((-1.0)*new_r00*sj17*x915))+(((-1.0)*x920))+((sj17*x916))+(((-1.0)*new_r20*x914)));
evalcond[11]=((((-1.0)*new_r21*x914))+((new_r11*x917))+(((-1.0)*x918))+(((-1.0)*new_r01*sj17*x915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j16;
vinfos[0].indices[0] = _ij16[0];
vinfos[0].indices[1] = _ij16[1];
vinfos[0].maxsolutions = _nj16;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j17;
vinfos[1].indices[0] = _ij17[0];
vinfos[1].indices[1] = _ij17[1];
vinfos[1].maxsolutions = _nj17;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j18;
vinfos[2].indices[0] = _ij18[0];
vinfos[2].indices[1] = _ij18[1];
vinfos[2].maxsolutions = _nj18;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j20;
vinfos[4].indices[0] = _ij20[0];
vinfos[4].indices[1] = _ij20[1];
vinfos[4].maxsolutions = _nj20;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j21;
vinfos[5].indices[0] = _ij21[0];
vinfos[5].indices[1] = _ij21[1];
vinfos[5].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - teoSim (defeb2fd3327ea06bb5b9518a572532e)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
